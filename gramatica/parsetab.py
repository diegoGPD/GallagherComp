
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD BOOL COMMA DO DOTCOMMA ELSE FLOAT FUNC GREATERTN ID IF IGNORE INI_BOOL INI_FLOAT INI_INT INI_STRING INT LEFTBRACK LEFTKEY LEFTPARENT LESS LESSTN LET MAIN MULT_BY NOTSAME PRINTV PROG RIGHTBRACK RIGHTKEY RIGHTPARENT SAME SET SPLIT_BY TIMES_BY_SAME TWOPOINTS VOID WHILE\n      compile : PROG ID seen_program DOTCOMMA lets modules\n                |\n    \n        modules : func modules\n                |\n    seen_program :  lets : LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets\n                | empty\n    seen_lets : \n      type : INT seen_type\n           | FLOAT seen_type\n           | BOOL seen_type\n    seen_type :  seen_ID_let : \n      aux_let : COMMA ID seen_ID_let aux_let\n              |\n    \n        func : FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code\n              |\n    \n        seen_func_name :\n    \n        params : LEFTPARENT param_table_init param_declare RIGHTPARENT\n    \n      param_table_init :\n    \n        param_declare : type ID seen_ID_let param_declare\n                | COMMA param_declare\n                | empty\n    \n      return_func_type : type\n                        | VOID void_detect\n    \n        void_detect :\n    \n        func_code : LEFTKEY lets func_code_aux RIGHTKEY\n    \n        func_code_aux : action func_code_aux\n                        |\n    \n        action : assign\n                | expresion\n    \n        expresion : term term_appear\n                    | term term_appear aux_expresion\n    \n        aux_expresion : ADD add_operator expresion\n                      | LESS add_operator expresion\n    \n       term : fact factor_appear\n              | fact factor_appear aux_term\n    \n        aux_term : SPLIT_BY add_operator term\n                  | MULT_BY add_operator term\n    \n        fact : expo expo_appear\n              | expo expo_appear aux_expo\n    \n        expo :  parent_aux\n               | call_lets\n    \n        parent_aux : LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent\n    \n        found_init_parent :\n    \n        found_end_parent :\n    \n        aux_expo : TIMES_BY_SAME add_operator fact\n    \n        assign : call_let set_appear SET set_value\n                | call_let set_appear SET expresion seen_final_asignacion DOTCOMMA\n    \n       seen_final_asignacion :\n    \n        add_operand :\n    \n        add_operator :\n    \n         set_appear :\n    \n        term_appear :\n    \n        factor_appear :\n    \n        expo_appear :\n    \n        call_let : ID check_let_exists\n    \n       call_lets : INI_INT check_global_const_exists\n                    | INI_FLOAT check_global_const_exists\n    \n        check_global_const_exists : add_operand\n    \n        check_let_exists :\n    \n        set_value : INI_INT aux_int_check append_operand DOTCOMMA generate_quad\n                    | INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad\n    \n        append_operand :\n    \n        generate_quad :\n    \n        aux_int_check :\n    \n        aux_float_check :\n    \n      empty :\n    '
    
_lr_action_items = {'PROG':([0,],[2,]),'$end':([0,1,5,6,8,9,10,13,38,45,47,67,],[-2,0,-68,-4,-7,-1,-4,-3,-68,-6,-16,-27,]),'ID':([2,8,11,15,16,17,18,21,22,23,30,35,38,45,48,51,54,55,56,58,60,61,62,63,65,66,70,72,73,75,76,77,79,82,85,88,97,101,102,103,104,105,106,107,110,111,112,113,],[3,-7,14,20,-12,-12,-12,-9,-10,-11,39,43,-68,-6,-68,59,59,-30,-31,-54,-55,-56,-42,-43,-51,-51,-32,-36,-40,-58,-60,-59,-33,-37,-41,-48,-46,-34,-35,-38,-39,-47,-44,-49,-65,-65,-62,-63,]),'DOTCOMMA':([3,4,20,26,29,39,46,50,58,60,61,62,63,65,66,70,72,73,75,76,77,79,82,85,89,90,91,97,98,99,100,101,102,103,104,105,106,108,109,],[-5,5,-13,-15,38,-13,-15,-14,-54,-55,-56,-42,-43,-51,-51,-32,-36,-40,-58,-60,-59,-33,-37,-41,-50,-51,-51,-46,107,-64,-64,-34,-35,-38,-39,-47,-44,110,111,]),'LET':([5,38,48,],[7,7,7,]),'FUNC':([5,6,8,10,38,45,47,67,],[-68,11,-7,11,-68,-6,-16,-27,]),'INT':([7,12,25,27,28,36,43,49,],[-8,16,-20,16,16,16,-13,16,]),'FLOAT':([7,12,25,27,28,36,43,49,],[-8,17,-20,17,17,17,-13,17,]),'BOOL':([7,12,25,27,28,36,43,49,],[-8,18,-20,18,18,18,-13,18,]),'LEFTPARENT':([8,14,19,38,45,48,51,54,55,56,58,60,61,62,63,64,65,66,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,92,93,94,95,96,97,101,102,103,104,105,106,107,110,111,112,113,],[-7,-18,25,-68,-6,-68,64,64,-30,-31,-54,-55,-56,-42,-43,-45,-51,-51,-32,-36,-40,64,-58,-60,-59,64,-33,-52,-52,-37,-52,-52,-41,-52,-48,64,64,64,64,64,-46,-34,-35,-38,-39,-47,-44,-49,-65,-65,-62,-63,]),'INI_INT':([8,38,45,48,51,54,55,56,58,60,61,62,63,64,65,66,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,92,93,94,95,96,97,101,102,103,104,105,106,107,110,111,112,113,],[-7,-68,-6,-68,65,65,-30,-31,-54,-55,-56,-42,-43,-45,-51,-51,-32,-36,-40,65,-58,-60,-59,90,-33,-52,-52,-37,-52,-52,-41,-52,-48,65,65,65,65,65,-46,-34,-35,-38,-39,-47,-44,-49,-65,-65,-62,-63,]),'INI_FLOAT':([8,38,45,48,51,54,55,56,58,60,61,62,63,64,65,66,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,92,93,94,95,96,97,101,102,103,104,105,106,107,110,111,112,113,],[-7,-68,-6,-68,66,66,-30,-31,-54,-55,-56,-42,-43,-45,-51,-51,-32,-36,-40,66,-58,-60,-59,91,-33,-52,-52,-37,-52,-52,-41,-52,-48,66,66,66,66,66,-46,-34,-35,-38,-39,-47,-44,-49,-65,-65,-62,-63,]),'RIGHTKEY':([8,38,45,48,51,53,54,55,56,58,60,61,62,63,65,66,68,70,72,73,75,76,77,79,82,85,88,97,101,102,103,104,105,106,107,110,111,112,113,],[-7,-68,-6,-68,-29,67,-29,-30,-31,-54,-55,-56,-42,-43,-51,-51,-28,-32,-36,-40,-58,-60,-59,-33,-37,-41,-48,-46,-34,-35,-38,-39,-47,-44,-49,-65,-65,-62,-63,]),'TWOPOINTS':([16,17,18,21,22,23,24,31,32,33,41,42,],[-12,-12,-12,-9,-10,-11,27,40,-24,-26,-25,-19,]),'COMMA':([20,25,26,28,36,39,43,46,49,],[-13,-20,30,36,36,-13,-13,30,36,]),'RIGHTPARENT':([25,28,34,36,37,43,44,49,52,58,60,61,62,63,65,66,70,72,73,75,76,77,79,82,85,87,97,101,102,103,104,105,106,],[-20,-68,42,-68,-23,-13,-22,-68,-21,-54,-55,-56,-42,-43,-51,-51,-32,-36,-40,-58,-60,-59,-33,-37,-41,97,-46,-34,-35,-38,-39,-47,-44,]),'VOID':([27,],[33,]),'LEFTKEY':([40,],[48,]),'SET':([57,59,69,71,],[-53,-61,78,-57,]),'ADD':([58,60,61,62,63,65,66,70,72,73,75,76,77,82,85,90,91,97,103,104,105,106,],[-54,-55,-56,-42,-43,-51,-51,80,-36,-40,-58,-60,-59,-37,-41,-51,-51,-46,-38,-39,-47,-44,]),'LESS':([58,60,61,62,63,65,66,70,72,73,75,76,77,82,85,90,91,97,103,104,105,106,],[-54,-55,-56,-42,-43,-51,-51,81,-36,-40,-58,-60,-59,-37,-41,-51,-51,-46,-38,-39,-47,-44,]),'SPLIT_BY':([60,61,62,63,65,66,72,73,75,76,77,85,90,91,97,105,106,],[-55,-56,-42,-43,-51,-51,83,-40,-58,-60,-59,-41,-51,-51,-46,-47,-44,]),'MULT_BY':([60,61,62,63,65,66,72,73,75,76,77,85,90,91,97,105,106,],[-55,-56,-42,-43,-51,-51,84,-40,-58,-60,-59,-41,-51,-51,-46,-47,-44,]),'TIMES_BY_SAME':([61,62,63,65,66,73,75,76,77,90,91,97,106,],[-56,-42,-43,-51,-51,86,-58,-60,-59,-51,-51,-46,-44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'compile':([0,],[1,]),'seen_program':([3,],[4,]),'lets':([5,38,48,],[6,45,51,]),'empty':([5,28,36,38,48,49,],[8,37,37,8,8,37,]),'modules':([6,10,],[9,13,]),'func':([6,10,],[10,10,]),'seen_lets':([7,],[12,]),'type':([12,27,28,36,49,],[15,32,35,35,35,]),'seen_func_name':([14,],[19,]),'seen_type':([16,17,18,],[21,22,23,]),'params':([19,],[24,]),'seen_ID_let':([20,39,43,],[26,46,49,]),'param_table_init':([25,],[28,]),'aux_let':([26,46,],[29,50,]),'return_func_type':([27,],[31,]),'param_declare':([28,36,49,],[34,44,52,]),'void_detect':([33,],[41,]),'func_code':([40,],[47,]),'func_code_aux':([51,54,],[53,68,]),'action':([51,54,],[54,54,]),'assign':([51,54,],[55,55,]),'expresion':([51,54,74,78,92,93,],[56,56,87,89,101,102,]),'call_let':([51,54,],[57,57,]),'term':([51,54,74,78,92,93,94,95,],[58,58,58,58,58,58,103,104,]),'fact':([51,54,74,78,92,93,94,95,96,],[60,60,60,60,60,60,60,60,105,]),'expo':([51,54,74,78,92,93,94,95,96,],[61,61,61,61,61,61,61,61,61,]),'parent_aux':([51,54,74,78,92,93,94,95,96,],[62,62,62,62,62,62,62,62,62,]),'call_lets':([51,54,74,78,92,93,94,95,96,],[63,63,63,63,63,63,63,63,63,]),'set_appear':([57,],[69,]),'term_appear':([58,],[70,]),'check_let_exists':([59,],[71,]),'factor_appear':([60,],[72,]),'expo_appear':([61,],[73,]),'found_init_parent':([64,],[74,]),'check_global_const_exists':([65,66,90,91,],[75,77,75,77,]),'add_operand':([65,66,90,91,],[76,76,76,76,]),'aux_expresion':([70,],[79,]),'aux_term':([72,],[82,]),'aux_expo':([73,],[85,]),'set_value':([78,],[88,]),'add_operator':([80,81,83,84,86,],[92,93,94,95,96,]),'seen_final_asignacion':([89,],[98,]),'aux_int_check':([90,],[99,]),'aux_float_check':([91,],[100,]),'found_end_parent':([97,],[106,]),'append_operand':([99,100,],[108,109,]),'generate_quad':([110,111,],[112,113,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> compile","S'",1,None,None,None),
  ('compile -> PROG ID seen_program DOTCOMMA lets modules','compile',6,'p_compile','reglas.py',12),
  ('compile -> <empty>','compile',0,'p_compile','reglas.py',13),
  ('modules -> func modules','modules',2,'p_modules','reglas.py',19),
  ('modules -> <empty>','modules',0,'p_modules','reglas.py',20),
  ('seen_program -> <empty>','seen_program',0,'p_seen_program','reglas.py',25),
  ('lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets','lets',8,'p_lets','reglas.py',32),
  ('lets -> empty','lets',1,'p_lets','reglas.py',33),
  ('seen_lets -> <empty>','seen_lets',0,'p_seen_lets','reglas.py',38),
  ('type -> INT seen_type','type',2,'p_type','reglas.py',46),
  ('type -> FLOAT seen_type','type',2,'p_type','reglas.py',47),
  ('type -> BOOL seen_type','type',2,'p_type','reglas.py',48),
  ('seen_type -> <empty>','seen_type',0,'p_seen_type','reglas.py',53),
  ('seen_ID_let -> <empty>','seen_ID_let',0,'p_seen_ID_let','reglas.py',58),
  ('aux_let -> COMMA ID seen_ID_let aux_let','aux_let',4,'p_aux_let','reglas.py',74),
  ('aux_let -> <empty>','aux_let',0,'p_aux_let','reglas.py',75),
  ('func -> FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code','func',8,'p_func','reglas.py',81),
  ('func -> <empty>','func',0,'p_func','reglas.py',82),
  ('seen_func_name -> <empty>','seen_func_name',0,'p_seen_func_name','reglas.py',88),
  ('params -> LEFTPARENT param_table_init param_declare RIGHTPARENT','params',4,'p_params','reglas.py',96),
  ('param_table_init -> <empty>','param_table_init',0,'p_param_table_init','reglas.py',102),
  ('param_declare -> type ID seen_ID_let param_declare','param_declare',4,'p_param_declare','reglas.py',111),
  ('param_declare -> COMMA param_declare','param_declare',2,'p_param_declare','reglas.py',112),
  ('param_declare -> empty','param_declare',1,'p_param_declare','reglas.py',113),
  ('return_func_type -> type','return_func_type',1,'p_return_func_type','reglas.py',119),
  ('return_func_type -> VOID void_detect','return_func_type',2,'p_return_func_type','reglas.py',120),
  ('void_detect -> <empty>','void_detect',0,'p_void_detect','reglas.py',129),
  ('func_code -> LEFTKEY lets func_code_aux RIGHTKEY','func_code',4,'p_func_code','reglas.py',137),
  ('func_code_aux -> action func_code_aux','func_code_aux',2,'p_func_code_aux','reglas.py',143),
  ('func_code_aux -> <empty>','func_code_aux',0,'p_func_code_aux','reglas.py',144),
  ('action -> assign','action',1,'p_action','reglas.py',150),
  ('action -> expresion','action',1,'p_action','reglas.py',151),
  ('expresion -> term term_appear','expresion',2,'p_expresion','reglas.py',157),
  ('expresion -> term term_appear aux_expresion','expresion',3,'p_expresion','reglas.py',158),
  ('aux_expresion -> ADD add_operator expresion','aux_expresion',3,'p_aux_expresion','reglas.py',164),
  ('aux_expresion -> LESS add_operator expresion','aux_expresion',3,'p_aux_expresion','reglas.py',165),
  ('term -> fact factor_appear','term',2,'p_term','reglas.py',171),
  ('term -> fact factor_appear aux_term','term',3,'p_term','reglas.py',172),
  ('aux_term -> SPLIT_BY add_operator term','aux_term',3,'p_aux_term','reglas.py',178),
  ('aux_term -> MULT_BY add_operator term','aux_term',3,'p_aux_term','reglas.py',179),
  ('fact -> expo expo_appear','fact',2,'p_fact','reglas.py',185),
  ('fact -> expo expo_appear aux_expo','fact',3,'p_fact','reglas.py',186),
  ('expo -> parent_aux','expo',1,'p_expo','reglas.py',191),
  ('expo -> call_lets','expo',1,'p_expo','reglas.py',192),
  ('parent_aux -> LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent','parent_aux',5,'p_parenth_aux','reglas.py',197),
  ('found_init_parent -> <empty>','found_init_parent',0,'p_found_init_parent','reglas.py',202),
  ('found_end_parent -> <empty>','found_end_parent',0,'p_found_end_parent','reglas.py',209),
  ('aux_expo -> TIMES_BY_SAME add_operator fact','aux_expo',3,'p_aux_expo','reglas.py',219),
  ('assign -> call_let set_appear SET set_value','assign',4,'p_assign','reglas.py',224),
  ('assign -> call_let set_appear SET expresion seen_final_asignacion DOTCOMMA','assign',6,'p_assign','reglas.py',225),
  ('seen_final_asignacion -> <empty>','seen_final_asignacion',0,'p_seen_final_asignacion','reglas.py',230),
  ('add_operand -> <empty>','add_operand',0,'p_add_operand','reglas.py',242),
  ('add_operator -> <empty>','add_operator',0,'p_add_operator','reglas.py',252),
  ('set_appear -> <empty>','set_appear',0,'p_set_appear','reglas.py',260),
  ('term_appear -> <empty>','term_appear',0,'p_term_appear','reglas.py',268),
  ('factor_appear -> <empty>','factor_appear',0,'p_factor_appear','reglas.py',285),
  ('expo_appear -> <empty>','expo_appear',0,'p_expo_appear','reglas.py',302),
  ('call_let -> ID check_let_exists','call_let',2,'p_call_let','reglas.py',319),
  ('call_lets -> INI_INT check_global_const_exists','call_lets',2,'p_call_lets','reglas.py',344),
  ('call_lets -> INI_FLOAT check_global_const_exists','call_lets',2,'p_call_lets','reglas.py',345),
  ('check_global_const_exists -> add_operand','check_global_const_exists',1,'p_check_global_const_exists','reglas.py',351),
  ('check_let_exists -> <empty>','check_let_exists',0,'p_check_let_exists','reglas.py',364),
  ('set_value -> INI_INT aux_int_check append_operand DOTCOMMA generate_quad','set_value',5,'p_set_value','reglas.py',379),
  ('set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad','set_value',5,'p_set_value','reglas.py',380),
  ('append_operand -> <empty>','append_operand',0,'p_append_operand','reglas.py',386),
  ('generate_quad -> <empty>','generate_quad',0,'p_generate_quad','reglas.py',393),
  ('aux_int_check -> <empty>','aux_int_check',0,'p_aux_int_check','reglas.py',411),
  ('aux_float_check -> <empty>','aux_float_check',0,'p_aux_float_check','reglas.py',422),
  ('empty -> <empty>','empty',0,'p_empty','reglas.py',433),
]
