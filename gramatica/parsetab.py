
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AT BOOL COMMA DO DOTCOMMA ELSE ENDFUNC FLOAT FUNC GOTO GOTOF GOTOT GREATERTN ID IF IGNOREGOTOFUNC INI_BOOL INI_FLOAT INI_INT INI_STRING INT LEFTBRACK LEFTKEY LEFTPARENT LESS LESSTN LET MAIN MULT_BY NOTSAME PRINTG PROG RETURN RIGHTBRACK RIGHTKEY RIGHTPARENT SAME SET SPLIT_BY TIMES_BY_SAME TWOPOINTS VOID WHILE\n      compile : PROG ID seen_program DOTCOMMA lets modules\n                |\n    \n        modules : func modules\n                |\n    seen_program :  lets : LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets\n                | empty\n    seen_lets : \n      type : INT seen_type\n           | FLOAT seen_type\n           | BOOL seen_type\n    seen_type :  seen_ID_let : \n      aux_let : COMMA ID seen_ID_let aux_let\n              |\n    \n        func : FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code\n    \n        seen_func_name :\n    \n        params : LEFTPARENT param_table_init param_declare RIGHTPARENT\n    \n      param_table_init :\n    \n        param_declare : type ID seen_ID_let param_declare\n                | COMMA param_declare\n                | empty\n    \n      return_func_type : type\n                        | VOID void_detect\n    \n        void_detect :\n    \n        func_code : LEFTKEY lets func_code_aux RIGHTKEY end_func\n    \n        end_func :\n    \n        func_code_aux : action func_code_aux\n                        |\n    \n        action : assign\n                | expresion_line\n                | condition\n                | while\n                | func_call DOTCOMMA\n                | write\n                | return\n    \n        return : RETURN expresion_line return_aux DOTCOMMA\n    \n        return_aux :\n    \n          write : PRINTG LEFTPARENT write_found RIGHTPARENT DOTCOMMA\n    \n       write_found : write_found_aux\n                    | write_found_aux COMMA write_found\n    \n        write_found_aux : expresion_line print_exp\n                        | INI_STRING string_appear print_exp\n    \n        print_exp :\n    \n        string_appear :\n    \n        func_call : AT ID func_call_ID LEFTPARENT func_calls_params end_func_call_params RIGHTPARENT end_func_call\n                    |\n    \n        end_func_call_params :\n    \n        func_call_ID :\n    \n        end_func_call :\n    \n        func_calls_params : expresion_line parameter_call COMMA add_parameter func_calls_params\n                            | expresion_line parameter_call\n    \n        parameter_call :\n    \n        add_parameter :\n    \n        while : WHILE while_appear LEFTPARENT condition_expresion right_parent_condition RIGHTPARENT condition_code end_cond\n    \n        while_appear :\n    \n        condition : IF LEFTPARENT found_init_parent condition_expresion right_parent_condition RIGHTPARENT  condition_code end_cond condition_end_check\n    \n        condtion_appear :\n    \n        condition_end_check : ELSE condition_code end_condition\n                              | end_condition\n    \n        condition_code : LEFTKEY lets func_code_aux RIGHTKEY\n    \n        end_condition :\n    \n        end_cond :\n    \n        condition_signs : GREATERTN add_operator\n                        | LESSTN add_operator\n                        | SAME add_operator\n                        | NOTSAME add_operator\n                        |\n    \n        condition_expresion : expresion_line condtion_appear\n                    | expresion_line condition_signs expresion_line condtion_appear\n\n    \n        expresion_line : term term_appear\n                    | term term_appear aux_expresion\n    \n        aux_expresion : ADD add_operator expresion_line\n                      | LESS add_operator expresion_line\n    \n       term : fact factor_appear\n              | fact factor_appear aux_term\n    \n        aux_term : SPLIT_BY add_operator term\n                  | MULT_BY add_operator term\n    \n        fact : expo expo_appear\n              | expo expo_appear aux_expo\n    \n        expo :  parent_aux\n               | call_lets\n               | call_let\n    \n        parent_aux : LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent\n    \n        right_parent_condition :\n    \n        found_init_parent :\n    \n        found_end_parent :\n    \n        aux_expo : TIMES_BY_SAME add_operator fact\n    \n        assign : call_let set_appear SET set_value\n                | call_let set_appear SET expresion_line seen_final_asignacion DOTCOMMA\n                | call_let set_appear SET func_call DOTCOMMA\n    \n       seen_final_asignacion :\n    \n        add_operand :\n    \n        add_operator :\n    \n         set_appear :\n    \n        term_appear :\n    \n        factor_appear :\n    \n        expo_appear :\n    \n        call_let : ID check_let_exists\n    \n       call_lets : INI_INT check_global_const_exists\n                    | INI_FLOAT check_global_const_exists\n    \n        check_global_const_exists : add_operand_const\n    \n        add_operand_const :\n    \n        check_let_exists :\n    \n        set_value : INI_INT aux_int_check append_operand DOTCOMMA\n                    | INI_FLOAT aux_float_check append_operand DOTCOMMA\n    \n        append_operand :\n    \n        aux_int_check :\n    \n        aux_float_check :\n    \n      empty :\n    '
    
_lr_action_items = {'PROG':([0,],[2,]),'$end':([0,1,5,6,8,9,10,13,38,45,47,77,95,],[-2,0,-110,-4,-7,-1,-4,-3,-110,-6,-16,-27,-26,]),'ID':([2,8,11,15,16,17,18,21,22,23,30,35,38,45,48,51,54,55,56,57,58,60,61,62,63,65,67,68,70,71,72,73,74,75,76,79,81,82,83,86,87,89,90,91,92,93,94,96,97,98,99,100,102,109,110,111,112,113,114,119,120,122,123,125,127,130,131,132,133,135,138,139,142,143,144,145,146,147,151,154,155,156,157,162,163,164,165,169,170,171,172,174,176,177,178,179,181,182,184,187,188,189,],[3,-7,14,20,-12,-12,-12,-9,-10,-11,39,43,-110,-6,-110,68,68,-30,-31,-32,-33,-35,-36,-83,-96,-86,85,-104,68,-97,-98,-81,-82,-103,-103,-34,-71,-86,68,-99,68,-83,-75,-79,-100,-102,-101,68,-72,-94,-94,68,68,-76,-94,-94,-80,-94,-89,68,68,-68,-87,68,68,-37,68,68,68,-91,-73,-74,68,-94,-94,-94,-94,-84,-39,-77,-78,-88,-90,-64,-65,-66,-67,-105,-106,-63,-110,-63,-54,-62,68,-55,68,-57,-60,-62,-61,-59,]),'DOTCOMMA':([3,4,8,20,26,29,38,39,45,46,48,50,51,54,55,56,57,58,59,60,61,62,63,68,71,72,73,74,75,76,79,81,86,88,89,90,91,92,93,94,96,97,108,109,112,114,115,116,117,118,123,126,130,134,135,136,137,138,139,147,151,154,155,156,157,158,159,169,170,171,172,174,175,177,178,179,180,182,184,187,188,189,],[-5,5,-7,-13,-15,38,-110,-13,-6,-15,-110,-14,-47,-47,-30,-31,-32,-33,79,-35,-36,-83,-96,-104,-97,-98,-81,-82,-103,-103,-34,-71,-99,-38,-83,-75,-79,-100,-102,-101,-47,-72,130,-76,-80,-89,-92,135,-103,-103,-87,151,-37,157,-91,-107,-107,-73,-74,-84,-39,-77,-78,-88,-90,169,170,-105,-106,-63,-110,-63,-50,-62,-47,-55,-46,-57,-60,-62,-61,-59,]),'LET':([5,38,48,172,],[7,7,7,7,]),'FUNC':([5,6,8,10,38,45,47,77,95,],[-110,11,-7,11,-110,-6,-16,-27,-26,]),'INT':([7,12,25,27,28,36,43,49,],[-8,16,-19,16,16,16,-13,16,]),'FLOAT':([7,12,25,27,28,36,43,49,],[-8,17,-19,17,17,17,-13,17,]),'BOOL':([7,12,25,27,28,36,43,49,],[-8,18,-19,18,18,18,-13,18,]),'IF':([8,38,45,48,51,54,55,56,57,58,60,61,62,63,68,71,72,73,74,75,76,79,81,86,89,90,91,92,93,94,97,109,112,114,123,130,135,138,139,147,151,154,155,156,157,169,170,171,172,174,177,178,179,182,184,187,188,189,],[-7,-110,-6,-110,64,64,-30,-31,-32,-33,-35,-36,-83,-96,-104,-97,-98,-81,-82,-103,-103,-34,-71,-99,-83,-75,-79,-100,-102,-101,-72,-76,-80,-89,-87,-37,-91,-73,-74,-84,-39,-77,-78,-88,-90,-105,-106,-63,-110,-63,-62,64,-55,-57,-60,-62,-61,-59,]),'WHILE':([8,38,45,48,51,54,55,56,57,58,60,61,62,63,68,71,72,73,74,75,76,79,81,86,89,90,91,92,93,94,97,109,112,114,123,130,135,138,139,147,151,154,155,156,157,169,170,171,172,174,177,178,179,182,184,187,188,189,],[-7,-110,-6,-110,66,66,-30,-31,-32,-33,-35,-36,-83,-96,-104,-97,-98,-81,-82,-103,-103,-34,-71,-99,-83,-75,-79,-100,-102,-101,-72,-76,-80,-89,-87,-37,-91,-73,-74,-84,-39,-77,-78,-88,-90,-105,-106,-63,-110,-63,-62,66,-55,-57,-60,-62,-61,-59,]),'AT':([8,38,45,48,51,54,55,56,57,58,60,61,62,63,68,71,72,73,74,75,76,79,81,86,89,90,91,92,93,94,96,97,109,112,114,123,130,135,138,139,147,151,154,155,156,157,169,170,171,172,174,177,178,179,182,184,187,188,189,],[-7,-110,-6,-110,67,67,-30,-31,-32,-33,-35,-36,-83,-96,-104,-97,-98,-81,-82,-103,-103,-34,-71,-99,-83,-75,-79,-100,-102,-101,67,-72,-76,-80,-89,-87,-37,-91,-73,-74,-84,-39,-77,-78,-88,-90,-105,-106,-63,-110,-63,-62,67,-55,-57,-60,-62,-61,-59,]),'PRINTG':([8,38,45,48,51,54,55,56,57,58,60,61,62,63,68,71,72,73,74,75,76,79,81,86,89,90,91,92,93,94,97,109,112,114,123,130,135,138,139,147,151,154,155,156,157,169,170,171,172,174,177,178,179,182,184,187,188,189,],[-7,-110,-6,-110,69,69,-30,-31,-32,-33,-35,-36,-83,-96,-104,-97,-98,-81,-82,-103,-103,-34,-71,-99,-83,-75,-79,-100,-102,-101,-72,-76,-80,-89,-87,-37,-91,-73,-74,-84,-39,-77,-78,-88,-90,-105,-106,-63,-110,-63,-62,69,-55,-57,-60,-62,-61,-59,]),'RETURN':([8,38,45,48,51,54,55,56,57,58,60,61,62,63,68,71,72,73,74,75,76,79,81,86,89,90,91,92,93,94,97,109,112,114,123,130,135,138,139,147,151,154,155,156,157,169,170,171,172,174,177,178,179,182,184,187,188,189,],[-7,-110,-6,-110,70,70,-30,-31,-32,-33,-35,-36,-83,-96,-104,-97,-98,-81,-82,-103,-103,-34,-71,-99,-83,-75,-79,-100,-102,-101,-72,-76,-80,-89,-87,-37,-91,-73,-74,-84,-39,-77,-78,-88,-90,-105,-106,-63,-110,-63,-62,70,-55,-57,-60,-62,-61,-59,]),'LEFTPARENT':([8,14,19,38,45,48,51,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,74,75,76,79,81,82,83,84,85,86,87,89,90,91,92,93,94,96,97,98,99,100,102,103,109,110,111,112,113,114,119,120,122,123,125,127,130,131,132,133,135,138,139,142,143,144,145,146,147,151,154,155,156,157,162,163,164,165,169,170,171,172,174,176,177,178,179,181,182,184,187,188,189,],[-7,-17,25,-110,-6,-110,65,65,-30,-31,-32,-33,-35,-36,-83,-96,82,-86,-56,-104,87,65,-97,-98,-81,-82,-103,-103,-34,-71,-86,65,102,-49,-99,65,-83,-75,-79,-100,-102,-101,65,-72,-94,-94,65,65,125,-76,-94,-94,-80,-94,-89,65,65,-68,-87,65,65,-37,65,65,65,-91,-73,-74,65,-94,-94,-94,-94,-84,-39,-77,-78,-88,-90,-64,-65,-66,-67,-105,-106,-63,-110,-63,-54,-62,65,-55,65,-57,-60,-62,-61,-59,]),'INI_INT':([8,38,45,48,51,54,55,56,57,58,60,61,62,63,65,68,70,71,72,73,74,75,76,79,81,82,83,86,87,89,90,91,92,93,94,96,97,98,99,100,102,109,110,111,112,113,114,119,120,122,123,125,127,130,131,132,133,135,138,139,142,143,144,145,146,147,151,154,155,156,157,162,163,164,165,169,170,171,172,174,176,177,178,179,181,182,184,187,188,189,],[-7,-110,-6,-110,75,75,-30,-31,-32,-33,-35,-36,-83,-96,-86,-104,75,-97,-98,-81,-82,-103,-103,-34,-71,-86,75,-99,75,-83,-75,-79,-100,-102,-101,117,-72,-94,-94,75,75,-76,-94,-94,-80,-94,-89,75,75,-68,-87,75,75,-37,75,75,75,-91,-73,-74,75,-94,-94,-94,-94,-84,-39,-77,-78,-88,-90,-64,-65,-66,-67,-105,-106,-63,-110,-63,-54,-62,75,-55,75,-57,-60,-62,-61,-59,]),'INI_FLOAT':([8,38,45,48,51,54,55,56,57,58,60,61,62,63,65,68,70,71,72,73,74,75,76,79,81,82,83,86,87,89,90,91,92,93,94,96,97,98,99,100,102,109,110,111,112,113,114,119,120,122,123,125,127,130,131,132,133,135,138,139,142,143,144,145,146,147,151,154,155,156,157,162,163,164,165,169,170,171,172,174,176,177,178,179,181,182,184,187,188,189,],[-7,-110,-6,-110,76,76,-30,-31,-32,-33,-35,-36,-83,-96,-86,-104,76,-97,-98,-81,-82,-103,-103,-34,-71,-86,76,-99,76,-83,-75,-79,-100,-102,-101,118,-72,-94,-94,76,76,-76,-94,-94,-80,-94,-89,76,76,-68,-87,76,76,-37,76,76,76,-91,-73,-74,76,-94,-94,-94,-94,-84,-39,-77,-78,-88,-90,-64,-65,-66,-67,-105,-106,-63,-110,-63,-54,-62,76,-55,76,-57,-60,-62,-61,-59,]),'RIGHTKEY':([8,38,45,48,51,53,54,55,56,57,58,60,61,62,63,68,71,72,73,74,75,76,78,79,81,86,89,90,91,92,93,94,97,109,112,114,123,130,135,138,139,147,151,154,155,156,157,169,170,171,172,174,177,178,179,182,184,185,187,188,189,],[-7,-110,-6,-110,-29,77,-29,-30,-31,-32,-33,-35,-36,-83,-96,-104,-97,-98,-81,-82,-103,-103,-28,-34,-71,-99,-83,-75,-79,-100,-102,-101,-72,-76,-80,-89,-87,-37,-91,-73,-74,-84,-39,-77,-78,-88,-90,-105,-106,-63,-110,-63,-62,-29,-55,-57,-60,188,-62,-61,-59,]),'TWOPOINTS':([16,17,18,21,22,23,24,31,32,33,41,42,],[-12,-12,-12,-9,-10,-11,27,40,-23,-25,-24,-18,]),'COMMA':([20,25,26,28,36,39,43,46,49,63,68,71,72,73,74,75,76,81,86,89,90,91,92,93,94,97,105,106,107,109,112,123,128,129,138,139,147,150,153,154,155,156,168,],[-13,-19,30,36,36,-13,-13,30,36,-96,-104,-97,-98,-81,-82,-103,-103,-71,-99,-83,-75,-79,-100,-102,-101,-72,127,-44,-45,-76,-80,-87,-42,-44,-73,-74,-84,-53,-43,-77,-78,-88,176,]),'RIGHTPARENT':([25,28,34,36,37,43,44,49,52,63,68,71,72,73,74,75,76,81,86,89,90,91,92,93,94,97,101,104,105,106,107,109,112,121,122,123,124,128,129,138,139,140,141,147,148,149,150,152,153,154,155,156,161,167,168,173,186,],[-19,-110,42,-110,-22,-13,-21,-110,-20,-96,-104,-97,-98,-81,-82,-103,-103,-71,-99,-83,-75,-79,-100,-102,-101,-72,123,126,-40,-44,-45,-76,-80,-85,-58,-87,-85,-42,-44,-73,-74,160,-69,-84,166,-48,-53,-41,-43,-77,-78,-88,-58,175,-52,-70,-51,]),'VOID':([27,],[33,]),'LEFTKEY':([40,160,166,183,],[48,172,172,172,]),'TIMES_BY_SAME':([62,68,72,73,74,75,76,86,89,91,92,93,94,117,118,123,147,],[-83,-104,-98,-81,-82,-103,-103,-99,-83,113,-100,-102,-101,-103,-103,-87,-84,]),'SPLIT_BY':([62,68,71,72,73,74,75,76,86,89,90,91,92,93,94,112,117,118,123,147,156,],[-83,-104,-97,-98,-81,-82,-103,-103,-99,-83,110,-79,-100,-102,-101,-80,-103,-103,-87,-84,-88,]),'MULT_BY':([62,68,71,72,73,74,75,76,86,89,90,91,92,93,94,112,117,118,123,147,156,],[-83,-104,-97,-98,-81,-82,-103,-103,-99,-83,111,-79,-100,-102,-101,-80,-103,-103,-87,-84,-88,]),'ADD':([62,63,68,71,72,73,74,75,76,81,86,89,90,91,92,93,94,109,112,117,118,123,147,154,155,156,],[-83,-96,-104,-97,-98,-81,-82,-103,-103,98,-99,-83,-75,-79,-100,-102,-101,-76,-80,-103,-103,-87,-84,-77,-78,-88,]),'LESS':([62,63,68,71,72,73,74,75,76,81,86,89,90,91,92,93,94,109,112,117,118,123,147,154,155,156,],[-83,-96,-104,-97,-98,-81,-82,-103,-103,99,-99,-83,-75,-79,-100,-102,-101,-76,-80,-103,-103,-87,-84,-77,-78,-88,]),'SET':([62,68,80,86,],[-95,-104,96,-99,]),'GREATERTN':([63,68,71,72,73,74,75,76,81,86,89,90,91,92,93,94,97,109,112,122,123,138,139,147,154,155,156,],[-96,-104,-97,-98,-81,-82,-103,-103,-71,-99,-83,-75,-79,-100,-102,-101,-72,-76,-80,143,-87,-73,-74,-84,-77,-78,-88,]),'LESSTN':([63,68,71,72,73,74,75,76,81,86,89,90,91,92,93,94,97,109,112,122,123,138,139,147,154,155,156,],[-96,-104,-97,-98,-81,-82,-103,-103,-71,-99,-83,-75,-79,-100,-102,-101,-72,-76,-80,144,-87,-73,-74,-84,-77,-78,-88,]),'SAME':([63,68,71,72,73,74,75,76,81,86,89,90,91,92,93,94,97,109,112,122,123,138,139,147,154,155,156,],[-96,-104,-97,-98,-81,-82,-103,-103,-71,-99,-83,-75,-79,-100,-102,-101,-72,-76,-80,145,-87,-73,-74,-84,-77,-78,-88,]),'NOTSAME':([63,68,71,72,73,74,75,76,81,86,89,90,91,92,93,94,97,109,112,122,123,138,139,147,154,155,156,],[-96,-104,-97,-98,-81,-82,-103,-103,-71,-99,-83,-75,-79,-100,-102,-101,-72,-76,-80,146,-87,-73,-74,-84,-77,-78,-88,]),'INI_STRING':([87,127,],[107,107,]),'ELSE':([171,177,188,],[-63,183,-61,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'compile':([0,],[1,]),'seen_program':([3,],[4,]),'lets':([5,38,48,172,],[6,45,51,178,]),'empty':([5,28,36,38,48,49,172,],[8,37,37,8,8,37,8,]),'modules':([6,10,],[9,13,]),'func':([6,10,],[10,10,]),'seen_lets':([7,],[12,]),'type':([12,27,28,36,49,],[15,32,35,35,35,]),'seen_func_name':([14,],[19,]),'seen_type':([16,17,18,],[21,22,23,]),'params':([19,],[24,]),'seen_ID_let':([20,39,43,],[26,46,49,]),'param_table_init':([25,],[28,]),'aux_let':([26,46,],[29,50,]),'return_func_type':([27,],[31,]),'param_declare':([28,36,49,],[34,44,52,]),'void_detect':([33,],[41,]),'func_code':([40,],[47,]),'func_code_aux':([51,54,178,],[53,78,185,]),'action':([51,54,178,],[54,54,54,]),'assign':([51,54,178,],[55,55,55,]),'expresion_line':([51,54,70,83,87,96,100,102,119,120,125,127,142,178,181,],[56,56,88,101,106,115,122,122,138,139,150,106,161,56,150,]),'condition':([51,54,178,],[57,57,57,]),'while':([51,54,178,],[58,58,58,]),'func_call':([51,54,96,178,],[59,59,116,59,]),'write':([51,54,178,],[60,60,60,]),'return':([51,54,178,],[61,61,61,]),'call_let':([51,54,70,83,87,96,100,102,119,120,125,127,131,132,133,142,178,181,],[62,62,89,89,89,89,89,89,89,89,89,89,89,89,89,89,62,89,]),'term':([51,54,70,83,87,96,100,102,119,120,125,127,131,132,142,178,181,],[63,63,63,63,63,63,63,63,63,63,63,63,154,155,63,63,63,]),'fact':([51,54,70,83,87,96,100,102,119,120,125,127,131,132,133,142,178,181,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,156,71,71,71,]),'expo':([51,54,70,83,87,96,100,102,119,120,125,127,131,132,133,142,178,181,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'parent_aux':([51,54,70,83,87,96,100,102,119,120,125,127,131,132,133,142,178,181,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'call_lets':([51,54,70,83,87,96,100,102,119,120,125,127,131,132,133,142,178,181,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'set_appear':([62,],[80,]),'term_appear':([63,],[81,]),'found_init_parent':([65,82,],[83,100,]),'while_appear':([66,],[84,]),'check_let_exists':([68,],[86,]),'factor_appear':([71,],[90,]),'expo_appear':([72,],[91,]),'check_global_const_exists':([75,76,117,118,],[92,94,92,94,]),'add_operand_const':([75,76,117,118,],[93,93,93,93,]),'end_func':([77,],[95,]),'aux_expresion':([81,],[97,]),'func_call_ID':([85,],[103,]),'write_found':([87,127,],[104,152,]),'write_found_aux':([87,127,],[105,105,]),'return_aux':([88,],[108,]),'aux_term':([90,],[109,]),'aux_expo':([91,],[112,]),'set_value':([96,],[114,]),'add_operator':([98,99,110,111,113,143,144,145,146,],[119,120,131,132,133,162,163,164,165,]),'condition_expresion':([100,102,],[121,124,]),'print_exp':([106,129,],[128,153,]),'string_appear':([107,],[129,]),'seen_final_asignacion':([115,],[134,]),'aux_int_check':([117,],[136,]),'aux_float_check':([118,],[137,]),'right_parent_condition':([121,124,],[140,148,]),'condtion_appear':([122,161,],[141,173,]),'condition_signs':([122,],[142,]),'found_end_parent':([123,],[147,]),'func_calls_params':([125,181,],[149,186,]),'append_operand':([136,137,],[158,159,]),'end_func_call_params':([149,],[167,]),'parameter_call':([150,],[168,]),'condition_code':([160,166,183,],[171,174,187,]),'end_cond':([171,174,],[177,179,]),'end_func_call':([175,],[180,]),'add_parameter':([176,],[181,]),'condition_end_check':([177,],[182,]),'end_condition':([177,187,],[184,189,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> compile","S'",1,None,None,None),
  ('compile -> PROG ID seen_program DOTCOMMA lets modules','compile',6,'p_compile','reglas.py',16),
  ('compile -> <empty>','compile',0,'p_compile','reglas.py',17),
  ('modules -> func modules','modules',2,'p_modules','reglas.py',23),
  ('modules -> <empty>','modules',0,'p_modules','reglas.py',24),
  ('seen_program -> <empty>','seen_program',0,'p_seen_program','reglas.py',29),
  ('lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets','lets',8,'p_lets','reglas.py',37),
  ('lets -> empty','lets',1,'p_lets','reglas.py',38),
  ('seen_lets -> <empty>','seen_lets',0,'p_seen_lets','reglas.py',43),
  ('type -> INT seen_type','type',2,'p_type','reglas.py',51),
  ('type -> FLOAT seen_type','type',2,'p_type','reglas.py',52),
  ('type -> BOOL seen_type','type',2,'p_type','reglas.py',53),
  ('seen_type -> <empty>','seen_type',0,'p_seen_type','reglas.py',58),
  ('seen_ID_let -> <empty>','seen_ID_let',0,'p_seen_ID_let','reglas.py',63),
  ('aux_let -> COMMA ID seen_ID_let aux_let','aux_let',4,'p_aux_let','reglas.py',84),
  ('aux_let -> <empty>','aux_let',0,'p_aux_let','reglas.py',85),
  ('func -> FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code','func',8,'p_func','reglas.py',91),
  ('seen_func_name -> <empty>','seen_func_name',0,'p_seen_func_name','reglas.py',97),
  ('params -> LEFTPARENT param_table_init param_declare RIGHTPARENT','params',4,'p_params','reglas.py',112),
  ('param_table_init -> <empty>','param_table_init',0,'p_param_table_init','reglas.py',118),
  ('param_declare -> type ID seen_ID_let param_declare','param_declare',4,'p_param_declare','reglas.py',127),
  ('param_declare -> COMMA param_declare','param_declare',2,'p_param_declare','reglas.py',128),
  ('param_declare -> empty','param_declare',1,'p_param_declare','reglas.py',129),
  ('return_func_type -> type','return_func_type',1,'p_return_func_type','reglas.py',135),
  ('return_func_type -> VOID void_detect','return_func_type',2,'p_return_func_type','reglas.py',136),
  ('void_detect -> <empty>','void_detect',0,'p_void_detect','reglas.py',145),
  ('func_code -> LEFTKEY lets func_code_aux RIGHTKEY end_func','func_code',5,'p_func_code','reglas.py',153),
  ('end_func -> <empty>','end_func',0,'p_end_func','reglas.py',158),
  ('func_code_aux -> action func_code_aux','func_code_aux',2,'p_func_code_aux','reglas.py',165),
  ('func_code_aux -> <empty>','func_code_aux',0,'p_func_code_aux','reglas.py',166),
  ('action -> assign','action',1,'p_action','reglas.py',172),
  ('action -> expresion_line','action',1,'p_action','reglas.py',173),
  ('action -> condition','action',1,'p_action','reglas.py',174),
  ('action -> while','action',1,'p_action','reglas.py',175),
  ('action -> func_call DOTCOMMA','action',2,'p_action','reglas.py',176),
  ('action -> write','action',1,'p_action','reglas.py',177),
  ('action -> return','action',1,'p_action','reglas.py',178),
  ('return -> RETURN expresion_line return_aux DOTCOMMA','return',4,'p_return','reglas.py',183),
  ('return_aux -> <empty>','return_aux',0,'p_return_aux','reglas.py',188),
  ('write -> PRINTG LEFTPARENT write_found RIGHTPARENT DOTCOMMA','write',5,'p_write','reglas.py',196),
  ('write_found -> write_found_aux','write_found',1,'p_write_found','reglas.py',201),
  ('write_found -> write_found_aux COMMA write_found','write_found',3,'p_write_found','reglas.py',202),
  ('write_found_aux -> expresion_line print_exp','write_found_aux',2,'p_write_found_aux','reglas.py',207),
  ('write_found_aux -> INI_STRING string_appear print_exp','write_found_aux',3,'p_write_found_aux','reglas.py',208),
  ('print_exp -> <empty>','print_exp',0,'p_print_exp','reglas.py',213),
  ('string_appear -> <empty>','string_appear',0,'p_string_appear','reglas.py',220),
  ('func_call -> AT ID func_call_ID LEFTPARENT func_calls_params end_func_call_params RIGHTPARENT end_func_call','func_call',8,'p_func_call','reglas.py',227),
  ('func_call -> <empty>','func_call',0,'p_func_call','reglas.py',228),
  ('end_func_call_params -> <empty>','end_func_call_params',0,'p_end_func_call_params','reglas.py',233),
  ('func_call_ID -> <empty>','func_call_ID',0,'p_func_call_ID','reglas.py',241),
  ('end_func_call -> <empty>','end_func_call',0,'p_end_func_call','reglas.py',248),
  ('func_calls_params -> expresion_line parameter_call COMMA add_parameter func_calls_params','func_calls_params',5,'p_func_calls_params','reglas.py',255),
  ('func_calls_params -> expresion_line parameter_call','func_calls_params',2,'p_func_calls_params','reglas.py',256),
  ('parameter_call -> <empty>','parameter_call',0,'p_parameter_call','reglas.py',261),
  ('add_parameter -> <empty>','add_parameter',0,'p_add_parameter','reglas.py',268),
  ('while -> WHILE while_appear LEFTPARENT condition_expresion right_parent_condition RIGHTPARENT condition_code end_cond','while',8,'p_while','reglas.py',276),
  ('while_appear -> <empty>','while_appear',0,'p_while_appear','reglas.py',281),
  ('condition -> IF LEFTPARENT found_init_parent condition_expresion right_parent_condition RIGHTPARENT condition_code end_cond condition_end_check','condition',9,'p_condition','reglas.py',289),
  ('condtion_appear -> <empty>','condtion_appear',0,'p_condtion_appear','reglas.py',295),
  ('condition_end_check -> ELSE condition_code end_condition','condition_end_check',3,'p_condition_end_check','reglas.py',303),
  ('condition_end_check -> end_condition','condition_end_check',1,'p_condition_end_check','reglas.py',304),
  ('condition_code -> LEFTKEY lets func_code_aux RIGHTKEY','condition_code',4,'p_condition_code','reglas.py',309),
  ('end_condition -> <empty>','end_condition',0,'p_end_condition','reglas.py',314),
  ('end_cond -> <empty>','end_cond',0,'p_end_cond','reglas.py',321),
  ('condition_signs -> GREATERTN add_operator','condition_signs',2,'p_condition_signs','reglas.py',330),
  ('condition_signs -> LESSTN add_operator','condition_signs',2,'p_condition_signs','reglas.py',331),
  ('condition_signs -> SAME add_operator','condition_signs',2,'p_condition_signs','reglas.py',332),
  ('condition_signs -> NOTSAME add_operator','condition_signs',2,'p_condition_signs','reglas.py',333),
  ('condition_signs -> <empty>','condition_signs',0,'p_condition_signs','reglas.py',334),
  ('condition_expresion -> expresion_line condtion_appear','condition_expresion',2,'p_condition_expresion','reglas.py',339),
  ('condition_expresion -> expresion_line condition_signs expresion_line condtion_appear','condition_expresion',4,'p_condition_expresion','reglas.py',340),
  ('expresion_line -> term term_appear','expresion_line',2,'p_expresion_line','reglas.py',347),
  ('expresion_line -> term term_appear aux_expresion','expresion_line',3,'p_expresion_line','reglas.py',348),
  ('aux_expresion -> ADD add_operator expresion_line','aux_expresion',3,'p_aux_expresion','reglas.py',354),
  ('aux_expresion -> LESS add_operator expresion_line','aux_expresion',3,'p_aux_expresion','reglas.py',355),
  ('term -> fact factor_appear','term',2,'p_term','reglas.py',361),
  ('term -> fact factor_appear aux_term','term',3,'p_term','reglas.py',362),
  ('aux_term -> SPLIT_BY add_operator term','aux_term',3,'p_aux_term','reglas.py',368),
  ('aux_term -> MULT_BY add_operator term','aux_term',3,'p_aux_term','reglas.py',369),
  ('fact -> expo expo_appear','fact',2,'p_fact','reglas.py',375),
  ('fact -> expo expo_appear aux_expo','fact',3,'p_fact','reglas.py',376),
  ('expo -> parent_aux','expo',1,'p_expo','reglas.py',382),
  ('expo -> call_lets','expo',1,'p_expo','reglas.py',383),
  ('expo -> call_let','expo',1,'p_expo','reglas.py',384),
  ('parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent','parent_aux',5,'p_parenth_aux','reglas.py',390),
  ('right_parent_condition -> <empty>','right_parent_condition',0,'p_right_parent_condition','reglas.py',396),
  ('found_init_parent -> <empty>','found_init_parent',0,'p_found_init_parent','reglas.py',403),
  ('found_end_parent -> <empty>','found_end_parent',0,'p_found_end_parent','reglas.py',411),
  ('aux_expo -> TIMES_BY_SAME add_operator fact','aux_expo',3,'p_aux_expo','reglas.py',423),
  ('assign -> call_let set_appear SET set_value','assign',4,'p_assign','reglas.py',429),
  ('assign -> call_let set_appear SET expresion_line seen_final_asignacion DOTCOMMA','assign',6,'p_assign','reglas.py',430),
  ('assign -> call_let set_appear SET func_call DOTCOMMA','assign',5,'p_assign','reglas.py',431),
  ('seen_final_asignacion -> <empty>','seen_final_asignacion',0,'p_seen_final_asignacion','reglas.py',437),
  ('add_operand -> <empty>','add_operand',0,'p_add_operand','reglas.py',444),
  ('add_operator -> <empty>','add_operator',0,'p_add_operator','reglas.py',455),
  ('set_appear -> <empty>','set_appear',0,'p_set_appear','reglas.py',463),
  ('term_appear -> <empty>','term_appear',0,'p_term_appear','reglas.py',471),
  ('factor_appear -> <empty>','factor_appear',0,'p_factor_appear','reglas.py',483),
  ('expo_appear -> <empty>','expo_appear',0,'p_expo_appear','reglas.py',495),
  ('call_let -> ID check_let_exists','call_let',2,'p_call_let','reglas.py',506),
  ('call_lets -> INI_INT check_global_const_exists','call_lets',2,'p_call_lets','reglas.py',535),
  ('call_lets -> INI_FLOAT check_global_const_exists','call_lets',2,'p_call_lets','reglas.py',536),
  ('check_global_const_exists -> add_operand_const','check_global_const_exists',1,'p_check_global_const_exists','reglas.py',542),
  ('add_operand_const -> <empty>','add_operand_const',0,'p_add_operan_const','reglas.py',554),
  ('check_let_exists -> <empty>','check_let_exists',0,'p_check_let_exists','reglas.py',562),
  ('set_value -> INI_INT aux_int_check append_operand DOTCOMMA','set_value',4,'p_set_value','reglas.py',577),
  ('set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA','set_value',4,'p_set_value','reglas.py',578),
  ('append_operand -> <empty>','append_operand',0,'p_append_operand','reglas.py',585),
  ('aux_int_check -> <empty>','aux_int_check',0,'p_aux_int_check','reglas.py',592),
  ('aux_float_check -> <empty>','aux_float_check',0,'p_aux_float_check','reglas.py',604),
  ('empty -> <empty>','empty',0,'p_empty','reglas.py',617),
]
