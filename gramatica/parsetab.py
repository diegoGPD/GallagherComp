
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD BOOL COMMA DO DOTCOMMA ELSE FLOAT FUNC GREATERTN ID IF IGNORE INI_BOOL INI_FLOAT INI_INT INI_STRING INT LEFTBRACK LEFTKEY LEFTPARENT LESS LESSTN LET MAIN MULT_BY NOTSAME PRINTV PROG RIGHTBRACK RIGHTKEY RIGHTPARENT SAME SET SPLIT_BY TWOPOINTS VOID WHILE\n      compile : PROG ID seen_program DOTCOMMA lets modules\n                |\n    \n        modules : func modules\n                |\n    seen_program :  lets : LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets\n                | empty\n    seen_lets : \n      type : INT seen_type\n           | FLOAT seen_type\n           | BOOL seen_type\n    seen_type :  seen_ID_let : \n      aux_let : COMMA ID seen_ID_let aux_let\n              |\n    \n        func : FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code\n              |\n    \n        seen_func_name :\n    \n        params : LEFTPARENT param_table_init param_declare RIGHTPARENT\n    \n      param_table_init :\n    \n        param_declare : type ID seen_ID_let param_declare\n                | COMMA param_declare\n                | empty\n    \n      return_func_type : type\n                        | VOID void_detect\n    \n        void_detect :\n    \n        func_code : LEFTKEY func_code_aux RIGHTKEY\n    \n        func_code_aux : action func_code_aux\n                        |\n    \n        action : assign\n                | expresion\n    \n        expresion : term term_appear\n                    | term term_appear aux_expresion\n    \n        aux_expresion : ADD add_operator expresion\n                      | LESS add_operator expresion\n    \n       term : fact factor_appear\n              | fact factor_appear aux_term\n    \n        aux_term : SPLIT_BY add_operator term\n                  | MULT_BY add_operator term\n    \n        fact : call_lets\n    \n        assign : call_let add_let_target set_appear SET set_value\n    \n        add_operand :\n    \n        add_let_target :\n    \n        add_operator :\n    \n         set_appear :\n    \n        term_appear :\n    \n        factor_appear :\n    \n        call_let : ID check_let_exists\n    \n       call_lets : INI_INT check_global_const_exists\n                    | INI_FLOAT check_global_const_exists\n    \n        check_global_const_exists : add_operand\n    \n        check_let_exists :\n    \n        set_value : INI_INT aux_int_check append_operand DOTCOMMA generate_quad\n                    | INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad\n    \n        append_operand :\n    \n        generate_quad :\n    \n        aux_int_check :\n    \n        aux_float_check :\n    \n      empty :\n    '
    
_lr_action_items = {'PROG':([0,],[2,]),'$end':([0,1,5,6,8,9,10,13,38,45,47,63,],[-2,0,-59,-4,-7,-1,-4,-3,-59,-6,-16,-27,]),'ID':([2,11,15,16,17,18,21,22,23,30,35,48,52,53,54,56,58,59,60,61,66,68,69,70,71,73,76,84,87,88,89,90,95,96,97,98,],[3,14,20,-12,-12,-12,-9,-10,-11,39,43,57,57,-30,-31,-46,-47,-40,-42,-42,-32,-36,-49,-51,-50,-33,-37,-41,-34,-35,-38,-39,-56,-56,-53,-54,]),'DOTCOMMA':([3,4,20,26,29,39,46,50,85,86,91,92,93,94,],[-5,5,-13,-15,38,-13,-15,-14,-57,-58,-55,-55,95,96,]),'LET':([5,38,],[7,7,]),'FUNC':([5,6,8,10,38,45,47,63,],[-59,11,-7,11,-59,-6,-16,-27,]),'INT':([7,12,25,27,28,36,43,49,],[-8,16,-20,16,16,16,-13,16,]),'FLOAT':([7,12,25,27,28,36,43,49,],[-8,17,-20,17,17,17,-13,17,]),'BOOL':([7,12,25,27,28,36,43,49,],[-8,18,-20,18,18,18,-13,18,]),'LEFTPARENT':([14,19,],[-18,25,]),'TWOPOINTS':([16,17,18,21,22,23,24,31,32,33,41,42,],[-12,-12,-12,-9,-10,-11,27,40,-24,-26,-25,-19,]),'COMMA':([20,25,26,28,36,39,43,46,49,],[-13,-20,30,36,36,-13,-13,30,36,]),'RIGHTPARENT':([25,28,34,36,37,43,44,49,62,],[-20,-59,42,-59,-23,-13,-22,-59,-21,]),'VOID':([27,],[33,]),'LEFTKEY':([40,],[48,]),'RIGHTKEY':([48,51,52,53,54,56,58,59,60,61,64,66,68,69,70,71,73,76,84,87,88,89,90,95,96,97,98,],[-29,63,-29,-30,-31,-46,-47,-40,-42,-42,-28,-32,-36,-49,-51,-50,-33,-37,-41,-34,-35,-38,-39,-56,-56,-53,-54,]),'INI_INT':([48,52,53,54,56,58,59,60,61,66,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,87,88,89,90,95,96,97,98,],[60,60,-30,-31,-46,-47,-40,-42,-42,-32,-36,-49,-51,-50,-33,-44,-44,-37,-44,-44,85,60,60,60,60,-41,-34,-35,-38,-39,-56,-56,-53,-54,]),'INI_FLOAT':([48,52,53,54,56,58,59,60,61,66,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,87,88,89,90,95,96,97,98,],[61,61,-30,-31,-46,-47,-40,-42,-42,-32,-36,-49,-51,-50,-33,-44,-44,-37,-44,-44,86,61,61,61,61,-41,-34,-35,-38,-39,-56,-56,-53,-54,]),'SET':([55,57,65,67,72,],[-43,-52,-45,-48,79,]),'ADD':([56,58,59,60,61,66,68,69,70,71,76,89,90,],[-46,-47,-40,-42,-42,74,-36,-49,-51,-50,-37,-38,-39,]),'LESS':([56,58,59,60,61,66,68,69,70,71,76,89,90,],[-46,-47,-40,-42,-42,75,-36,-49,-51,-50,-37,-38,-39,]),'SPLIT_BY':([58,59,60,61,68,69,70,71,],[-47,-40,-42,-42,77,-49,-51,-50,]),'MULT_BY':([58,59,60,61,68,69,70,71,],[-47,-40,-42,-42,78,-49,-51,-50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'compile':([0,],[1,]),'seen_program':([3,],[4,]),'lets':([5,38,],[6,45,]),'empty':([5,28,36,38,49,],[8,37,37,8,37,]),'modules':([6,10,],[9,13,]),'func':([6,10,],[10,10,]),'seen_lets':([7,],[12,]),'type':([12,27,28,36,49,],[15,32,35,35,35,]),'seen_func_name':([14,],[19,]),'seen_type':([16,17,18,],[21,22,23,]),'params':([19,],[24,]),'seen_ID_let':([20,39,43,],[26,46,49,]),'param_table_init':([25,],[28,]),'aux_let':([26,46,],[29,50,]),'return_func_type':([27,],[31,]),'param_declare':([28,36,49,],[34,44,62,]),'void_detect':([33,],[41,]),'func_code':([40,],[47,]),'func_code_aux':([48,52,],[51,64,]),'action':([48,52,],[52,52,]),'assign':([48,52,],[53,53,]),'expresion':([48,52,80,81,],[54,54,87,88,]),'call_let':([48,52,],[55,55,]),'term':([48,52,80,81,82,83,],[56,56,56,56,89,90,]),'fact':([48,52,80,81,82,83,],[58,58,58,58,58,58,]),'call_lets':([48,52,80,81,82,83,],[59,59,59,59,59,59,]),'add_let_target':([55,],[65,]),'term_appear':([56,],[66,]),'check_let_exists':([57,],[67,]),'factor_appear':([58,],[68,]),'check_global_const_exists':([60,61,],[69,71,]),'add_operand':([60,61,],[70,70,]),'set_appear':([65,],[72,]),'aux_expresion':([66,],[73,]),'aux_term':([68,],[76,]),'add_operator':([74,75,77,78,],[80,81,82,83,]),'set_value':([79,],[84,]),'aux_int_check':([85,],[91,]),'aux_float_check':([86,],[92,]),'append_operand':([91,92,],[93,94,]),'generate_quad':([95,96,],[97,98,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> compile","S'",1,None,None,None),
  ('compile -> PROG ID seen_program DOTCOMMA lets modules','compile',6,'p_compile','reglas.py',12),
  ('compile -> <empty>','compile',0,'p_compile','reglas.py',13),
  ('modules -> func modules','modules',2,'p_modules','reglas.py',19),
  ('modules -> <empty>','modules',0,'p_modules','reglas.py',20),
  ('seen_program -> <empty>','seen_program',0,'p_seen_program','reglas.py',25),
  ('lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets','lets',8,'p_lets','reglas.py',32),
  ('lets -> empty','lets',1,'p_lets','reglas.py',33),
  ('seen_lets -> <empty>','seen_lets',0,'p_seen_lets','reglas.py',38),
  ('type -> INT seen_type','type',2,'p_type','reglas.py',46),
  ('type -> FLOAT seen_type','type',2,'p_type','reglas.py',47),
  ('type -> BOOL seen_type','type',2,'p_type','reglas.py',48),
  ('seen_type -> <empty>','seen_type',0,'p_seen_type','reglas.py',53),
  ('seen_ID_let -> <empty>','seen_ID_let',0,'p_seen_ID_let','reglas.py',58),
  ('aux_let -> COMMA ID seen_ID_let aux_let','aux_let',4,'p_aux_let','reglas.py',74),
  ('aux_let -> <empty>','aux_let',0,'p_aux_let','reglas.py',75),
  ('func -> FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code','func',8,'p_func','reglas.py',81),
  ('func -> <empty>','func',0,'p_func','reglas.py',82),
  ('seen_func_name -> <empty>','seen_func_name',0,'p_seen_func_name','reglas.py',88),
  ('params -> LEFTPARENT param_table_init param_declare RIGHTPARENT','params',4,'p_params','reglas.py',96),
  ('param_table_init -> <empty>','param_table_init',0,'p_param_table_init','reglas.py',102),
  ('param_declare -> type ID seen_ID_let param_declare','param_declare',4,'p_param_declare','reglas.py',111),
  ('param_declare -> COMMA param_declare','param_declare',2,'p_param_declare','reglas.py',112),
  ('param_declare -> empty','param_declare',1,'p_param_declare','reglas.py',113),
  ('return_func_type -> type','return_func_type',1,'p_return_func_type','reglas.py',119),
  ('return_func_type -> VOID void_detect','return_func_type',2,'p_return_func_type','reglas.py',120),
  ('void_detect -> <empty>','void_detect',0,'p_void_detect','reglas.py',129),
  ('func_code -> LEFTKEY func_code_aux RIGHTKEY','func_code',3,'p_func_code','reglas.py',137),
  ('func_code_aux -> action func_code_aux','func_code_aux',2,'p_func_code_aux','reglas.py',143),
  ('func_code_aux -> <empty>','func_code_aux',0,'p_func_code_aux','reglas.py',144),
  ('action -> assign','action',1,'p_action','reglas.py',150),
  ('action -> expresion','action',1,'p_action','reglas.py',151),
  ('expresion -> term term_appear','expresion',2,'p_expresion','reglas.py',157),
  ('expresion -> term term_appear aux_expresion','expresion',3,'p_expresion','reglas.py',158),
  ('aux_expresion -> ADD add_operator expresion','aux_expresion',3,'p_aux_expresion','reglas.py',164),
  ('aux_expresion -> LESS add_operator expresion','aux_expresion',3,'p_aux_expresion','reglas.py',165),
  ('term -> fact factor_appear','term',2,'p_term','reglas.py',171),
  ('term -> fact factor_appear aux_term','term',3,'p_term','reglas.py',172),
  ('aux_term -> SPLIT_BY add_operator term','aux_term',3,'p_aux_term','reglas.py',178),
  ('aux_term -> MULT_BY add_operator term','aux_term',3,'p_aux_term','reglas.py',179),
  ('fact -> call_lets','fact',1,'p_fact','reglas.py',185),
  ('assign -> call_let add_let_target set_appear SET set_value','assign',5,'p_assign','reglas.py',191),
  ('add_operand -> <empty>','add_operand',0,'p_add_operand','reglas.py',197),
  ('add_let_target -> <empty>','add_let_target',0,'p_add_let_target','reglas.py',205),
  ('add_operator -> <empty>','add_operator',0,'p_add_operator','reglas.py',212),
  ('set_appear -> <empty>','set_appear',0,'p_set_appear','reglas.py',220),
  ('term_appear -> <empty>','term_appear',0,'p_term_appear','reglas.py',228),
  ('factor_appear -> <empty>','factor_appear',0,'p_factor_appear','reglas.py',244),
  ('call_let -> ID check_let_exists','call_let',2,'p_call_let','reglas.py',261),
  ('call_lets -> INI_INT check_global_const_exists','call_lets',2,'p_call_lets','reglas.py',283),
  ('call_lets -> INI_FLOAT check_global_const_exists','call_lets',2,'p_call_lets','reglas.py',284),
  ('check_global_const_exists -> add_operand','check_global_const_exists',1,'p_check_global_const_exists','reglas.py',290),
  ('check_let_exists -> <empty>','check_let_exists',0,'p_check_let_exists','reglas.py',303),
  ('set_value -> INI_INT aux_int_check append_operand DOTCOMMA generate_quad','set_value',5,'p_set_value','reglas.py',318),
  ('set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad','set_value',5,'p_set_value','reglas.py',319),
  ('append_operand -> <empty>','append_operand',0,'p_append_operand','reglas.py',325),
  ('generate_quad -> <empty>','generate_quad',0,'p_generate_quad','reglas.py',332),
  ('aux_int_check -> <empty>','aux_int_check',0,'p_aux_int_check','reglas.py',350),
  ('aux_float_check -> <empty>','aux_float_check',0,'p_aux_float_check','reglas.py',361),
  ('empty -> <empty>','empty',0,'p_empty','reglas.py',372),
]
