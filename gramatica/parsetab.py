
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD BOOL COMMA DO DOTCOMMA ELSE FLOAT FUNC GREATERTN ID IF IGNORE INI_BOOL INI_FLOAT INI_INT INI_STRING INT LEFTBRACK LEFTKEY LEFTPARENT LESS LESSTN LET MAIN MULT_BY NOTSAME PRINTV PROG RIGHTBRACK RIGHTKEY RIGHTPARENT SAME SET SPLIT_BY TWOPOINTS VOID WHILE\n      compile : PROG ID seen_program DOTCOMMA lets modules\n                |\n    \n        modules : func modules\n                |\n    seen_program :  lets : LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets\n                | empty\n    seen_lets : \n      type : INT seen_type\n           | FLOAT seen_type\n           | BOOL seen_type\n    seen_type :  seen_ID_let : \n      aux_let : COMMA ID seen_ID_let aux_let\n              |\n    \n        func : FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code\n              |\n    \n        seen_func_name :\n    \n        params : LEFTPARENT param_table_init param_declare RIGHTPARENT\n    \n      param_table_init :\n    \n        param_declare : type ID seen_ID_let param_declare\n                | COMMA param_declare\n                | empty\n    \n      return_func_type : type\n                        | VOID void_detect\n    \n        void_detect :\n    \n        func_code : LEFTKEY func_code_aux RIGHTKEY\n    \n        func_code_aux : action func_code_aux\n                        |\n    \n        action : assign\n    \n        assign : call_let add_let_target set_appear SET set_value\n                |\n    \n        add_operand :\n    \n        add_let_target :\n    \n         set_appear :\n    \n        call_let : ID check_let_exists\n                    |\n    \n        check_let_exists :\n    \n        set_value : INI_INT aux_int_check append_operand DOTCOMMA generate_quad\n                    | INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad\n    \n        append_operand :\n    \n        generate_quad :\n    \n        aux_int_check :\n    \n        aux_float_check :\n    \n      empty :\n    '
    
_lr_action_items = {'PROG':([0,],[2,]),'$end':([0,1,5,6,8,9,10,13,38,45,47,57,],[-2,0,-45,-4,-7,-1,-4,-3,-45,-6,-16,-27,]),'ID':([2,11,15,16,17,18,21,22,23,30,35,48,52,53,63,70,71,72,73,],[3,14,20,-12,-12,-12,-9,-10,-11,39,43,55,55,-30,-31,-42,-42,-39,-40,]),'DOTCOMMA':([3,4,20,26,29,39,46,50,64,65,66,67,68,69,],[-5,5,-13,-15,38,-13,-15,-14,-43,-44,-41,-41,70,71,]),'LET':([5,38,],[7,7,]),'FUNC':([5,6,8,10,38,45,47,57,],[-45,11,-7,11,-45,-6,-16,-27,]),'INT':([7,12,25,27,28,36,43,49,],[-8,16,-20,16,16,16,-13,16,]),'FLOAT':([7,12,25,27,28,36,43,49,],[-8,17,-20,17,17,17,-13,17,]),'BOOL':([7,12,25,27,28,36,43,49,],[-8,18,-20,18,18,18,-13,18,]),'LEFTPARENT':([14,19,],[-18,25,]),'TWOPOINTS':([16,17,18,21,22,23,24,31,32,33,41,42,],[-12,-12,-12,-9,-10,-11,27,40,-24,-26,-25,-19,]),'COMMA':([20,25,26,28,36,39,43,46,49,],[-13,-20,30,36,36,-13,-13,30,36,]),'RIGHTPARENT':([25,28,34,36,37,43,44,49,56,],[-20,-45,42,-45,-23,-13,-22,-45,-21,]),'VOID':([27,],[33,]),'LEFTKEY':([40,],[48,]),'RIGHTKEY':([48,51,52,53,58,63,70,71,72,73,],[-29,57,-29,-30,-28,-31,-42,-42,-39,-40,]),'SET':([48,52,53,54,55,59,60,61,63,70,71,72,73,],[-32,-32,-30,-34,-38,-35,-36,62,-31,-42,-42,-39,-40,]),'INI_INT':([62,],[64,]),'INI_FLOAT':([62,],[65,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'compile':([0,],[1,]),'seen_program':([3,],[4,]),'lets':([5,38,],[6,45,]),'empty':([5,28,36,38,49,],[8,37,37,8,37,]),'modules':([6,10,],[9,13,]),'func':([6,10,],[10,10,]),'seen_lets':([7,],[12,]),'type':([12,27,28,36,49,],[15,32,35,35,35,]),'seen_func_name':([14,],[19,]),'seen_type':([16,17,18,],[21,22,23,]),'params':([19,],[24,]),'seen_ID_let':([20,39,43,],[26,46,49,]),'param_table_init':([25,],[28,]),'aux_let':([26,46,],[29,50,]),'return_func_type':([27,],[31,]),'param_declare':([28,36,49,],[34,44,56,]),'void_detect':([33,],[41,]),'func_code':([40,],[47,]),'func_code_aux':([48,52,],[51,58,]),'action':([48,52,],[52,52,]),'assign':([48,52,],[53,53,]),'call_let':([48,52,],[54,54,]),'add_let_target':([54,],[59,]),'check_let_exists':([55,],[60,]),'set_appear':([59,],[61,]),'set_value':([62,],[63,]),'aux_int_check':([64,],[66,]),'aux_float_check':([65,],[67,]),'append_operand':([66,67,],[68,69,]),'generate_quad':([70,71,],[72,73,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> compile","S'",1,None,None,None),
  ('compile -> PROG ID seen_program DOTCOMMA lets modules','compile',6,'p_compile','reglas.py',12),
  ('compile -> <empty>','compile',0,'p_compile','reglas.py',13),
  ('modules -> func modules','modules',2,'p_modules','reglas.py',19),
  ('modules -> <empty>','modules',0,'p_modules','reglas.py',20),
  ('seen_program -> <empty>','seen_program',0,'p_seen_program','reglas.py',25),
  ('lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets','lets',8,'p_lets','reglas.py',32),
  ('lets -> empty','lets',1,'p_lets','reglas.py',33),
  ('seen_lets -> <empty>','seen_lets',0,'p_seen_lets','reglas.py',38),
  ('type -> INT seen_type','type',2,'p_type','reglas.py',46),
  ('type -> FLOAT seen_type','type',2,'p_type','reglas.py',47),
  ('type -> BOOL seen_type','type',2,'p_type','reglas.py',48),
  ('seen_type -> <empty>','seen_type',0,'p_seen_type','reglas.py',53),
  ('seen_ID_let -> <empty>','seen_ID_let',0,'p_seen_ID_let','reglas.py',58),
  ('aux_let -> COMMA ID seen_ID_let aux_let','aux_let',4,'p_aux_let','reglas.py',74),
  ('aux_let -> <empty>','aux_let',0,'p_aux_let','reglas.py',75),
  ('func -> FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code','func',8,'p_func','reglas.py',81),
  ('func -> <empty>','func',0,'p_func','reglas.py',82),
  ('seen_func_name -> <empty>','seen_func_name',0,'p_seen_func_name','reglas.py',88),
  ('params -> LEFTPARENT param_table_init param_declare RIGHTPARENT','params',4,'p_params','reglas.py',96),
  ('param_table_init -> <empty>','param_table_init',0,'p_param_table_init','reglas.py',102),
  ('param_declare -> type ID seen_ID_let param_declare','param_declare',4,'p_param_declare','reglas.py',111),
  ('param_declare -> COMMA param_declare','param_declare',2,'p_param_declare','reglas.py',112),
  ('param_declare -> empty','param_declare',1,'p_param_declare','reglas.py',113),
  ('return_func_type -> type','return_func_type',1,'p_return_func_type','reglas.py',119),
  ('return_func_type -> VOID void_detect','return_func_type',2,'p_return_func_type','reglas.py',120),
  ('void_detect -> <empty>','void_detect',0,'p_void_detect','reglas.py',129),
  ('func_code -> LEFTKEY func_code_aux RIGHTKEY','func_code',3,'p_func_code','reglas.py',137),
  ('func_code_aux -> action func_code_aux','func_code_aux',2,'p_func_code_aux','reglas.py',143),
  ('func_code_aux -> <empty>','func_code_aux',0,'p_func_code_aux','reglas.py',144),
  ('action -> assign','action',1,'p_action','reglas.py',150),
  ('assign -> call_let add_let_target set_appear SET set_value','assign',5,'p_assign','reglas.py',156),
  ('assign -> <empty>','assign',0,'p_assign','reglas.py',157),
  ('add_operand -> <empty>','add_operand',0,'p_add_operand','reglas.py',163),
  ('add_let_target -> <empty>','add_let_target',0,'p_add_let_target','reglas.py',170),
  ('set_appear -> <empty>','set_appear',0,'p_set_appear','reglas.py',178),
  ('call_let -> ID check_let_exists','call_let',2,'p_call_let','reglas.py',186),
  ('call_let -> <empty>','call_let',0,'p_call_let','reglas.py',187),
  ('check_let_exists -> <empty>','check_let_exists',0,'p_check_let_exists','reglas.py',208),
  ('set_value -> INI_INT aux_int_check append_operand DOTCOMMA generate_quad','set_value',5,'p_set_value','reglas.py',223),
  ('set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad','set_value',5,'p_set_value','reglas.py',224),
  ('append_operand -> <empty>','append_operand',0,'p_append_operand','reglas.py',230),
  ('generate_quad -> <empty>','generate_quad',0,'p_generate_quad','reglas.py',237),
  ('aux_int_check -> <empty>','aux_int_check',0,'p_aux_int_check','reglas.py',255),
  ('aux_float_check -> <empty>','aux_float_check',0,'p_aux_float_check','reglas.py',266),
  ('empty -> <empty>','empty',0,'p_empty','reglas.py',277),
]
