Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DO
    ELSE
    GREATERTN
    IF
    IGNORE
    INI_BOOL
    INI_STRING
    LEFTBRACK
    LESSTN
    MAIN
    NOTSAME
    PRINTV
    RIGHTBRACK
    SAME
    WHILE

Grammar

Rule 0     S' -> compile
Rule 1     compile -> PROG ID seen_program DOTCOMMA lets modules
Rule 2     compile -> <empty>
Rule 3     modules -> func modules
Rule 4     modules -> <empty>
Rule 5     seen_program -> <empty>
Rule 6     lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets
Rule 7     lets -> empty
Rule 8     seen_lets -> <empty>
Rule 9     type -> INT seen_type
Rule 10    type -> FLOAT seen_type
Rule 11    type -> BOOL seen_type
Rule 12    seen_type -> <empty>
Rule 13    seen_ID_let -> <empty>
Rule 14    aux_let -> COMMA ID seen_ID_let aux_let
Rule 15    aux_let -> <empty>
Rule 16    func -> FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code
Rule 17    func -> <empty>
Rule 18    seen_func_name -> <empty>
Rule 19    params -> LEFTPARENT param_table_init param_declare RIGHTPARENT
Rule 20    param_table_init -> <empty>
Rule 21    param_declare -> type ID seen_ID_let param_declare
Rule 22    param_declare -> COMMA param_declare
Rule 23    param_declare -> empty
Rule 24    return_func_type -> type
Rule 25    return_func_type -> VOID void_detect
Rule 26    void_detect -> <empty>
Rule 27    func_code -> LEFTKEY lets func_code_aux RIGHTKEY
Rule 28    func_code_aux -> action func_code_aux
Rule 29    func_code_aux -> <empty>
Rule 30    action -> assign
Rule 31    action -> expresion
Rule 32    expresion -> term term_appear
Rule 33    expresion -> term term_appear aux_expresion
Rule 34    aux_expresion -> ADD add_operator expresion
Rule 35    aux_expresion -> LESS add_operator expresion
Rule 36    term -> fact factor_appear
Rule 37    term -> fact factor_appear aux_term
Rule 38    aux_term -> SPLIT_BY add_operator term
Rule 39    aux_term -> MULT_BY add_operator term
Rule 40    fact -> expo expo_appear
Rule 41    fact -> expo expo_appear aux_expo
Rule 42    expo -> parent_aux
Rule 43    expo -> call_lets
Rule 44    parent_aux -> LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent
Rule 45    found_init_parent -> <empty>
Rule 46    found_end_parent -> <empty>
Rule 47    aux_expo -> TIMES_BY_SAME add_operator fact
Rule 48    assign -> call_let set_appear SET set_value
Rule 49    assign -> call_let set_appear SET expresion seen_final_asignacion DOTCOMMA
Rule 50    seen_final_asignacion -> <empty>
Rule 51    add_operand -> <empty>
Rule 52    add_operator -> <empty>
Rule 53    set_appear -> <empty>
Rule 54    term_appear -> <empty>
Rule 55    factor_appear -> <empty>
Rule 56    expo_appear -> <empty>
Rule 57    call_let -> ID check_let_exists
Rule 58    call_lets -> INI_INT check_global_const_exists
Rule 59    call_lets -> INI_FLOAT check_global_const_exists
Rule 60    check_global_const_exists -> add_operand
Rule 61    check_let_exists -> <empty>
Rule 62    set_value -> INI_INT aux_int_check append_operand DOTCOMMA generate_quad
Rule 63    set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad
Rule 64    append_operand -> <empty>
Rule 65    generate_quad -> <empty>
Rule 66    aux_int_check -> <empty>
Rule 67    aux_float_check -> <empty>
Rule 68    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 34
BOOL                 : 11
COMMA                : 14 22
DO                   : 
DOTCOMMA             : 1 6 49 62 63
ELSE                 : 
FLOAT                : 10
FUNC                 : 16
GREATERTN            : 
ID                   : 1 6 14 16 21 57
IF                   : 
IGNORE               : 
INI_BOOL             : 
INI_FLOAT            : 59 63
INI_INT              : 58 62
INI_STRING           : 
INT                  : 9
LEFTBRACK            : 
LEFTKEY              : 27
LEFTPARENT           : 19 44
LESS                 : 35
LESSTN               : 
LET                  : 6
MAIN                 : 
MULT_BY              : 39
NOTSAME              : 
PRINTV               : 
PROG                 : 1
RIGHTBRACK           : 
RIGHTKEY             : 27
RIGHTPARENT          : 19 44
SAME                 : 
SET                  : 48 49
SPLIT_BY             : 38
TIMES_BY_SAME        : 47
TWOPOINTS            : 16 16
VOID                 : 25
WHILE                : 
error                : 

Nonterminals, with rules where they appear

action               : 28
add_operand          : 60
add_operator         : 34 35 38 39 47
append_operand       : 62 63
assign               : 30
aux_expo             : 41
aux_expresion        : 33
aux_float_check      : 63
aux_int_check        : 62
aux_let              : 6 14
aux_term             : 37
call_let             : 48 49
call_lets            : 43
check_global_const_exists : 58 59
check_let_exists     : 57
compile              : 0
empty                : 7 23
expo                 : 40 41
expo_appear          : 40 41
expresion            : 31 34 35 44 49
fact                 : 36 37 47
factor_appear        : 36 37
found_end_parent     : 44
found_init_parent    : 44
func                 : 3
func_code            : 16
func_code_aux        : 27 28
generate_quad        : 62 63
lets                 : 1 6 27
modules              : 1 3
param_declare        : 19 21 22
param_table_init     : 19
params               : 16
parent_aux           : 42
return_func_type     : 16
seen_ID_let          : 6 14 21
seen_final_asignacion : 49
seen_func_name       : 16
seen_lets            : 6
seen_program         : 1
seen_type            : 9 10 11
set_appear           : 48 49
set_value            : 48
term                 : 32 33 38 39
term_appear          : 32 33
type                 : 6 21 24
void_detect          : 25

Parsing method: LALR

state 0

    (0) S' -> . compile
    (1) compile -> . PROG ID seen_program DOTCOMMA lets modules
    (2) compile -> .

    PROG            shift and go to state 2
    $end            reduce using rule 2 (compile -> .)

    compile                        shift and go to state 1

state 1

    (0) S' -> compile .



state 2

    (1) compile -> PROG . ID seen_program DOTCOMMA lets modules

    ID              shift and go to state 3


state 3

    (1) compile -> PROG ID . seen_program DOTCOMMA lets modules
    (5) seen_program -> .

    DOTCOMMA        reduce using rule 5 (seen_program -> .)

    seen_program                   shift and go to state 4

state 4

    (1) compile -> PROG ID seen_program . DOTCOMMA lets modules

    DOTCOMMA        shift and go to state 5


state 5

    (1) compile -> PROG ID seen_program DOTCOMMA . lets modules
    (6) lets -> . LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets
    (7) lets -> . empty
    (68) empty -> .

    LET             shift and go to state 7
    FUNC            reduce using rule 68 (empty -> .)
    $end            reduce using rule 68 (empty -> .)

    lets                           shift and go to state 6
    empty                          shift and go to state 8

state 6

    (1) compile -> PROG ID seen_program DOTCOMMA lets . modules
    (3) modules -> . func modules
    (4) modules -> .
    (16) func -> . FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code
    (17) func -> .

  ! shift/reduce conflict for FUNC resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 4 (modules -> .)
    $end            reduce using rule 4 (modules -> .)
    FUNC            shift and go to state 11

  ! FUNC            [ reduce using rule 17 (func -> .) ]
  ! $end            [ reduce using rule 17 (func -> .) ]

    modules                        shift and go to state 9
    func                           shift and go to state 10

state 7

    (6) lets -> LET . seen_lets type ID seen_ID_let aux_let DOTCOMMA lets
    (8) seen_lets -> .

    INT             reduce using rule 8 (seen_lets -> .)
    FLOAT           reduce using rule 8 (seen_lets -> .)
    BOOL            reduce using rule 8 (seen_lets -> .)

    seen_lets                      shift and go to state 12

state 8

    (7) lets -> empty .

    FUNC            reduce using rule 7 (lets -> empty .)
    $end            reduce using rule 7 (lets -> empty .)
    ID              reduce using rule 7 (lets -> empty .)
    LEFTPARENT      reduce using rule 7 (lets -> empty .)
    INI_INT         reduce using rule 7 (lets -> empty .)
    INI_FLOAT       reduce using rule 7 (lets -> empty .)
    RIGHTKEY        reduce using rule 7 (lets -> empty .)


state 9

    (1) compile -> PROG ID seen_program DOTCOMMA lets modules .

    $end            reduce using rule 1 (compile -> PROG ID seen_program DOTCOMMA lets modules .)


state 10

    (3) modules -> func . modules
    (3) modules -> . func modules
    (4) modules -> .
    (16) func -> . FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code
    (17) func -> .

  ! shift/reduce conflict for FUNC resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 4 (modules -> .)
    $end            reduce using rule 4 (modules -> .)
    FUNC            shift and go to state 11

  ! FUNC            [ reduce using rule 17 (func -> .) ]
  ! $end            [ reduce using rule 17 (func -> .) ]

    func                           shift and go to state 10
    modules                        shift and go to state 13

state 11

    (16) func -> FUNC . ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code

    ID              shift and go to state 14


state 12

    (6) lets -> LET seen_lets . type ID seen_ID_let aux_let DOTCOMMA lets
    (9) type -> . INT seen_type
    (10) type -> . FLOAT seen_type
    (11) type -> . BOOL seen_type

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18

    type                           shift and go to state 15

state 13

    (3) modules -> func modules .

    $end            reduce using rule 3 (modules -> func modules .)


state 14

    (16) func -> FUNC ID . seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code
    (18) seen_func_name -> .

    LEFTPARENT      reduce using rule 18 (seen_func_name -> .)

    seen_func_name                 shift and go to state 19

state 15

    (6) lets -> LET seen_lets type . ID seen_ID_let aux_let DOTCOMMA lets

    ID              shift and go to state 20


state 16

    (9) type -> INT . seen_type
    (12) seen_type -> .

    ID              reduce using rule 12 (seen_type -> .)
    TWOPOINTS       reduce using rule 12 (seen_type -> .)

    seen_type                      shift and go to state 21

state 17

    (10) type -> FLOAT . seen_type
    (12) seen_type -> .

    ID              reduce using rule 12 (seen_type -> .)
    TWOPOINTS       reduce using rule 12 (seen_type -> .)

    seen_type                      shift and go to state 22

state 18

    (11) type -> BOOL . seen_type
    (12) seen_type -> .

    ID              reduce using rule 12 (seen_type -> .)
    TWOPOINTS       reduce using rule 12 (seen_type -> .)

    seen_type                      shift and go to state 23

state 19

    (16) func -> FUNC ID seen_func_name . params TWOPOINTS return_func_type TWOPOINTS func_code
    (19) params -> . LEFTPARENT param_table_init param_declare RIGHTPARENT

    LEFTPARENT      shift and go to state 25

    params                         shift and go to state 24

state 20

    (6) lets -> LET seen_lets type ID . seen_ID_let aux_let DOTCOMMA lets
    (13) seen_ID_let -> .

    COMMA           reduce using rule 13 (seen_ID_let -> .)
    DOTCOMMA        reduce using rule 13 (seen_ID_let -> .)

    seen_ID_let                    shift and go to state 26

state 21

    (9) type -> INT seen_type .

    ID              reduce using rule 9 (type -> INT seen_type .)
    TWOPOINTS       reduce using rule 9 (type -> INT seen_type .)


state 22

    (10) type -> FLOAT seen_type .

    ID              reduce using rule 10 (type -> FLOAT seen_type .)
    TWOPOINTS       reduce using rule 10 (type -> FLOAT seen_type .)


state 23

    (11) type -> BOOL seen_type .

    ID              reduce using rule 11 (type -> BOOL seen_type .)
    TWOPOINTS       reduce using rule 11 (type -> BOOL seen_type .)


state 24

    (16) func -> FUNC ID seen_func_name params . TWOPOINTS return_func_type TWOPOINTS func_code

    TWOPOINTS       shift and go to state 27


state 25

    (19) params -> LEFTPARENT . param_table_init param_declare RIGHTPARENT
    (20) param_table_init -> .

    COMMA           reduce using rule 20 (param_table_init -> .)
    INT             reduce using rule 20 (param_table_init -> .)
    FLOAT           reduce using rule 20 (param_table_init -> .)
    BOOL            reduce using rule 20 (param_table_init -> .)
    RIGHTPARENT     reduce using rule 20 (param_table_init -> .)

    param_table_init               shift and go to state 28

state 26

    (6) lets -> LET seen_lets type ID seen_ID_let . aux_let DOTCOMMA lets
    (14) aux_let -> . COMMA ID seen_ID_let aux_let
    (15) aux_let -> .

    COMMA           shift and go to state 30
    DOTCOMMA        reduce using rule 15 (aux_let -> .)

    aux_let                        shift and go to state 29

state 27

    (16) func -> FUNC ID seen_func_name params TWOPOINTS . return_func_type TWOPOINTS func_code
    (24) return_func_type -> . type
    (25) return_func_type -> . VOID void_detect
    (9) type -> . INT seen_type
    (10) type -> . FLOAT seen_type
    (11) type -> . BOOL seen_type

    VOID            shift and go to state 33
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18

    return_func_type               shift and go to state 31
    type                           shift and go to state 32

state 28

    (19) params -> LEFTPARENT param_table_init . param_declare RIGHTPARENT
    (21) param_declare -> . type ID seen_ID_let param_declare
    (22) param_declare -> . COMMA param_declare
    (23) param_declare -> . empty
    (9) type -> . INT seen_type
    (10) type -> . FLOAT seen_type
    (11) type -> . BOOL seen_type
    (68) empty -> .

    COMMA           shift and go to state 36
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    RIGHTPARENT     reduce using rule 68 (empty -> .)

    param_declare                  shift and go to state 34
    type                           shift and go to state 35
    empty                          shift and go to state 37

state 29

    (6) lets -> LET seen_lets type ID seen_ID_let aux_let . DOTCOMMA lets

    DOTCOMMA        shift and go to state 38


state 30

    (14) aux_let -> COMMA . ID seen_ID_let aux_let

    ID              shift and go to state 39


state 31

    (16) func -> FUNC ID seen_func_name params TWOPOINTS return_func_type . TWOPOINTS func_code

    TWOPOINTS       shift and go to state 40


state 32

    (24) return_func_type -> type .

    TWOPOINTS       reduce using rule 24 (return_func_type -> type .)


state 33

    (25) return_func_type -> VOID . void_detect
    (26) void_detect -> .

    TWOPOINTS       reduce using rule 26 (void_detect -> .)

    void_detect                    shift and go to state 41

state 34

    (19) params -> LEFTPARENT param_table_init param_declare . RIGHTPARENT

    RIGHTPARENT     shift and go to state 42


state 35

    (21) param_declare -> type . ID seen_ID_let param_declare

    ID              shift and go to state 43


state 36

    (22) param_declare -> COMMA . param_declare
    (21) param_declare -> . type ID seen_ID_let param_declare
    (22) param_declare -> . COMMA param_declare
    (23) param_declare -> . empty
    (9) type -> . INT seen_type
    (10) type -> . FLOAT seen_type
    (11) type -> . BOOL seen_type
    (68) empty -> .

    COMMA           shift and go to state 36
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    RIGHTPARENT     reduce using rule 68 (empty -> .)

    param_declare                  shift and go to state 44
    type                           shift and go to state 35
    empty                          shift and go to state 37

state 37

    (23) param_declare -> empty .

    RIGHTPARENT     reduce using rule 23 (param_declare -> empty .)


state 38

    (6) lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA . lets
    (6) lets -> . LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets
    (7) lets -> . empty
    (68) empty -> .

    LET             shift and go to state 7
    FUNC            reduce using rule 68 (empty -> .)
    $end            reduce using rule 68 (empty -> .)
    ID              reduce using rule 68 (empty -> .)
    LEFTPARENT      reduce using rule 68 (empty -> .)
    INI_INT         reduce using rule 68 (empty -> .)
    INI_FLOAT       reduce using rule 68 (empty -> .)
    RIGHTKEY        reduce using rule 68 (empty -> .)

    lets                           shift and go to state 45
    empty                          shift and go to state 8

state 39

    (14) aux_let -> COMMA ID . seen_ID_let aux_let
    (13) seen_ID_let -> .

    COMMA           reduce using rule 13 (seen_ID_let -> .)
    DOTCOMMA        reduce using rule 13 (seen_ID_let -> .)

    seen_ID_let                    shift and go to state 46

state 40

    (16) func -> FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS . func_code
    (27) func_code -> . LEFTKEY lets func_code_aux RIGHTKEY

    LEFTKEY         shift and go to state 48

    func_code                      shift and go to state 47

state 41

    (25) return_func_type -> VOID void_detect .

    TWOPOINTS       reduce using rule 25 (return_func_type -> VOID void_detect .)


state 42

    (19) params -> LEFTPARENT param_table_init param_declare RIGHTPARENT .

    TWOPOINTS       reduce using rule 19 (params -> LEFTPARENT param_table_init param_declare RIGHTPARENT .)


state 43

    (21) param_declare -> type ID . seen_ID_let param_declare
    (13) seen_ID_let -> .

    COMMA           reduce using rule 13 (seen_ID_let -> .)
    INT             reduce using rule 13 (seen_ID_let -> .)
    FLOAT           reduce using rule 13 (seen_ID_let -> .)
    BOOL            reduce using rule 13 (seen_ID_let -> .)
    RIGHTPARENT     reduce using rule 13 (seen_ID_let -> .)

    seen_ID_let                    shift and go to state 49

state 44

    (22) param_declare -> COMMA param_declare .

    RIGHTPARENT     reduce using rule 22 (param_declare -> COMMA param_declare .)


state 45

    (6) lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .

    FUNC            reduce using rule 6 (lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .)
    $end            reduce using rule 6 (lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .)
    ID              reduce using rule 6 (lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .)
    LEFTPARENT      reduce using rule 6 (lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .)
    INI_INT         reduce using rule 6 (lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .)
    INI_FLOAT       reduce using rule 6 (lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .)
    RIGHTKEY        reduce using rule 6 (lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .)


state 46

    (14) aux_let -> COMMA ID seen_ID_let . aux_let
    (14) aux_let -> . COMMA ID seen_ID_let aux_let
    (15) aux_let -> .

    COMMA           shift and go to state 30
    DOTCOMMA        reduce using rule 15 (aux_let -> .)

    aux_let                        shift and go to state 50

state 47

    (16) func -> FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code .

    FUNC            reduce using rule 16 (func -> FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code .)
    $end            reduce using rule 16 (func -> FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code .)


state 48

    (27) func_code -> LEFTKEY . lets func_code_aux RIGHTKEY
    (6) lets -> . LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets
    (7) lets -> . empty
    (68) empty -> .

    LET             shift and go to state 7
    ID              reduce using rule 68 (empty -> .)
    LEFTPARENT      reduce using rule 68 (empty -> .)
    INI_INT         reduce using rule 68 (empty -> .)
    INI_FLOAT       reduce using rule 68 (empty -> .)
    RIGHTKEY        reduce using rule 68 (empty -> .)

    lets                           shift and go to state 51
    empty                          shift and go to state 8

state 49

    (21) param_declare -> type ID seen_ID_let . param_declare
    (21) param_declare -> . type ID seen_ID_let param_declare
    (22) param_declare -> . COMMA param_declare
    (23) param_declare -> . empty
    (9) type -> . INT seen_type
    (10) type -> . FLOAT seen_type
    (11) type -> . BOOL seen_type
    (68) empty -> .

    COMMA           shift and go to state 36
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    RIGHTPARENT     reduce using rule 68 (empty -> .)

    type                           shift and go to state 35
    param_declare                  shift and go to state 52
    empty                          shift and go to state 37

state 50

    (14) aux_let -> COMMA ID seen_ID_let aux_let .

    DOTCOMMA        reduce using rule 14 (aux_let -> COMMA ID seen_ID_let aux_let .)


state 51

    (27) func_code -> LEFTKEY lets . func_code_aux RIGHTKEY
    (28) func_code_aux -> . action func_code_aux
    (29) func_code_aux -> .
    (30) action -> . assign
    (31) action -> . expresion
    (48) assign -> . call_let set_appear SET set_value
    (49) assign -> . call_let set_appear SET expresion seen_final_asignacion DOTCOMMA
    (32) expresion -> . term term_appear
    (33) expresion -> . term term_appear aux_expresion
    (57) call_let -> . ID check_let_exists
    (36) term -> . fact factor_appear
    (37) term -> . fact factor_appear aux_term
    (40) fact -> . expo expo_appear
    (41) fact -> . expo expo_appear aux_expo
    (42) expo -> . parent_aux
    (43) expo -> . call_lets
    (44) parent_aux -> . LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent
    (58) call_lets -> . INI_INT check_global_const_exists
    (59) call_lets -> . INI_FLOAT check_global_const_exists

    RIGHTKEY        reduce using rule 29 (func_code_aux -> .)
    ID              shift and go to state 59
    LEFTPARENT      shift and go to state 64
    INI_INT         shift and go to state 65
    INI_FLOAT       shift and go to state 66

    func_code_aux                  shift and go to state 53
    action                         shift and go to state 54
    assign                         shift and go to state 55
    expresion                      shift and go to state 56
    call_let                       shift and go to state 57
    term                           shift and go to state 58
    fact                           shift and go to state 60
    expo                           shift and go to state 61
    parent_aux                     shift and go to state 62
    call_lets                      shift and go to state 63

state 52

    (21) param_declare -> type ID seen_ID_let param_declare .

    RIGHTPARENT     reduce using rule 21 (param_declare -> type ID seen_ID_let param_declare .)


state 53

    (27) func_code -> LEFTKEY lets func_code_aux . RIGHTKEY

    RIGHTKEY        shift and go to state 67


state 54

    (28) func_code_aux -> action . func_code_aux
    (28) func_code_aux -> . action func_code_aux
    (29) func_code_aux -> .
    (30) action -> . assign
    (31) action -> . expresion
    (48) assign -> . call_let set_appear SET set_value
    (49) assign -> . call_let set_appear SET expresion seen_final_asignacion DOTCOMMA
    (32) expresion -> . term term_appear
    (33) expresion -> . term term_appear aux_expresion
    (57) call_let -> . ID check_let_exists
    (36) term -> . fact factor_appear
    (37) term -> . fact factor_appear aux_term
    (40) fact -> . expo expo_appear
    (41) fact -> . expo expo_appear aux_expo
    (42) expo -> . parent_aux
    (43) expo -> . call_lets
    (44) parent_aux -> . LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent
    (58) call_lets -> . INI_INT check_global_const_exists
    (59) call_lets -> . INI_FLOAT check_global_const_exists

    RIGHTKEY        reduce using rule 29 (func_code_aux -> .)
    ID              shift and go to state 59
    LEFTPARENT      shift and go to state 64
    INI_INT         shift and go to state 65
    INI_FLOAT       shift and go to state 66

    action                         shift and go to state 54
    func_code_aux                  shift and go to state 68
    assign                         shift and go to state 55
    expresion                      shift and go to state 56
    call_let                       shift and go to state 57
    term                           shift and go to state 58
    fact                           shift and go to state 60
    expo                           shift and go to state 61
    parent_aux                     shift and go to state 62
    call_lets                      shift and go to state 63

state 55

    (30) action -> assign .

    ID              reduce using rule 30 (action -> assign .)
    LEFTPARENT      reduce using rule 30 (action -> assign .)
    INI_INT         reduce using rule 30 (action -> assign .)
    INI_FLOAT       reduce using rule 30 (action -> assign .)
    RIGHTKEY        reduce using rule 30 (action -> assign .)


state 56

    (31) action -> expresion .

    ID              reduce using rule 31 (action -> expresion .)
    LEFTPARENT      reduce using rule 31 (action -> expresion .)
    INI_INT         reduce using rule 31 (action -> expresion .)
    INI_FLOAT       reduce using rule 31 (action -> expresion .)
    RIGHTKEY        reduce using rule 31 (action -> expresion .)


state 57

    (48) assign -> call_let . set_appear SET set_value
    (49) assign -> call_let . set_appear SET expresion seen_final_asignacion DOTCOMMA
    (53) set_appear -> .

    SET             reduce using rule 53 (set_appear -> .)

    set_appear                     shift and go to state 69

state 58

    (32) expresion -> term . term_appear
    (33) expresion -> term . term_appear aux_expresion
    (54) term_appear -> .

    ADD             reduce using rule 54 (term_appear -> .)
    LESS            reduce using rule 54 (term_appear -> .)
    ID              reduce using rule 54 (term_appear -> .)
    LEFTPARENT      reduce using rule 54 (term_appear -> .)
    INI_INT         reduce using rule 54 (term_appear -> .)
    INI_FLOAT       reduce using rule 54 (term_appear -> .)
    RIGHTKEY        reduce using rule 54 (term_appear -> .)
    RIGHTPARENT     reduce using rule 54 (term_appear -> .)
    DOTCOMMA        reduce using rule 54 (term_appear -> .)

    term_appear                    shift and go to state 70

state 59

    (57) call_let -> ID . check_let_exists
    (61) check_let_exists -> .

    SET             reduce using rule 61 (check_let_exists -> .)

    check_let_exists               shift and go to state 71

state 60

    (36) term -> fact . factor_appear
    (37) term -> fact . factor_appear aux_term
    (55) factor_appear -> .

    SPLIT_BY        reduce using rule 55 (factor_appear -> .)
    MULT_BY         reduce using rule 55 (factor_appear -> .)
    ADD             reduce using rule 55 (factor_appear -> .)
    LESS            reduce using rule 55 (factor_appear -> .)
    ID              reduce using rule 55 (factor_appear -> .)
    LEFTPARENT      reduce using rule 55 (factor_appear -> .)
    INI_INT         reduce using rule 55 (factor_appear -> .)
    INI_FLOAT       reduce using rule 55 (factor_appear -> .)
    RIGHTKEY        reduce using rule 55 (factor_appear -> .)
    RIGHTPARENT     reduce using rule 55 (factor_appear -> .)
    DOTCOMMA        reduce using rule 55 (factor_appear -> .)

    factor_appear                  shift and go to state 72

state 61

    (40) fact -> expo . expo_appear
    (41) fact -> expo . expo_appear aux_expo
    (56) expo_appear -> .

    TIMES_BY_SAME   reduce using rule 56 (expo_appear -> .)
    SPLIT_BY        reduce using rule 56 (expo_appear -> .)
    MULT_BY         reduce using rule 56 (expo_appear -> .)
    ADD             reduce using rule 56 (expo_appear -> .)
    LESS            reduce using rule 56 (expo_appear -> .)
    ID              reduce using rule 56 (expo_appear -> .)
    LEFTPARENT      reduce using rule 56 (expo_appear -> .)
    INI_INT         reduce using rule 56 (expo_appear -> .)
    INI_FLOAT       reduce using rule 56 (expo_appear -> .)
    RIGHTKEY        reduce using rule 56 (expo_appear -> .)
    RIGHTPARENT     reduce using rule 56 (expo_appear -> .)
    DOTCOMMA        reduce using rule 56 (expo_appear -> .)

    expo_appear                    shift and go to state 73

state 62

    (42) expo -> parent_aux .

    TIMES_BY_SAME   reduce using rule 42 (expo -> parent_aux .)
    SPLIT_BY        reduce using rule 42 (expo -> parent_aux .)
    MULT_BY         reduce using rule 42 (expo -> parent_aux .)
    ADD             reduce using rule 42 (expo -> parent_aux .)
    LESS            reduce using rule 42 (expo -> parent_aux .)
    ID              reduce using rule 42 (expo -> parent_aux .)
    LEFTPARENT      reduce using rule 42 (expo -> parent_aux .)
    INI_INT         reduce using rule 42 (expo -> parent_aux .)
    INI_FLOAT       reduce using rule 42 (expo -> parent_aux .)
    RIGHTKEY        reduce using rule 42 (expo -> parent_aux .)
    RIGHTPARENT     reduce using rule 42 (expo -> parent_aux .)
    DOTCOMMA        reduce using rule 42 (expo -> parent_aux .)


state 63

    (43) expo -> call_lets .

    TIMES_BY_SAME   reduce using rule 43 (expo -> call_lets .)
    SPLIT_BY        reduce using rule 43 (expo -> call_lets .)
    MULT_BY         reduce using rule 43 (expo -> call_lets .)
    ADD             reduce using rule 43 (expo -> call_lets .)
    LESS            reduce using rule 43 (expo -> call_lets .)
    ID              reduce using rule 43 (expo -> call_lets .)
    LEFTPARENT      reduce using rule 43 (expo -> call_lets .)
    INI_INT         reduce using rule 43 (expo -> call_lets .)
    INI_FLOAT       reduce using rule 43 (expo -> call_lets .)
    RIGHTKEY        reduce using rule 43 (expo -> call_lets .)
    RIGHTPARENT     reduce using rule 43 (expo -> call_lets .)
    DOTCOMMA        reduce using rule 43 (expo -> call_lets .)


state 64

    (44) parent_aux -> LEFTPARENT . found_init_parent expresion RIGHTPARENT found_end_parent
    (45) found_init_parent -> .

    LEFTPARENT      reduce using rule 45 (found_init_parent -> .)
    INI_INT         reduce using rule 45 (found_init_parent -> .)
    INI_FLOAT       reduce using rule 45 (found_init_parent -> .)

    found_init_parent              shift and go to state 74

state 65

    (58) call_lets -> INI_INT . check_global_const_exists
    (60) check_global_const_exists -> . add_operand
    (51) add_operand -> .

    TIMES_BY_SAME   reduce using rule 51 (add_operand -> .)
    SPLIT_BY        reduce using rule 51 (add_operand -> .)
    MULT_BY         reduce using rule 51 (add_operand -> .)
    ADD             reduce using rule 51 (add_operand -> .)
    LESS            reduce using rule 51 (add_operand -> .)
    ID              reduce using rule 51 (add_operand -> .)
    LEFTPARENT      reduce using rule 51 (add_operand -> .)
    INI_INT         reduce using rule 51 (add_operand -> .)
    INI_FLOAT       reduce using rule 51 (add_operand -> .)
    RIGHTKEY        reduce using rule 51 (add_operand -> .)
    RIGHTPARENT     reduce using rule 51 (add_operand -> .)
    DOTCOMMA        reduce using rule 51 (add_operand -> .)

    check_global_const_exists      shift and go to state 75
    add_operand                    shift and go to state 76

state 66

    (59) call_lets -> INI_FLOAT . check_global_const_exists
    (60) check_global_const_exists -> . add_operand
    (51) add_operand -> .

    TIMES_BY_SAME   reduce using rule 51 (add_operand -> .)
    SPLIT_BY        reduce using rule 51 (add_operand -> .)
    MULT_BY         reduce using rule 51 (add_operand -> .)
    ADD             reduce using rule 51 (add_operand -> .)
    LESS            reduce using rule 51 (add_operand -> .)
    ID              reduce using rule 51 (add_operand -> .)
    LEFTPARENT      reduce using rule 51 (add_operand -> .)
    INI_INT         reduce using rule 51 (add_operand -> .)
    INI_FLOAT       reduce using rule 51 (add_operand -> .)
    RIGHTKEY        reduce using rule 51 (add_operand -> .)
    RIGHTPARENT     reduce using rule 51 (add_operand -> .)
    DOTCOMMA        reduce using rule 51 (add_operand -> .)

    check_global_const_exists      shift and go to state 77
    add_operand                    shift and go to state 76

state 67

    (27) func_code -> LEFTKEY lets func_code_aux RIGHTKEY .

    FUNC            reduce using rule 27 (func_code -> LEFTKEY lets func_code_aux RIGHTKEY .)
    $end            reduce using rule 27 (func_code -> LEFTKEY lets func_code_aux RIGHTKEY .)


state 68

    (28) func_code_aux -> action func_code_aux .

    RIGHTKEY        reduce using rule 28 (func_code_aux -> action func_code_aux .)


state 69

    (48) assign -> call_let set_appear . SET set_value
    (49) assign -> call_let set_appear . SET expresion seen_final_asignacion DOTCOMMA

    SET             shift and go to state 78


state 70

    (32) expresion -> term term_appear .
    (33) expresion -> term term_appear . aux_expresion
    (34) aux_expresion -> . ADD add_operator expresion
    (35) aux_expresion -> . LESS add_operator expresion

    ID              reduce using rule 32 (expresion -> term term_appear .)
    LEFTPARENT      reduce using rule 32 (expresion -> term term_appear .)
    INI_INT         reduce using rule 32 (expresion -> term term_appear .)
    INI_FLOAT       reduce using rule 32 (expresion -> term term_appear .)
    RIGHTKEY        reduce using rule 32 (expresion -> term term_appear .)
    RIGHTPARENT     reduce using rule 32 (expresion -> term term_appear .)
    DOTCOMMA        reduce using rule 32 (expresion -> term term_appear .)
    ADD             shift and go to state 80
    LESS            shift and go to state 81

    aux_expresion                  shift and go to state 79

state 71

    (57) call_let -> ID check_let_exists .

    SET             reduce using rule 57 (call_let -> ID check_let_exists .)


state 72

    (36) term -> fact factor_appear .
    (37) term -> fact factor_appear . aux_term
    (38) aux_term -> . SPLIT_BY add_operator term
    (39) aux_term -> . MULT_BY add_operator term

    ADD             reduce using rule 36 (term -> fact factor_appear .)
    LESS            reduce using rule 36 (term -> fact factor_appear .)
    ID              reduce using rule 36 (term -> fact factor_appear .)
    LEFTPARENT      reduce using rule 36 (term -> fact factor_appear .)
    INI_INT         reduce using rule 36 (term -> fact factor_appear .)
    INI_FLOAT       reduce using rule 36 (term -> fact factor_appear .)
    RIGHTKEY        reduce using rule 36 (term -> fact factor_appear .)
    RIGHTPARENT     reduce using rule 36 (term -> fact factor_appear .)
    DOTCOMMA        reduce using rule 36 (term -> fact factor_appear .)
    SPLIT_BY        shift and go to state 83
    MULT_BY         shift and go to state 84

    aux_term                       shift and go to state 82

state 73

    (40) fact -> expo expo_appear .
    (41) fact -> expo expo_appear . aux_expo
    (47) aux_expo -> . TIMES_BY_SAME add_operator fact

    SPLIT_BY        reduce using rule 40 (fact -> expo expo_appear .)
    MULT_BY         reduce using rule 40 (fact -> expo expo_appear .)
    ADD             reduce using rule 40 (fact -> expo expo_appear .)
    LESS            reduce using rule 40 (fact -> expo expo_appear .)
    ID              reduce using rule 40 (fact -> expo expo_appear .)
    LEFTPARENT      reduce using rule 40 (fact -> expo expo_appear .)
    INI_INT         reduce using rule 40 (fact -> expo expo_appear .)
    INI_FLOAT       reduce using rule 40 (fact -> expo expo_appear .)
    RIGHTKEY        reduce using rule 40 (fact -> expo expo_appear .)
    RIGHTPARENT     reduce using rule 40 (fact -> expo expo_appear .)
    DOTCOMMA        reduce using rule 40 (fact -> expo expo_appear .)
    TIMES_BY_SAME   shift and go to state 86

    aux_expo                       shift and go to state 85

state 74

    (44) parent_aux -> LEFTPARENT found_init_parent . expresion RIGHTPARENT found_end_parent
    (32) expresion -> . term term_appear
    (33) expresion -> . term term_appear aux_expresion
    (36) term -> . fact factor_appear
    (37) term -> . fact factor_appear aux_term
    (40) fact -> . expo expo_appear
    (41) fact -> . expo expo_appear aux_expo
    (42) expo -> . parent_aux
    (43) expo -> . call_lets
    (44) parent_aux -> . LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent
    (58) call_lets -> . INI_INT check_global_const_exists
    (59) call_lets -> . INI_FLOAT check_global_const_exists

    LEFTPARENT      shift and go to state 64
    INI_INT         shift and go to state 65
    INI_FLOAT       shift and go to state 66

    expresion                      shift and go to state 87
    term                           shift and go to state 58
    fact                           shift and go to state 60
    expo                           shift and go to state 61
    parent_aux                     shift and go to state 62
    call_lets                      shift and go to state 63

state 75

    (58) call_lets -> INI_INT check_global_const_exists .

    TIMES_BY_SAME   reduce using rule 58 (call_lets -> INI_INT check_global_const_exists .)
    SPLIT_BY        reduce using rule 58 (call_lets -> INI_INT check_global_const_exists .)
    MULT_BY         reduce using rule 58 (call_lets -> INI_INT check_global_const_exists .)
    ADD             reduce using rule 58 (call_lets -> INI_INT check_global_const_exists .)
    LESS            reduce using rule 58 (call_lets -> INI_INT check_global_const_exists .)
    ID              reduce using rule 58 (call_lets -> INI_INT check_global_const_exists .)
    LEFTPARENT      reduce using rule 58 (call_lets -> INI_INT check_global_const_exists .)
    INI_INT         reduce using rule 58 (call_lets -> INI_INT check_global_const_exists .)
    INI_FLOAT       reduce using rule 58 (call_lets -> INI_INT check_global_const_exists .)
    RIGHTKEY        reduce using rule 58 (call_lets -> INI_INT check_global_const_exists .)
    RIGHTPARENT     reduce using rule 58 (call_lets -> INI_INT check_global_const_exists .)
    DOTCOMMA        reduce using rule 58 (call_lets -> INI_INT check_global_const_exists .)


state 76

    (60) check_global_const_exists -> add_operand .

    TIMES_BY_SAME   reduce using rule 60 (check_global_const_exists -> add_operand .)
    SPLIT_BY        reduce using rule 60 (check_global_const_exists -> add_operand .)
    MULT_BY         reduce using rule 60 (check_global_const_exists -> add_operand .)
    ADD             reduce using rule 60 (check_global_const_exists -> add_operand .)
    LESS            reduce using rule 60 (check_global_const_exists -> add_operand .)
    ID              reduce using rule 60 (check_global_const_exists -> add_operand .)
    LEFTPARENT      reduce using rule 60 (check_global_const_exists -> add_operand .)
    INI_INT         reduce using rule 60 (check_global_const_exists -> add_operand .)
    INI_FLOAT       reduce using rule 60 (check_global_const_exists -> add_operand .)
    RIGHTKEY        reduce using rule 60 (check_global_const_exists -> add_operand .)
    RIGHTPARENT     reduce using rule 60 (check_global_const_exists -> add_operand .)
    DOTCOMMA        reduce using rule 60 (check_global_const_exists -> add_operand .)


state 77

    (59) call_lets -> INI_FLOAT check_global_const_exists .

    TIMES_BY_SAME   reduce using rule 59 (call_lets -> INI_FLOAT check_global_const_exists .)
    SPLIT_BY        reduce using rule 59 (call_lets -> INI_FLOAT check_global_const_exists .)
    MULT_BY         reduce using rule 59 (call_lets -> INI_FLOAT check_global_const_exists .)
    ADD             reduce using rule 59 (call_lets -> INI_FLOAT check_global_const_exists .)
    LESS            reduce using rule 59 (call_lets -> INI_FLOAT check_global_const_exists .)
    ID              reduce using rule 59 (call_lets -> INI_FLOAT check_global_const_exists .)
    LEFTPARENT      reduce using rule 59 (call_lets -> INI_FLOAT check_global_const_exists .)
    INI_INT         reduce using rule 59 (call_lets -> INI_FLOAT check_global_const_exists .)
    INI_FLOAT       reduce using rule 59 (call_lets -> INI_FLOAT check_global_const_exists .)
    RIGHTKEY        reduce using rule 59 (call_lets -> INI_FLOAT check_global_const_exists .)
    RIGHTPARENT     reduce using rule 59 (call_lets -> INI_FLOAT check_global_const_exists .)
    DOTCOMMA        reduce using rule 59 (call_lets -> INI_FLOAT check_global_const_exists .)


state 78

    (48) assign -> call_let set_appear SET . set_value
    (49) assign -> call_let set_appear SET . expresion seen_final_asignacion DOTCOMMA
    (62) set_value -> . INI_INT aux_int_check append_operand DOTCOMMA generate_quad
    (63) set_value -> . INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad
    (32) expresion -> . term term_appear
    (33) expresion -> . term term_appear aux_expresion
    (36) term -> . fact factor_appear
    (37) term -> . fact factor_appear aux_term
    (40) fact -> . expo expo_appear
    (41) fact -> . expo expo_appear aux_expo
    (42) expo -> . parent_aux
    (43) expo -> . call_lets
    (44) parent_aux -> . LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent
    (58) call_lets -> . INI_INT check_global_const_exists
    (59) call_lets -> . INI_FLOAT check_global_const_exists

    INI_INT         shift and go to state 90
    INI_FLOAT       shift and go to state 91
    LEFTPARENT      shift and go to state 64

    set_value                      shift and go to state 88
    expresion                      shift and go to state 89
    term                           shift and go to state 58
    fact                           shift and go to state 60
    expo                           shift and go to state 61
    parent_aux                     shift and go to state 62
    call_lets                      shift and go to state 63

state 79

    (33) expresion -> term term_appear aux_expresion .

    ID              reduce using rule 33 (expresion -> term term_appear aux_expresion .)
    LEFTPARENT      reduce using rule 33 (expresion -> term term_appear aux_expresion .)
    INI_INT         reduce using rule 33 (expresion -> term term_appear aux_expresion .)
    INI_FLOAT       reduce using rule 33 (expresion -> term term_appear aux_expresion .)
    RIGHTKEY        reduce using rule 33 (expresion -> term term_appear aux_expresion .)
    RIGHTPARENT     reduce using rule 33 (expresion -> term term_appear aux_expresion .)
    DOTCOMMA        reduce using rule 33 (expresion -> term term_appear aux_expresion .)


state 80

    (34) aux_expresion -> ADD . add_operator expresion
    (52) add_operator -> .

    LEFTPARENT      reduce using rule 52 (add_operator -> .)
    INI_INT         reduce using rule 52 (add_operator -> .)
    INI_FLOAT       reduce using rule 52 (add_operator -> .)

    add_operator                   shift and go to state 92

state 81

    (35) aux_expresion -> LESS . add_operator expresion
    (52) add_operator -> .

    LEFTPARENT      reduce using rule 52 (add_operator -> .)
    INI_INT         reduce using rule 52 (add_operator -> .)
    INI_FLOAT       reduce using rule 52 (add_operator -> .)

    add_operator                   shift and go to state 93

state 82

    (37) term -> fact factor_appear aux_term .

    ADD             reduce using rule 37 (term -> fact factor_appear aux_term .)
    LESS            reduce using rule 37 (term -> fact factor_appear aux_term .)
    ID              reduce using rule 37 (term -> fact factor_appear aux_term .)
    LEFTPARENT      reduce using rule 37 (term -> fact factor_appear aux_term .)
    INI_INT         reduce using rule 37 (term -> fact factor_appear aux_term .)
    INI_FLOAT       reduce using rule 37 (term -> fact factor_appear aux_term .)
    RIGHTKEY        reduce using rule 37 (term -> fact factor_appear aux_term .)
    RIGHTPARENT     reduce using rule 37 (term -> fact factor_appear aux_term .)
    DOTCOMMA        reduce using rule 37 (term -> fact factor_appear aux_term .)


state 83

    (38) aux_term -> SPLIT_BY . add_operator term
    (52) add_operator -> .

    LEFTPARENT      reduce using rule 52 (add_operator -> .)
    INI_INT         reduce using rule 52 (add_operator -> .)
    INI_FLOAT       reduce using rule 52 (add_operator -> .)

    add_operator                   shift and go to state 94

state 84

    (39) aux_term -> MULT_BY . add_operator term
    (52) add_operator -> .

    LEFTPARENT      reduce using rule 52 (add_operator -> .)
    INI_INT         reduce using rule 52 (add_operator -> .)
    INI_FLOAT       reduce using rule 52 (add_operator -> .)

    add_operator                   shift and go to state 95

state 85

    (41) fact -> expo expo_appear aux_expo .

    SPLIT_BY        reduce using rule 41 (fact -> expo expo_appear aux_expo .)
    MULT_BY         reduce using rule 41 (fact -> expo expo_appear aux_expo .)
    ADD             reduce using rule 41 (fact -> expo expo_appear aux_expo .)
    LESS            reduce using rule 41 (fact -> expo expo_appear aux_expo .)
    ID              reduce using rule 41 (fact -> expo expo_appear aux_expo .)
    LEFTPARENT      reduce using rule 41 (fact -> expo expo_appear aux_expo .)
    INI_INT         reduce using rule 41 (fact -> expo expo_appear aux_expo .)
    INI_FLOAT       reduce using rule 41 (fact -> expo expo_appear aux_expo .)
    RIGHTKEY        reduce using rule 41 (fact -> expo expo_appear aux_expo .)
    RIGHTPARENT     reduce using rule 41 (fact -> expo expo_appear aux_expo .)
    DOTCOMMA        reduce using rule 41 (fact -> expo expo_appear aux_expo .)


state 86

    (47) aux_expo -> TIMES_BY_SAME . add_operator fact
    (52) add_operator -> .

    LEFTPARENT      reduce using rule 52 (add_operator -> .)
    INI_INT         reduce using rule 52 (add_operator -> .)
    INI_FLOAT       reduce using rule 52 (add_operator -> .)

    add_operator                   shift and go to state 96

state 87

    (44) parent_aux -> LEFTPARENT found_init_parent expresion . RIGHTPARENT found_end_parent

    RIGHTPARENT     shift and go to state 97


state 88

    (48) assign -> call_let set_appear SET set_value .

    ID              reduce using rule 48 (assign -> call_let set_appear SET set_value .)
    LEFTPARENT      reduce using rule 48 (assign -> call_let set_appear SET set_value .)
    INI_INT         reduce using rule 48 (assign -> call_let set_appear SET set_value .)
    INI_FLOAT       reduce using rule 48 (assign -> call_let set_appear SET set_value .)
    RIGHTKEY        reduce using rule 48 (assign -> call_let set_appear SET set_value .)


state 89

    (49) assign -> call_let set_appear SET expresion . seen_final_asignacion DOTCOMMA
    (50) seen_final_asignacion -> .

    DOTCOMMA        reduce using rule 50 (seen_final_asignacion -> .)

    seen_final_asignacion          shift and go to state 98

state 90

    (62) set_value -> INI_INT . aux_int_check append_operand DOTCOMMA generate_quad
    (58) call_lets -> INI_INT . check_global_const_exists
    (66) aux_int_check -> .
    (60) check_global_const_exists -> . add_operand
    (51) add_operand -> .

  ! reduce/reduce conflict for DOTCOMMA resolved using rule 51 (add_operand -> .)
    TIMES_BY_SAME   reduce using rule 51 (add_operand -> .)
    SPLIT_BY        reduce using rule 51 (add_operand -> .)
    MULT_BY         reduce using rule 51 (add_operand -> .)
    ADD             reduce using rule 51 (add_operand -> .)
    LESS            reduce using rule 51 (add_operand -> .)
    DOTCOMMA        reduce using rule 51 (add_operand -> .)

  ! DOTCOMMA        [ reduce using rule 66 (aux_int_check -> .) ]

    aux_int_check                  shift and go to state 99
    check_global_const_exists      shift and go to state 75
    add_operand                    shift and go to state 76

state 91

    (63) set_value -> INI_FLOAT . aux_float_check append_operand DOTCOMMA generate_quad
    (59) call_lets -> INI_FLOAT . check_global_const_exists
    (67) aux_float_check -> .
    (60) check_global_const_exists -> . add_operand
    (51) add_operand -> .

  ! reduce/reduce conflict for DOTCOMMA resolved using rule 51 (add_operand -> .)
    TIMES_BY_SAME   reduce using rule 51 (add_operand -> .)
    SPLIT_BY        reduce using rule 51 (add_operand -> .)
    MULT_BY         reduce using rule 51 (add_operand -> .)
    ADD             reduce using rule 51 (add_operand -> .)
    LESS            reduce using rule 51 (add_operand -> .)
    DOTCOMMA        reduce using rule 51 (add_operand -> .)

  ! DOTCOMMA        [ reduce using rule 67 (aux_float_check -> .) ]

    aux_float_check                shift and go to state 100
    check_global_const_exists      shift and go to state 77
    add_operand                    shift and go to state 76

state 92

    (34) aux_expresion -> ADD add_operator . expresion
    (32) expresion -> . term term_appear
    (33) expresion -> . term term_appear aux_expresion
    (36) term -> . fact factor_appear
    (37) term -> . fact factor_appear aux_term
    (40) fact -> . expo expo_appear
    (41) fact -> . expo expo_appear aux_expo
    (42) expo -> . parent_aux
    (43) expo -> . call_lets
    (44) parent_aux -> . LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent
    (58) call_lets -> . INI_INT check_global_const_exists
    (59) call_lets -> . INI_FLOAT check_global_const_exists

    LEFTPARENT      shift and go to state 64
    INI_INT         shift and go to state 65
    INI_FLOAT       shift and go to state 66

    expresion                      shift and go to state 101
    term                           shift and go to state 58
    fact                           shift and go to state 60
    expo                           shift and go to state 61
    parent_aux                     shift and go to state 62
    call_lets                      shift and go to state 63

state 93

    (35) aux_expresion -> LESS add_operator . expresion
    (32) expresion -> . term term_appear
    (33) expresion -> . term term_appear aux_expresion
    (36) term -> . fact factor_appear
    (37) term -> . fact factor_appear aux_term
    (40) fact -> . expo expo_appear
    (41) fact -> . expo expo_appear aux_expo
    (42) expo -> . parent_aux
    (43) expo -> . call_lets
    (44) parent_aux -> . LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent
    (58) call_lets -> . INI_INT check_global_const_exists
    (59) call_lets -> . INI_FLOAT check_global_const_exists

    LEFTPARENT      shift and go to state 64
    INI_INT         shift and go to state 65
    INI_FLOAT       shift and go to state 66

    expresion                      shift and go to state 102
    term                           shift and go to state 58
    fact                           shift and go to state 60
    expo                           shift and go to state 61
    parent_aux                     shift and go to state 62
    call_lets                      shift and go to state 63

state 94

    (38) aux_term -> SPLIT_BY add_operator . term
    (36) term -> . fact factor_appear
    (37) term -> . fact factor_appear aux_term
    (40) fact -> . expo expo_appear
    (41) fact -> . expo expo_appear aux_expo
    (42) expo -> . parent_aux
    (43) expo -> . call_lets
    (44) parent_aux -> . LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent
    (58) call_lets -> . INI_INT check_global_const_exists
    (59) call_lets -> . INI_FLOAT check_global_const_exists

    LEFTPARENT      shift and go to state 64
    INI_INT         shift and go to state 65
    INI_FLOAT       shift and go to state 66

    term                           shift and go to state 103
    fact                           shift and go to state 60
    expo                           shift and go to state 61
    parent_aux                     shift and go to state 62
    call_lets                      shift and go to state 63

state 95

    (39) aux_term -> MULT_BY add_operator . term
    (36) term -> . fact factor_appear
    (37) term -> . fact factor_appear aux_term
    (40) fact -> . expo expo_appear
    (41) fact -> . expo expo_appear aux_expo
    (42) expo -> . parent_aux
    (43) expo -> . call_lets
    (44) parent_aux -> . LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent
    (58) call_lets -> . INI_INT check_global_const_exists
    (59) call_lets -> . INI_FLOAT check_global_const_exists

    LEFTPARENT      shift and go to state 64
    INI_INT         shift and go to state 65
    INI_FLOAT       shift and go to state 66

    term                           shift and go to state 104
    fact                           shift and go to state 60
    expo                           shift and go to state 61
    parent_aux                     shift and go to state 62
    call_lets                      shift and go to state 63

state 96

    (47) aux_expo -> TIMES_BY_SAME add_operator . fact
    (40) fact -> . expo expo_appear
    (41) fact -> . expo expo_appear aux_expo
    (42) expo -> . parent_aux
    (43) expo -> . call_lets
    (44) parent_aux -> . LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent
    (58) call_lets -> . INI_INT check_global_const_exists
    (59) call_lets -> . INI_FLOAT check_global_const_exists

    LEFTPARENT      shift and go to state 64
    INI_INT         shift and go to state 65
    INI_FLOAT       shift and go to state 66

    fact                           shift and go to state 105
    expo                           shift and go to state 61
    parent_aux                     shift and go to state 62
    call_lets                      shift and go to state 63

state 97

    (44) parent_aux -> LEFTPARENT found_init_parent expresion RIGHTPARENT . found_end_parent
    (46) found_end_parent -> .

    TIMES_BY_SAME   reduce using rule 46 (found_end_parent -> .)
    SPLIT_BY        reduce using rule 46 (found_end_parent -> .)
    MULT_BY         reduce using rule 46 (found_end_parent -> .)
    ADD             reduce using rule 46 (found_end_parent -> .)
    LESS            reduce using rule 46 (found_end_parent -> .)
    ID              reduce using rule 46 (found_end_parent -> .)
    LEFTPARENT      reduce using rule 46 (found_end_parent -> .)
    INI_INT         reduce using rule 46 (found_end_parent -> .)
    INI_FLOAT       reduce using rule 46 (found_end_parent -> .)
    RIGHTKEY        reduce using rule 46 (found_end_parent -> .)
    RIGHTPARENT     reduce using rule 46 (found_end_parent -> .)
    DOTCOMMA        reduce using rule 46 (found_end_parent -> .)

    found_end_parent               shift and go to state 106

state 98

    (49) assign -> call_let set_appear SET expresion seen_final_asignacion . DOTCOMMA

    DOTCOMMA        shift and go to state 107


state 99

    (62) set_value -> INI_INT aux_int_check . append_operand DOTCOMMA generate_quad
    (64) append_operand -> .

    DOTCOMMA        reduce using rule 64 (append_operand -> .)

    append_operand                 shift and go to state 108

state 100

    (63) set_value -> INI_FLOAT aux_float_check . append_operand DOTCOMMA generate_quad
    (64) append_operand -> .

    DOTCOMMA        reduce using rule 64 (append_operand -> .)

    append_operand                 shift and go to state 109

state 101

    (34) aux_expresion -> ADD add_operator expresion .

    ID              reduce using rule 34 (aux_expresion -> ADD add_operator expresion .)
    LEFTPARENT      reduce using rule 34 (aux_expresion -> ADD add_operator expresion .)
    INI_INT         reduce using rule 34 (aux_expresion -> ADD add_operator expresion .)
    INI_FLOAT       reduce using rule 34 (aux_expresion -> ADD add_operator expresion .)
    RIGHTKEY        reduce using rule 34 (aux_expresion -> ADD add_operator expresion .)
    RIGHTPARENT     reduce using rule 34 (aux_expresion -> ADD add_operator expresion .)
    DOTCOMMA        reduce using rule 34 (aux_expresion -> ADD add_operator expresion .)


state 102

    (35) aux_expresion -> LESS add_operator expresion .

    ID              reduce using rule 35 (aux_expresion -> LESS add_operator expresion .)
    LEFTPARENT      reduce using rule 35 (aux_expresion -> LESS add_operator expresion .)
    INI_INT         reduce using rule 35 (aux_expresion -> LESS add_operator expresion .)
    INI_FLOAT       reduce using rule 35 (aux_expresion -> LESS add_operator expresion .)
    RIGHTKEY        reduce using rule 35 (aux_expresion -> LESS add_operator expresion .)
    RIGHTPARENT     reduce using rule 35 (aux_expresion -> LESS add_operator expresion .)
    DOTCOMMA        reduce using rule 35 (aux_expresion -> LESS add_operator expresion .)


state 103

    (38) aux_term -> SPLIT_BY add_operator term .

    ADD             reduce using rule 38 (aux_term -> SPLIT_BY add_operator term .)
    LESS            reduce using rule 38 (aux_term -> SPLIT_BY add_operator term .)
    ID              reduce using rule 38 (aux_term -> SPLIT_BY add_operator term .)
    LEFTPARENT      reduce using rule 38 (aux_term -> SPLIT_BY add_operator term .)
    INI_INT         reduce using rule 38 (aux_term -> SPLIT_BY add_operator term .)
    INI_FLOAT       reduce using rule 38 (aux_term -> SPLIT_BY add_operator term .)
    RIGHTKEY        reduce using rule 38 (aux_term -> SPLIT_BY add_operator term .)
    RIGHTPARENT     reduce using rule 38 (aux_term -> SPLIT_BY add_operator term .)
    DOTCOMMA        reduce using rule 38 (aux_term -> SPLIT_BY add_operator term .)


state 104

    (39) aux_term -> MULT_BY add_operator term .

    ADD             reduce using rule 39 (aux_term -> MULT_BY add_operator term .)
    LESS            reduce using rule 39 (aux_term -> MULT_BY add_operator term .)
    ID              reduce using rule 39 (aux_term -> MULT_BY add_operator term .)
    LEFTPARENT      reduce using rule 39 (aux_term -> MULT_BY add_operator term .)
    INI_INT         reduce using rule 39 (aux_term -> MULT_BY add_operator term .)
    INI_FLOAT       reduce using rule 39 (aux_term -> MULT_BY add_operator term .)
    RIGHTKEY        reduce using rule 39 (aux_term -> MULT_BY add_operator term .)
    RIGHTPARENT     reduce using rule 39 (aux_term -> MULT_BY add_operator term .)
    DOTCOMMA        reduce using rule 39 (aux_term -> MULT_BY add_operator term .)


state 105

    (47) aux_expo -> TIMES_BY_SAME add_operator fact .

    SPLIT_BY        reduce using rule 47 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    MULT_BY         reduce using rule 47 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    ADD             reduce using rule 47 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    LESS            reduce using rule 47 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    ID              reduce using rule 47 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    LEFTPARENT      reduce using rule 47 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    INI_INT         reduce using rule 47 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    INI_FLOAT       reduce using rule 47 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    RIGHTKEY        reduce using rule 47 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    RIGHTPARENT     reduce using rule 47 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    DOTCOMMA        reduce using rule 47 (aux_expo -> TIMES_BY_SAME add_operator fact .)


state 106

    (44) parent_aux -> LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent .

    TIMES_BY_SAME   reduce using rule 44 (parent_aux -> LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent .)
    SPLIT_BY        reduce using rule 44 (parent_aux -> LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent .)
    MULT_BY         reduce using rule 44 (parent_aux -> LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent .)
    ADD             reduce using rule 44 (parent_aux -> LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent .)
    LESS            reduce using rule 44 (parent_aux -> LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent .)
    ID              reduce using rule 44 (parent_aux -> LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent .)
    LEFTPARENT      reduce using rule 44 (parent_aux -> LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent .)
    INI_INT         reduce using rule 44 (parent_aux -> LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent .)
    INI_FLOAT       reduce using rule 44 (parent_aux -> LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent .)
    RIGHTKEY        reduce using rule 44 (parent_aux -> LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent .)
    RIGHTPARENT     reduce using rule 44 (parent_aux -> LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent .)
    DOTCOMMA        reduce using rule 44 (parent_aux -> LEFTPARENT found_init_parent expresion RIGHTPARENT found_end_parent .)


state 107

    (49) assign -> call_let set_appear SET expresion seen_final_asignacion DOTCOMMA .

    ID              reduce using rule 49 (assign -> call_let set_appear SET expresion seen_final_asignacion DOTCOMMA .)
    LEFTPARENT      reduce using rule 49 (assign -> call_let set_appear SET expresion seen_final_asignacion DOTCOMMA .)
    INI_INT         reduce using rule 49 (assign -> call_let set_appear SET expresion seen_final_asignacion DOTCOMMA .)
    INI_FLOAT       reduce using rule 49 (assign -> call_let set_appear SET expresion seen_final_asignacion DOTCOMMA .)
    RIGHTKEY        reduce using rule 49 (assign -> call_let set_appear SET expresion seen_final_asignacion DOTCOMMA .)


state 108

    (62) set_value -> INI_INT aux_int_check append_operand . DOTCOMMA generate_quad

    DOTCOMMA        shift and go to state 110


state 109

    (63) set_value -> INI_FLOAT aux_float_check append_operand . DOTCOMMA generate_quad

    DOTCOMMA        shift and go to state 111


state 110

    (62) set_value -> INI_INT aux_int_check append_operand DOTCOMMA . generate_quad
    (65) generate_quad -> .

    ID              reduce using rule 65 (generate_quad -> .)
    LEFTPARENT      reduce using rule 65 (generate_quad -> .)
    INI_INT         reduce using rule 65 (generate_quad -> .)
    INI_FLOAT       reduce using rule 65 (generate_quad -> .)
    RIGHTKEY        reduce using rule 65 (generate_quad -> .)

    generate_quad                  shift and go to state 112

state 111

    (63) set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA . generate_quad
    (65) generate_quad -> .

    ID              reduce using rule 65 (generate_quad -> .)
    LEFTPARENT      reduce using rule 65 (generate_quad -> .)
    INI_INT         reduce using rule 65 (generate_quad -> .)
    INI_FLOAT       reduce using rule 65 (generate_quad -> .)
    RIGHTKEY        reduce using rule 65 (generate_quad -> .)

    generate_quad                  shift and go to state 113

state 112

    (62) set_value -> INI_INT aux_int_check append_operand DOTCOMMA generate_quad .

    ID              reduce using rule 62 (set_value -> INI_INT aux_int_check append_operand DOTCOMMA generate_quad .)
    LEFTPARENT      reduce using rule 62 (set_value -> INI_INT aux_int_check append_operand DOTCOMMA generate_quad .)
    INI_INT         reduce using rule 62 (set_value -> INI_INT aux_int_check append_operand DOTCOMMA generate_quad .)
    INI_FLOAT       reduce using rule 62 (set_value -> INI_INT aux_int_check append_operand DOTCOMMA generate_quad .)
    RIGHTKEY        reduce using rule 62 (set_value -> INI_INT aux_int_check append_operand DOTCOMMA generate_quad .)


state 113

    (63) set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad .

    ID              reduce using rule 63 (set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad .)
    LEFTPARENT      reduce using rule 63 (set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad .)
    INI_INT         reduce using rule 63 (set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad .)
    INI_FLOAT       reduce using rule 63 (set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad .)
    RIGHTKEY        reduce using rule 63 (set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNC in state 6 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 10 resolved as shift
WARNING: reduce/reduce conflict in state 6 resolved using rule (modules -> <empty>)
WARNING: rejected rule (func -> <empty>) in state 6
WARNING: reduce/reduce conflict in state 10 resolved using rule (modules -> <empty>)
WARNING: rejected rule (func -> <empty>) in state 10
WARNING: reduce/reduce conflict in state 90 resolved using rule (add_operand -> <empty>)
WARNING: rejected rule (aux_int_check -> <empty>) in state 90
WARNING: reduce/reduce conflict in state 91 resolved using rule (add_operand -> <empty>)
WARNING: rejected rule (aux_float_check -> <empty>) in state 91
WARNING: Rule (func -> <empty>) is never reduced
WARNING: Rule (aux_int_check -> <empty>) is never reduced
WARNING: Rule (aux_float_check -> <empty>) is never reduced
