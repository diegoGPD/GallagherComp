Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DO
    ELSE
    GREATERTN
    IF
    IGNORE
    INI_BOOL
    INI_STRING
    LEFTBRACK
    LESSTN
    MAIN
    NOTSAME
    PRINTV
    RIGHTBRACK
    SAME
    WHILE

Grammar

Rule 0     S' -> compile
Rule 1     compile -> PROG ID seen_program DOTCOMMA lets modules
Rule 2     compile -> <empty>
Rule 3     modules -> func modules
Rule 4     modules -> <empty>
Rule 5     seen_program -> <empty>
Rule 6     lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets
Rule 7     lets -> empty
Rule 8     seen_lets -> <empty>
Rule 9     type -> INT seen_type
Rule 10    type -> FLOAT seen_type
Rule 11    type -> BOOL seen_type
Rule 12    seen_type -> <empty>
Rule 13    seen_ID_let -> <empty>
Rule 14    aux_let -> COMMA ID seen_ID_let aux_let
Rule 15    aux_let -> <empty>
Rule 16    func -> FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code
Rule 17    func -> <empty>
Rule 18    seen_func_name -> <empty>
Rule 19    params -> LEFTPARENT param_table_init param_declare RIGHTPARENT
Rule 20    param_table_init -> <empty>
Rule 21    param_declare -> type ID seen_ID_let param_declare
Rule 22    param_declare -> COMMA param_declare
Rule 23    param_declare -> empty
Rule 24    return_func_type -> type
Rule 25    return_func_type -> VOID void_detect
Rule 26    void_detect -> <empty>
Rule 27    func_code -> LEFTKEY func_code_aux RIGHTKEY
Rule 28    func_code_aux -> action func_code_aux
Rule 29    func_code_aux -> <empty>
Rule 30    action -> assign
Rule 31    action -> expresion
Rule 32    expresion -> term
Rule 33    expresion -> term aux_expresion
Rule 34    aux_expresion -> ADD add_operator expresion
Rule 35    aux_expresion -> LESS add_operator expresion
Rule 36    aux_expresion -> <empty>
Rule 37    term -> fact
Rule 38    aux_term -> SPLIT_BY add_operator term
Rule 39    aux_term -> MULT_BY add_operator term
Rule 40    fact -> call_lets
Rule 41    fact -> <empty>
Rule 42    assign -> call_let add_let_target set_appear SET set_value
Rule 43    assign -> <empty>
Rule 44    add_operand -> <empty>
Rule 45    add_let_target -> <empty>
Rule 46    add_operator -> <empty>
Rule 47    set_appear -> <empty>
Rule 48    call_let -> ID check_let_exists
Rule 49    call_let -> <empty>
Rule 50    call_lets -> INI_INT check_global_const_exists
Rule 51    call_lets -> INI_FLOAT check_global_const_exists
Rule 52    check_global_const_exists -> add_operand
Rule 53    check_let_exists -> <empty>
Rule 54    set_value -> INI_INT aux_int_check append_operand DOTCOMMA generate_quad
Rule 55    set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad
Rule 56    append_operand -> <empty>
Rule 57    generate_quad -> <empty>
Rule 58    aux_int_check -> <empty>
Rule 59    aux_float_check -> <empty>
Rule 60    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 34
BOOL                 : 11
COMMA                : 14 22
DO                   : 
DOTCOMMA             : 1 6 54 55
ELSE                 : 
FLOAT                : 10
FUNC                 : 16
GREATERTN            : 
ID                   : 1 6 14 16 21 48
IF                   : 
IGNORE               : 
INI_BOOL             : 
INI_FLOAT            : 51 55
INI_INT              : 50 54
INI_STRING           : 
INT                  : 9
LEFTBRACK            : 
LEFTKEY              : 27
LEFTPARENT           : 19
LESS                 : 35
LESSTN               : 
LET                  : 6
MAIN                 : 
MULT_BY              : 39
NOTSAME              : 
PRINTV               : 
PROG                 : 1
RIGHTBRACK           : 
RIGHTKEY             : 27
RIGHTPARENT          : 19
SAME                 : 
SET                  : 42
SPLIT_BY             : 38
TWOPOINTS            : 16 16
VOID                 : 25
WHILE                : 
error                : 

Nonterminals, with rules where they appear

action               : 28
add_let_target       : 42
add_operand          : 52
add_operator         : 34 35 38 39
append_operand       : 54 55
assign               : 30
aux_expresion        : 33
aux_float_check      : 55
aux_int_check        : 54
aux_let              : 6 14
aux_term             : 
call_let             : 42
call_lets            : 40
check_global_const_exists : 50 51
check_let_exists     : 48
compile              : 0
empty                : 7 23
expresion            : 31 34 35
fact                 : 37
func                 : 3
func_code            : 16
func_code_aux        : 27 28
generate_quad        : 54 55
lets                 : 1 6
modules              : 1 3
param_declare        : 19 21 22
param_table_init     : 19
params               : 16
return_func_type     : 16
seen_ID_let          : 6 14 21
seen_func_name       : 16
seen_lets            : 6
seen_program         : 1
seen_type            : 9 10 11
set_appear           : 42
set_value            : 42
term                 : 32 33 38 39
type                 : 6 21 24
void_detect          : 25

Parsing method: LALR

state 0

    (0) S' -> . compile
    (1) compile -> . PROG ID seen_program DOTCOMMA lets modules
    (2) compile -> .

    PROG            shift and go to state 2
    $end            reduce using rule 2 (compile -> .)

    compile                        shift and go to state 1

state 1

    (0) S' -> compile .



state 2

    (1) compile -> PROG . ID seen_program DOTCOMMA lets modules

    ID              shift and go to state 3


state 3

    (1) compile -> PROG ID . seen_program DOTCOMMA lets modules
    (5) seen_program -> .

    DOTCOMMA        reduce using rule 5 (seen_program -> .)

    seen_program                   shift and go to state 4

state 4

    (1) compile -> PROG ID seen_program . DOTCOMMA lets modules

    DOTCOMMA        shift and go to state 5


state 5

    (1) compile -> PROG ID seen_program DOTCOMMA . lets modules
    (6) lets -> . LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets
    (7) lets -> . empty
    (60) empty -> .

    LET             shift and go to state 7
    FUNC            reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)

    lets                           shift and go to state 6
    empty                          shift and go to state 8

state 6

    (1) compile -> PROG ID seen_program DOTCOMMA lets . modules
    (3) modules -> . func modules
    (4) modules -> .
    (16) func -> . FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code
    (17) func -> .

  ! shift/reduce conflict for FUNC resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 4 (modules -> .)
    $end            reduce using rule 4 (modules -> .)
    FUNC            shift and go to state 11

  ! FUNC            [ reduce using rule 17 (func -> .) ]
  ! $end            [ reduce using rule 17 (func -> .) ]

    modules                        shift and go to state 9
    func                           shift and go to state 10

state 7

    (6) lets -> LET . seen_lets type ID seen_ID_let aux_let DOTCOMMA lets
    (8) seen_lets -> .

    INT             reduce using rule 8 (seen_lets -> .)
    FLOAT           reduce using rule 8 (seen_lets -> .)
    BOOL            reduce using rule 8 (seen_lets -> .)

    seen_lets                      shift and go to state 12

state 8

    (7) lets -> empty .

    FUNC            reduce using rule 7 (lets -> empty .)
    $end            reduce using rule 7 (lets -> empty .)


state 9

    (1) compile -> PROG ID seen_program DOTCOMMA lets modules .

    $end            reduce using rule 1 (compile -> PROG ID seen_program DOTCOMMA lets modules .)


state 10

    (3) modules -> func . modules
    (3) modules -> . func modules
    (4) modules -> .
    (16) func -> . FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code
    (17) func -> .

  ! shift/reduce conflict for FUNC resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 4 (modules -> .)
    $end            reduce using rule 4 (modules -> .)
    FUNC            shift and go to state 11

  ! FUNC            [ reduce using rule 17 (func -> .) ]
  ! $end            [ reduce using rule 17 (func -> .) ]

    func                           shift and go to state 10
    modules                        shift and go to state 13

state 11

    (16) func -> FUNC . ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code

    ID              shift and go to state 14


state 12

    (6) lets -> LET seen_lets . type ID seen_ID_let aux_let DOTCOMMA lets
    (9) type -> . INT seen_type
    (10) type -> . FLOAT seen_type
    (11) type -> . BOOL seen_type

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18

    type                           shift and go to state 15

state 13

    (3) modules -> func modules .

    $end            reduce using rule 3 (modules -> func modules .)


state 14

    (16) func -> FUNC ID . seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code
    (18) seen_func_name -> .

    LEFTPARENT      reduce using rule 18 (seen_func_name -> .)

    seen_func_name                 shift and go to state 19

state 15

    (6) lets -> LET seen_lets type . ID seen_ID_let aux_let DOTCOMMA lets

    ID              shift and go to state 20


state 16

    (9) type -> INT . seen_type
    (12) seen_type -> .

    ID              reduce using rule 12 (seen_type -> .)
    TWOPOINTS       reduce using rule 12 (seen_type -> .)

    seen_type                      shift and go to state 21

state 17

    (10) type -> FLOAT . seen_type
    (12) seen_type -> .

    ID              reduce using rule 12 (seen_type -> .)
    TWOPOINTS       reduce using rule 12 (seen_type -> .)

    seen_type                      shift and go to state 22

state 18

    (11) type -> BOOL . seen_type
    (12) seen_type -> .

    ID              reduce using rule 12 (seen_type -> .)
    TWOPOINTS       reduce using rule 12 (seen_type -> .)

    seen_type                      shift and go to state 23

state 19

    (16) func -> FUNC ID seen_func_name . params TWOPOINTS return_func_type TWOPOINTS func_code
    (19) params -> . LEFTPARENT param_table_init param_declare RIGHTPARENT

    LEFTPARENT      shift and go to state 25

    params                         shift and go to state 24

state 20

    (6) lets -> LET seen_lets type ID . seen_ID_let aux_let DOTCOMMA lets
    (13) seen_ID_let -> .

    COMMA           reduce using rule 13 (seen_ID_let -> .)
    DOTCOMMA        reduce using rule 13 (seen_ID_let -> .)

    seen_ID_let                    shift and go to state 26

state 21

    (9) type -> INT seen_type .

    ID              reduce using rule 9 (type -> INT seen_type .)
    TWOPOINTS       reduce using rule 9 (type -> INT seen_type .)


state 22

    (10) type -> FLOAT seen_type .

    ID              reduce using rule 10 (type -> FLOAT seen_type .)
    TWOPOINTS       reduce using rule 10 (type -> FLOAT seen_type .)


state 23

    (11) type -> BOOL seen_type .

    ID              reduce using rule 11 (type -> BOOL seen_type .)
    TWOPOINTS       reduce using rule 11 (type -> BOOL seen_type .)


state 24

    (16) func -> FUNC ID seen_func_name params . TWOPOINTS return_func_type TWOPOINTS func_code

    TWOPOINTS       shift and go to state 27


state 25

    (19) params -> LEFTPARENT . param_table_init param_declare RIGHTPARENT
    (20) param_table_init -> .

    COMMA           reduce using rule 20 (param_table_init -> .)
    INT             reduce using rule 20 (param_table_init -> .)
    FLOAT           reduce using rule 20 (param_table_init -> .)
    BOOL            reduce using rule 20 (param_table_init -> .)
    RIGHTPARENT     reduce using rule 20 (param_table_init -> .)

    param_table_init               shift and go to state 28

state 26

    (6) lets -> LET seen_lets type ID seen_ID_let . aux_let DOTCOMMA lets
    (14) aux_let -> . COMMA ID seen_ID_let aux_let
    (15) aux_let -> .

    COMMA           shift and go to state 30
    DOTCOMMA        reduce using rule 15 (aux_let -> .)

    aux_let                        shift and go to state 29

state 27

    (16) func -> FUNC ID seen_func_name params TWOPOINTS . return_func_type TWOPOINTS func_code
    (24) return_func_type -> . type
    (25) return_func_type -> . VOID void_detect
    (9) type -> . INT seen_type
    (10) type -> . FLOAT seen_type
    (11) type -> . BOOL seen_type

    VOID            shift and go to state 33
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18

    return_func_type               shift and go to state 31
    type                           shift and go to state 32

state 28

    (19) params -> LEFTPARENT param_table_init . param_declare RIGHTPARENT
    (21) param_declare -> . type ID seen_ID_let param_declare
    (22) param_declare -> . COMMA param_declare
    (23) param_declare -> . empty
    (9) type -> . INT seen_type
    (10) type -> . FLOAT seen_type
    (11) type -> . BOOL seen_type
    (60) empty -> .

    COMMA           shift and go to state 36
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    RIGHTPARENT     reduce using rule 60 (empty -> .)

    param_declare                  shift and go to state 34
    type                           shift and go to state 35
    empty                          shift and go to state 37

state 29

    (6) lets -> LET seen_lets type ID seen_ID_let aux_let . DOTCOMMA lets

    DOTCOMMA        shift and go to state 38


state 30

    (14) aux_let -> COMMA . ID seen_ID_let aux_let

    ID              shift and go to state 39


state 31

    (16) func -> FUNC ID seen_func_name params TWOPOINTS return_func_type . TWOPOINTS func_code

    TWOPOINTS       shift and go to state 40


state 32

    (24) return_func_type -> type .

    TWOPOINTS       reduce using rule 24 (return_func_type -> type .)


state 33

    (25) return_func_type -> VOID . void_detect
    (26) void_detect -> .

    TWOPOINTS       reduce using rule 26 (void_detect -> .)

    void_detect                    shift and go to state 41

state 34

    (19) params -> LEFTPARENT param_table_init param_declare . RIGHTPARENT

    RIGHTPARENT     shift and go to state 42


state 35

    (21) param_declare -> type . ID seen_ID_let param_declare

    ID              shift and go to state 43


state 36

    (22) param_declare -> COMMA . param_declare
    (21) param_declare -> . type ID seen_ID_let param_declare
    (22) param_declare -> . COMMA param_declare
    (23) param_declare -> . empty
    (9) type -> . INT seen_type
    (10) type -> . FLOAT seen_type
    (11) type -> . BOOL seen_type
    (60) empty -> .

    COMMA           shift and go to state 36
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    RIGHTPARENT     reduce using rule 60 (empty -> .)

    param_declare                  shift and go to state 44
    type                           shift and go to state 35
    empty                          shift and go to state 37

state 37

    (23) param_declare -> empty .

    RIGHTPARENT     reduce using rule 23 (param_declare -> empty .)


state 38

    (6) lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA . lets
    (6) lets -> . LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets
    (7) lets -> . empty
    (60) empty -> .

    LET             shift and go to state 7
    FUNC            reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)

    lets                           shift and go to state 45
    empty                          shift and go to state 8

state 39

    (14) aux_let -> COMMA ID . seen_ID_let aux_let
    (13) seen_ID_let -> .

    COMMA           reduce using rule 13 (seen_ID_let -> .)
    DOTCOMMA        reduce using rule 13 (seen_ID_let -> .)

    seen_ID_let                    shift and go to state 46

state 40

    (16) func -> FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS . func_code
    (27) func_code -> . LEFTKEY func_code_aux RIGHTKEY

    LEFTKEY         shift and go to state 48

    func_code                      shift and go to state 47

state 41

    (25) return_func_type -> VOID void_detect .

    TWOPOINTS       reduce using rule 25 (return_func_type -> VOID void_detect .)


state 42

    (19) params -> LEFTPARENT param_table_init param_declare RIGHTPARENT .

    TWOPOINTS       reduce using rule 19 (params -> LEFTPARENT param_table_init param_declare RIGHTPARENT .)


state 43

    (21) param_declare -> type ID . seen_ID_let param_declare
    (13) seen_ID_let -> .

    COMMA           reduce using rule 13 (seen_ID_let -> .)
    INT             reduce using rule 13 (seen_ID_let -> .)
    FLOAT           reduce using rule 13 (seen_ID_let -> .)
    BOOL            reduce using rule 13 (seen_ID_let -> .)
    RIGHTPARENT     reduce using rule 13 (seen_ID_let -> .)

    seen_ID_let                    shift and go to state 49

state 44

    (22) param_declare -> COMMA param_declare .

    RIGHTPARENT     reduce using rule 22 (param_declare -> COMMA param_declare .)


state 45

    (6) lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .

    FUNC            reduce using rule 6 (lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .)
    $end            reduce using rule 6 (lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .)


state 46

    (14) aux_let -> COMMA ID seen_ID_let . aux_let
    (14) aux_let -> . COMMA ID seen_ID_let aux_let
    (15) aux_let -> .

    COMMA           shift and go to state 30
    DOTCOMMA        reduce using rule 15 (aux_let -> .)

    aux_let                        shift and go to state 50

state 47

    (16) func -> FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code .

    FUNC            reduce using rule 16 (func -> FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code .)
    $end            reduce using rule 16 (func -> FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code .)


state 48

    (27) func_code -> LEFTKEY . func_code_aux RIGHTKEY
    (28) func_code_aux -> . action func_code_aux
    (29) func_code_aux -> .
    (30) action -> . assign
    (31) action -> . expresion
    (42) assign -> . call_let add_let_target set_appear SET set_value
    (43) assign -> .
    (32) expresion -> . term
    (33) expresion -> . term aux_expresion
    (48) call_let -> . ID check_let_exists
    (49) call_let -> .
    (37) term -> . fact
    (40) fact -> . call_lets
    (41) fact -> .
    (50) call_lets -> . INI_INT check_global_const_exists
    (51) call_lets -> . INI_FLOAT check_global_const_exists

  ! reduce/reduce conflict for RIGHTKEY resolved using rule 29 (func_code_aux -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for SET resolved using rule 43 (assign -> .)
  ! reduce/reduce conflict for ADD resolved using rule 41 (fact -> .)
  ! reduce/reduce conflict for LESS resolved using rule 41 (fact -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for INI_INT resolved using rule 41 (fact -> .)
  ! reduce/reduce conflict for INI_FLOAT resolved using rule 41 (fact -> .)
  ! reduce/reduce conflict for SET resolved using rule 41 (fact -> .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 29 (func_code_aux -> .)
  ! shift/reduce conflict for INI_INT resolved as shift
  ! shift/reduce conflict for INI_FLOAT resolved as shift
    RIGHTKEY        reduce using rule 29 (func_code_aux -> .)
    ID              shift and go to state 57
    ADD             reduce using rule 41 (fact -> .)
    LESS            reduce using rule 41 (fact -> .)
    SET             reduce using rule 41 (fact -> .)
    INI_INT         shift and go to state 60
    INI_FLOAT       shift and go to state 61

  ! ID              [ reduce using rule 43 (assign -> .) ]
  ! INI_INT         [ reduce using rule 43 (assign -> .) ]
  ! INI_FLOAT       [ reduce using rule 43 (assign -> .) ]
  ! SET             [ reduce using rule 43 (assign -> .) ]
  ! ADD             [ reduce using rule 43 (assign -> .) ]
  ! LESS            [ reduce using rule 43 (assign -> .) ]
  ! RIGHTKEY        [ reduce using rule 43 (assign -> .) ]
  ! SET             [ reduce using rule 49 (call_let -> .) ]
  ! ID              [ reduce using rule 41 (fact -> .) ]
  ! INI_INT         [ reduce using rule 41 (fact -> .) ]
  ! INI_FLOAT       [ reduce using rule 41 (fact -> .) ]
  ! RIGHTKEY        [ reduce using rule 41 (fact -> .) ]

    func_code_aux                  shift and go to state 51
    action                         shift and go to state 52
    assign                         shift and go to state 53
    expresion                      shift and go to state 54
    call_let                       shift and go to state 55
    term                           shift and go to state 56
    fact                           shift and go to state 58
    call_lets                      shift and go to state 59

state 49

    (21) param_declare -> type ID seen_ID_let . param_declare
    (21) param_declare -> . type ID seen_ID_let param_declare
    (22) param_declare -> . COMMA param_declare
    (23) param_declare -> . empty
    (9) type -> . INT seen_type
    (10) type -> . FLOAT seen_type
    (11) type -> . BOOL seen_type
    (60) empty -> .

    COMMA           shift and go to state 36
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    RIGHTPARENT     reduce using rule 60 (empty -> .)

    type                           shift and go to state 35
    param_declare                  shift and go to state 62
    empty                          shift and go to state 37

state 50

    (14) aux_let -> COMMA ID seen_ID_let aux_let .

    DOTCOMMA        reduce using rule 14 (aux_let -> COMMA ID seen_ID_let aux_let .)


state 51

    (27) func_code -> LEFTKEY func_code_aux . RIGHTKEY

    RIGHTKEY        shift and go to state 63


state 52

    (28) func_code_aux -> action . func_code_aux
    (28) func_code_aux -> . action func_code_aux
    (29) func_code_aux -> .
    (30) action -> . assign
    (31) action -> . expresion
    (42) assign -> . call_let add_let_target set_appear SET set_value
    (43) assign -> .
    (32) expresion -> . term
    (33) expresion -> . term aux_expresion
    (48) call_let -> . ID check_let_exists
    (49) call_let -> .
    (37) term -> . fact
    (40) fact -> . call_lets
    (41) fact -> .
    (50) call_lets -> . INI_INT check_global_const_exists
    (51) call_lets -> . INI_FLOAT check_global_const_exists

  ! reduce/reduce conflict for RIGHTKEY resolved using rule 29 (func_code_aux -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for SET resolved using rule 43 (assign -> .)
  ! reduce/reduce conflict for ADD resolved using rule 41 (fact -> .)
  ! reduce/reduce conflict for LESS resolved using rule 41 (fact -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for INI_INT resolved using rule 41 (fact -> .)
  ! reduce/reduce conflict for INI_FLOAT resolved using rule 41 (fact -> .)
  ! reduce/reduce conflict for SET resolved using rule 41 (fact -> .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 29 (func_code_aux -> .)
  ! shift/reduce conflict for INI_INT resolved as shift
  ! shift/reduce conflict for INI_FLOAT resolved as shift
    RIGHTKEY        reduce using rule 29 (func_code_aux -> .)
    ID              shift and go to state 57
    ADD             reduce using rule 41 (fact -> .)
    LESS            reduce using rule 41 (fact -> .)
    SET             reduce using rule 41 (fact -> .)
    INI_INT         shift and go to state 60
    INI_FLOAT       shift and go to state 61

  ! ID              [ reduce using rule 43 (assign -> .) ]
  ! INI_INT         [ reduce using rule 43 (assign -> .) ]
  ! INI_FLOAT       [ reduce using rule 43 (assign -> .) ]
  ! SET             [ reduce using rule 43 (assign -> .) ]
  ! ADD             [ reduce using rule 43 (assign -> .) ]
  ! LESS            [ reduce using rule 43 (assign -> .) ]
  ! RIGHTKEY        [ reduce using rule 43 (assign -> .) ]
  ! SET             [ reduce using rule 49 (call_let -> .) ]
  ! ID              [ reduce using rule 41 (fact -> .) ]
  ! INI_INT         [ reduce using rule 41 (fact -> .) ]
  ! INI_FLOAT       [ reduce using rule 41 (fact -> .) ]
  ! RIGHTKEY        [ reduce using rule 41 (fact -> .) ]

    action                         shift and go to state 52
    func_code_aux                  shift and go to state 64
    assign                         shift and go to state 53
    expresion                      shift and go to state 54
    call_let                       shift and go to state 55
    term                           shift and go to state 56
    fact                           shift and go to state 58
    call_lets                      shift and go to state 59

state 53

    (30) action -> assign .

    ID              reduce using rule 30 (action -> assign .)
    INI_INT         reduce using rule 30 (action -> assign .)
    INI_FLOAT       reduce using rule 30 (action -> assign .)
    SET             reduce using rule 30 (action -> assign .)
    ADD             reduce using rule 30 (action -> assign .)
    LESS            reduce using rule 30 (action -> assign .)
    RIGHTKEY        reduce using rule 30 (action -> assign .)


state 54

    (31) action -> expresion .

    ID              reduce using rule 31 (action -> expresion .)
    INI_INT         reduce using rule 31 (action -> expresion .)
    INI_FLOAT       reduce using rule 31 (action -> expresion .)
    SET             reduce using rule 31 (action -> expresion .)
    ADD             reduce using rule 31 (action -> expresion .)
    LESS            reduce using rule 31 (action -> expresion .)
    RIGHTKEY        reduce using rule 31 (action -> expresion .)


state 55

    (42) assign -> call_let . add_let_target set_appear SET set_value
    (45) add_let_target -> .

    SET             reduce using rule 45 (add_let_target -> .)

    add_let_target                 shift and go to state 65

state 56

    (32) expresion -> term .
    (33) expresion -> term . aux_expresion
    (34) aux_expresion -> . ADD add_operator expresion
    (35) aux_expresion -> . LESS add_operator expresion
    (36) aux_expresion -> .

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! reduce/reduce conflict for ID resolved using rule 32 (expresion -> term .)
  ! reduce/reduce conflict for INI_INT resolved using rule 32 (expresion -> term .)
  ! reduce/reduce conflict for INI_FLOAT resolved using rule 32 (expresion -> term .)
  ! reduce/reduce conflict for SET resolved using rule 32 (expresion -> term .)
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 32 (expresion -> term .)
    ID              reduce using rule 32 (expresion -> term .)
    INI_INT         reduce using rule 32 (expresion -> term .)
    INI_FLOAT       reduce using rule 32 (expresion -> term .)
    SET             reduce using rule 32 (expresion -> term .)
    RIGHTKEY        reduce using rule 32 (expresion -> term .)
    ADD             shift and go to state 67
    LESS            shift and go to state 68

  ! ADD             [ reduce using rule 32 (expresion -> term .) ]
  ! LESS            [ reduce using rule 32 (expresion -> term .) ]
  ! ID              [ reduce using rule 36 (aux_expresion -> .) ]
  ! INI_INT         [ reduce using rule 36 (aux_expresion -> .) ]
  ! INI_FLOAT       [ reduce using rule 36 (aux_expresion -> .) ]
  ! SET             [ reduce using rule 36 (aux_expresion -> .) ]
  ! ADD             [ reduce using rule 36 (aux_expresion -> .) ]
  ! LESS            [ reduce using rule 36 (aux_expresion -> .) ]
  ! RIGHTKEY        [ reduce using rule 36 (aux_expresion -> .) ]

    aux_expresion                  shift and go to state 66

state 57

    (48) call_let -> ID . check_let_exists
    (53) check_let_exists -> .

    SET             reduce using rule 53 (check_let_exists -> .)

    check_let_exists               shift and go to state 69

state 58

    (37) term -> fact .

    ADD             reduce using rule 37 (term -> fact .)
    LESS            reduce using rule 37 (term -> fact .)
    ID              reduce using rule 37 (term -> fact .)
    INI_INT         reduce using rule 37 (term -> fact .)
    INI_FLOAT       reduce using rule 37 (term -> fact .)
    SET             reduce using rule 37 (term -> fact .)
    RIGHTKEY        reduce using rule 37 (term -> fact .)


state 59

    (40) fact -> call_lets .

    ADD             reduce using rule 40 (fact -> call_lets .)
    LESS            reduce using rule 40 (fact -> call_lets .)
    ID              reduce using rule 40 (fact -> call_lets .)
    INI_INT         reduce using rule 40 (fact -> call_lets .)
    INI_FLOAT       reduce using rule 40 (fact -> call_lets .)
    SET             reduce using rule 40 (fact -> call_lets .)
    RIGHTKEY        reduce using rule 40 (fact -> call_lets .)


state 60

    (50) call_lets -> INI_INT . check_global_const_exists
    (52) check_global_const_exists -> . add_operand
    (44) add_operand -> .

    ADD             reduce using rule 44 (add_operand -> .)
    LESS            reduce using rule 44 (add_operand -> .)
    ID              reduce using rule 44 (add_operand -> .)
    INI_INT         reduce using rule 44 (add_operand -> .)
    INI_FLOAT       reduce using rule 44 (add_operand -> .)
    SET             reduce using rule 44 (add_operand -> .)
    RIGHTKEY        reduce using rule 44 (add_operand -> .)

    check_global_const_exists      shift and go to state 70
    add_operand                    shift and go to state 71

state 61

    (51) call_lets -> INI_FLOAT . check_global_const_exists
    (52) check_global_const_exists -> . add_operand
    (44) add_operand -> .

    ADD             reduce using rule 44 (add_operand -> .)
    LESS            reduce using rule 44 (add_operand -> .)
    ID              reduce using rule 44 (add_operand -> .)
    INI_INT         reduce using rule 44 (add_operand -> .)
    INI_FLOAT       reduce using rule 44 (add_operand -> .)
    SET             reduce using rule 44 (add_operand -> .)
    RIGHTKEY        reduce using rule 44 (add_operand -> .)

    check_global_const_exists      shift and go to state 72
    add_operand                    shift and go to state 71

state 62

    (21) param_declare -> type ID seen_ID_let param_declare .

    RIGHTPARENT     reduce using rule 21 (param_declare -> type ID seen_ID_let param_declare .)


state 63

    (27) func_code -> LEFTKEY func_code_aux RIGHTKEY .

    FUNC            reduce using rule 27 (func_code -> LEFTKEY func_code_aux RIGHTKEY .)
    $end            reduce using rule 27 (func_code -> LEFTKEY func_code_aux RIGHTKEY .)


state 64

    (28) func_code_aux -> action func_code_aux .

    RIGHTKEY        reduce using rule 28 (func_code_aux -> action func_code_aux .)


state 65

    (42) assign -> call_let add_let_target . set_appear SET set_value
    (47) set_appear -> .

    SET             reduce using rule 47 (set_appear -> .)

    set_appear                     shift and go to state 73

state 66

    (33) expresion -> term aux_expresion .

    ID              reduce using rule 33 (expresion -> term aux_expresion .)
    INI_INT         reduce using rule 33 (expresion -> term aux_expresion .)
    INI_FLOAT       reduce using rule 33 (expresion -> term aux_expresion .)
    SET             reduce using rule 33 (expresion -> term aux_expresion .)
    ADD             reduce using rule 33 (expresion -> term aux_expresion .)
    LESS            reduce using rule 33 (expresion -> term aux_expresion .)
    RIGHTKEY        reduce using rule 33 (expresion -> term aux_expresion .)


state 67

    (34) aux_expresion -> ADD . add_operator expresion
    (46) add_operator -> .

    INI_INT         reduce using rule 46 (add_operator -> .)
    INI_FLOAT       reduce using rule 46 (add_operator -> .)
    ADD             reduce using rule 46 (add_operator -> .)
    LESS            reduce using rule 46 (add_operator -> .)
    ID              reduce using rule 46 (add_operator -> .)
    SET             reduce using rule 46 (add_operator -> .)
    RIGHTKEY        reduce using rule 46 (add_operator -> .)

    add_operator                   shift and go to state 74

state 68

    (35) aux_expresion -> LESS . add_operator expresion
    (46) add_operator -> .

    INI_INT         reduce using rule 46 (add_operator -> .)
    INI_FLOAT       reduce using rule 46 (add_operator -> .)
    ADD             reduce using rule 46 (add_operator -> .)
    LESS            reduce using rule 46 (add_operator -> .)
    ID              reduce using rule 46 (add_operator -> .)
    SET             reduce using rule 46 (add_operator -> .)
    RIGHTKEY        reduce using rule 46 (add_operator -> .)

    add_operator                   shift and go to state 75

state 69

    (48) call_let -> ID check_let_exists .

    SET             reduce using rule 48 (call_let -> ID check_let_exists .)


state 70

    (50) call_lets -> INI_INT check_global_const_exists .

    ADD             reduce using rule 50 (call_lets -> INI_INT check_global_const_exists .)
    LESS            reduce using rule 50 (call_lets -> INI_INT check_global_const_exists .)
    ID              reduce using rule 50 (call_lets -> INI_INT check_global_const_exists .)
    INI_INT         reduce using rule 50 (call_lets -> INI_INT check_global_const_exists .)
    INI_FLOAT       reduce using rule 50 (call_lets -> INI_INT check_global_const_exists .)
    SET             reduce using rule 50 (call_lets -> INI_INT check_global_const_exists .)
    RIGHTKEY        reduce using rule 50 (call_lets -> INI_INT check_global_const_exists .)


state 71

    (52) check_global_const_exists -> add_operand .

    ADD             reduce using rule 52 (check_global_const_exists -> add_operand .)
    LESS            reduce using rule 52 (check_global_const_exists -> add_operand .)
    ID              reduce using rule 52 (check_global_const_exists -> add_operand .)
    INI_INT         reduce using rule 52 (check_global_const_exists -> add_operand .)
    INI_FLOAT       reduce using rule 52 (check_global_const_exists -> add_operand .)
    SET             reduce using rule 52 (check_global_const_exists -> add_operand .)
    RIGHTKEY        reduce using rule 52 (check_global_const_exists -> add_operand .)


state 72

    (51) call_lets -> INI_FLOAT check_global_const_exists .

    ADD             reduce using rule 51 (call_lets -> INI_FLOAT check_global_const_exists .)
    LESS            reduce using rule 51 (call_lets -> INI_FLOAT check_global_const_exists .)
    ID              reduce using rule 51 (call_lets -> INI_FLOAT check_global_const_exists .)
    INI_INT         reduce using rule 51 (call_lets -> INI_FLOAT check_global_const_exists .)
    INI_FLOAT       reduce using rule 51 (call_lets -> INI_FLOAT check_global_const_exists .)
    SET             reduce using rule 51 (call_lets -> INI_FLOAT check_global_const_exists .)
    RIGHTKEY        reduce using rule 51 (call_lets -> INI_FLOAT check_global_const_exists .)


state 73

    (42) assign -> call_let add_let_target set_appear . SET set_value

    SET             shift and go to state 76


state 74

    (34) aux_expresion -> ADD add_operator . expresion
    (32) expresion -> . term
    (33) expresion -> . term aux_expresion
    (37) term -> . fact
    (40) fact -> . call_lets
    (41) fact -> .
    (50) call_lets -> . INI_INT check_global_const_exists
    (51) call_lets -> . INI_FLOAT check_global_const_exists

  ! shift/reduce conflict for INI_INT resolved as shift
  ! shift/reduce conflict for INI_FLOAT resolved as shift
    ADD             reduce using rule 41 (fact -> .)
    LESS            reduce using rule 41 (fact -> .)
    ID              reduce using rule 41 (fact -> .)
    SET             reduce using rule 41 (fact -> .)
    RIGHTKEY        reduce using rule 41 (fact -> .)
    INI_INT         shift and go to state 60
    INI_FLOAT       shift and go to state 61

  ! INI_INT         [ reduce using rule 41 (fact -> .) ]
  ! INI_FLOAT       [ reduce using rule 41 (fact -> .) ]

    expresion                      shift and go to state 77
    term                           shift and go to state 56
    fact                           shift and go to state 58
    call_lets                      shift and go to state 59

state 75

    (35) aux_expresion -> LESS add_operator . expresion
    (32) expresion -> . term
    (33) expresion -> . term aux_expresion
    (37) term -> . fact
    (40) fact -> . call_lets
    (41) fact -> .
    (50) call_lets -> . INI_INT check_global_const_exists
    (51) call_lets -> . INI_FLOAT check_global_const_exists

  ! shift/reduce conflict for INI_INT resolved as shift
  ! shift/reduce conflict for INI_FLOAT resolved as shift
    ADD             reduce using rule 41 (fact -> .)
    LESS            reduce using rule 41 (fact -> .)
    ID              reduce using rule 41 (fact -> .)
    SET             reduce using rule 41 (fact -> .)
    RIGHTKEY        reduce using rule 41 (fact -> .)
    INI_INT         shift and go to state 60
    INI_FLOAT       shift and go to state 61

  ! INI_INT         [ reduce using rule 41 (fact -> .) ]
  ! INI_FLOAT       [ reduce using rule 41 (fact -> .) ]

    expresion                      shift and go to state 78
    term                           shift and go to state 56
    fact                           shift and go to state 58
    call_lets                      shift and go to state 59

state 76

    (42) assign -> call_let add_let_target set_appear SET . set_value
    (54) set_value -> . INI_INT aux_int_check append_operand DOTCOMMA generate_quad
    (55) set_value -> . INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad

    INI_INT         shift and go to state 80
    INI_FLOAT       shift and go to state 81

    set_value                      shift and go to state 79

state 77

    (34) aux_expresion -> ADD add_operator expresion .

    ID              reduce using rule 34 (aux_expresion -> ADD add_operator expresion .)
    INI_INT         reduce using rule 34 (aux_expresion -> ADD add_operator expresion .)
    INI_FLOAT       reduce using rule 34 (aux_expresion -> ADD add_operator expresion .)
    SET             reduce using rule 34 (aux_expresion -> ADD add_operator expresion .)
    ADD             reduce using rule 34 (aux_expresion -> ADD add_operator expresion .)
    LESS            reduce using rule 34 (aux_expresion -> ADD add_operator expresion .)
    RIGHTKEY        reduce using rule 34 (aux_expresion -> ADD add_operator expresion .)


state 78

    (35) aux_expresion -> LESS add_operator expresion .

    ID              reduce using rule 35 (aux_expresion -> LESS add_operator expresion .)
    INI_INT         reduce using rule 35 (aux_expresion -> LESS add_operator expresion .)
    INI_FLOAT       reduce using rule 35 (aux_expresion -> LESS add_operator expresion .)
    SET             reduce using rule 35 (aux_expresion -> LESS add_operator expresion .)
    ADD             reduce using rule 35 (aux_expresion -> LESS add_operator expresion .)
    LESS            reduce using rule 35 (aux_expresion -> LESS add_operator expresion .)
    RIGHTKEY        reduce using rule 35 (aux_expresion -> LESS add_operator expresion .)


state 79

    (42) assign -> call_let add_let_target set_appear SET set_value .

    ID              reduce using rule 42 (assign -> call_let add_let_target set_appear SET set_value .)
    INI_INT         reduce using rule 42 (assign -> call_let add_let_target set_appear SET set_value .)
    INI_FLOAT       reduce using rule 42 (assign -> call_let add_let_target set_appear SET set_value .)
    SET             reduce using rule 42 (assign -> call_let add_let_target set_appear SET set_value .)
    ADD             reduce using rule 42 (assign -> call_let add_let_target set_appear SET set_value .)
    LESS            reduce using rule 42 (assign -> call_let add_let_target set_appear SET set_value .)
    RIGHTKEY        reduce using rule 42 (assign -> call_let add_let_target set_appear SET set_value .)


state 80

    (54) set_value -> INI_INT . aux_int_check append_operand DOTCOMMA generate_quad
    (58) aux_int_check -> .

    DOTCOMMA        reduce using rule 58 (aux_int_check -> .)

    aux_int_check                  shift and go to state 82

state 81

    (55) set_value -> INI_FLOAT . aux_float_check append_operand DOTCOMMA generate_quad
    (59) aux_float_check -> .

    DOTCOMMA        reduce using rule 59 (aux_float_check -> .)

    aux_float_check                shift and go to state 83

state 82

    (54) set_value -> INI_INT aux_int_check . append_operand DOTCOMMA generate_quad
    (56) append_operand -> .

    DOTCOMMA        reduce using rule 56 (append_operand -> .)

    append_operand                 shift and go to state 84

state 83

    (55) set_value -> INI_FLOAT aux_float_check . append_operand DOTCOMMA generate_quad
    (56) append_operand -> .

    DOTCOMMA        reduce using rule 56 (append_operand -> .)

    append_operand                 shift and go to state 85

state 84

    (54) set_value -> INI_INT aux_int_check append_operand . DOTCOMMA generate_quad

    DOTCOMMA        shift and go to state 86


state 85

    (55) set_value -> INI_FLOAT aux_float_check append_operand . DOTCOMMA generate_quad

    DOTCOMMA        shift and go to state 87


state 86

    (54) set_value -> INI_INT aux_int_check append_operand DOTCOMMA . generate_quad
    (57) generate_quad -> .

    ID              reduce using rule 57 (generate_quad -> .)
    INI_INT         reduce using rule 57 (generate_quad -> .)
    INI_FLOAT       reduce using rule 57 (generate_quad -> .)
    SET             reduce using rule 57 (generate_quad -> .)
    ADD             reduce using rule 57 (generate_quad -> .)
    LESS            reduce using rule 57 (generate_quad -> .)
    RIGHTKEY        reduce using rule 57 (generate_quad -> .)

    generate_quad                  shift and go to state 88

state 87

    (55) set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA . generate_quad
    (57) generate_quad -> .

    ID              reduce using rule 57 (generate_quad -> .)
    INI_INT         reduce using rule 57 (generate_quad -> .)
    INI_FLOAT       reduce using rule 57 (generate_quad -> .)
    SET             reduce using rule 57 (generate_quad -> .)
    ADD             reduce using rule 57 (generate_quad -> .)
    LESS            reduce using rule 57 (generate_quad -> .)
    RIGHTKEY        reduce using rule 57 (generate_quad -> .)

    generate_quad                  shift and go to state 89

state 88

    (54) set_value -> INI_INT aux_int_check append_operand DOTCOMMA generate_quad .

    ID              reduce using rule 54 (set_value -> INI_INT aux_int_check append_operand DOTCOMMA generate_quad .)
    INI_INT         reduce using rule 54 (set_value -> INI_INT aux_int_check append_operand DOTCOMMA generate_quad .)
    INI_FLOAT       reduce using rule 54 (set_value -> INI_INT aux_int_check append_operand DOTCOMMA generate_quad .)
    SET             reduce using rule 54 (set_value -> INI_INT aux_int_check append_operand DOTCOMMA generate_quad .)
    ADD             reduce using rule 54 (set_value -> INI_INT aux_int_check append_operand DOTCOMMA generate_quad .)
    LESS            reduce using rule 54 (set_value -> INI_INT aux_int_check append_operand DOTCOMMA generate_quad .)
    RIGHTKEY        reduce using rule 54 (set_value -> INI_INT aux_int_check append_operand DOTCOMMA generate_quad .)


state 89

    (55) set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad .

    ID              reduce using rule 55 (set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad .)
    INI_INT         reduce using rule 55 (set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad .)
    INI_FLOAT       reduce using rule 55 (set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad .)
    SET             reduce using rule 55 (set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad .)
    ADD             reduce using rule 55 (set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad .)
    LESS            reduce using rule 55 (set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad .)
    RIGHTKEY        reduce using rule 55 (set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA generate_quad .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNC in state 6 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 10 resolved as shift
WARNING: shift/reduce conflict for ID in state 48 resolved as shift
WARNING: shift/reduce conflict for ID in state 48 resolved as shift
WARNING: shift/reduce conflict for INI_INT in state 48 resolved as shift
WARNING: shift/reduce conflict for INI_FLOAT in state 48 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for INI_INT in state 52 resolved as shift
WARNING: shift/reduce conflict for INI_FLOAT in state 52 resolved as shift
WARNING: shift/reduce conflict for ADD in state 56 resolved as shift
WARNING: shift/reduce conflict for LESS in state 56 resolved as shift
WARNING: shift/reduce conflict for ADD in state 56 resolved as shift
WARNING: shift/reduce conflict for LESS in state 56 resolved as shift
WARNING: shift/reduce conflict for INI_INT in state 74 resolved as shift
WARNING: shift/reduce conflict for INI_FLOAT in state 74 resolved as shift
WARNING: shift/reduce conflict for INI_INT in state 75 resolved as shift
WARNING: shift/reduce conflict for INI_FLOAT in state 75 resolved as shift
WARNING: reduce/reduce conflict in state 6 resolved using rule (modules -> <empty>)
WARNING: rejected rule (func -> <empty>) in state 6
WARNING: reduce/reduce conflict in state 10 resolved using rule (modules -> <empty>)
WARNING: rejected rule (func -> <empty>) in state 10
WARNING: reduce/reduce conflict in state 48 resolved using rule (func_code_aux -> <empty>)
WARNING: rejected rule (assign -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 48 resolved using rule (assign -> <empty>)
WARNING: rejected rule (call_let -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 48 resolved using rule (fact -> <empty>)
WARNING: rejected rule (assign -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 48 resolved using rule (func_code_aux -> <empty>)
WARNING: rejected rule (fact -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 52 resolved using rule (func_code_aux -> <empty>)
WARNING: rejected rule (assign -> <empty>) in state 52
WARNING: reduce/reduce conflict in state 52 resolved using rule (assign -> <empty>)
WARNING: rejected rule (call_let -> <empty>) in state 52
WARNING: reduce/reduce conflict in state 52 resolved using rule (fact -> <empty>)
WARNING: rejected rule (assign -> <empty>) in state 52
WARNING: reduce/reduce conflict in state 52 resolved using rule (func_code_aux -> <empty>)
WARNING: rejected rule (fact -> <empty>) in state 52
WARNING: reduce/reduce conflict in state 56 resolved using rule (expresion -> term)
WARNING: rejected rule (aux_expresion -> <empty>) in state 56
WARNING: Rule (func -> <empty>) is never reduced
WARNING: Rule (assign -> <empty>) is never reduced
WARNING: Rule (call_let -> <empty>) is never reduced
WARNING: Rule (aux_expresion -> <empty>) is never reduced
