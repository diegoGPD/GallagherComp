Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DO
    GOTO
    GOTOF
    GOTOT
    IGNOREGOTOFUNC
    INI_BOOL
    INI_STRING
    LEFTBRACK
    MAIN
    PRINTV
    RIGHTBRACK

Grammar

Rule 0     S' -> compile
Rule 1     compile -> PROG ID seen_program DOTCOMMA lets modules
Rule 2     compile -> <empty>
Rule 3     modules -> func modules
Rule 4     modules -> <empty>
Rule 5     seen_program -> <empty>
Rule 6     lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets
Rule 7     lets -> empty
Rule 8     seen_lets -> <empty>
Rule 9     type -> INT seen_type
Rule 10    type -> FLOAT seen_type
Rule 11    type -> BOOL seen_type
Rule 12    seen_type -> <empty>
Rule 13    seen_ID_let -> <empty>
Rule 14    aux_let -> COMMA ID seen_ID_let aux_let
Rule 15    aux_let -> <empty>
Rule 16    func -> FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code
Rule 17    seen_func_name -> <empty>
Rule 18    params -> LEFTPARENT param_table_init param_declare RIGHTPARENT
Rule 19    param_table_init -> <empty>
Rule 20    param_declare -> type ID seen_ID_let param_declare
Rule 21    param_declare -> COMMA param_declare
Rule 22    param_declare -> empty
Rule 23    return_func_type -> type
Rule 24    return_func_type -> VOID void_detect
Rule 25    void_detect -> <empty>
Rule 26    func_code -> LEFTKEY lets func_code_aux RIGHTKEY
Rule 27    func_code_aux -> action func_code_aux
Rule 28    func_code_aux -> <empty>
Rule 29    action -> assign
Rule 30    action -> expresion_line
Rule 31    action -> condition
Rule 32    action -> while
Rule 33    while -> WHILE while_appear LEFTPARENT condition_expresion right_parent_condition RIGHTPARENT func_code end_cond
Rule 34    while_appear -> <empty>
Rule 35    condition -> IF LEFTPARENT found_init_parent condition_expresion right_parent_condition RIGHTPARENT func_code end_cond condition_end_check
Rule 36    condtion_appear -> <empty>
Rule 37    condition_end_check -> ELSE func_code end_condition
Rule 38    condition_end_check -> <empty>
Rule 39    end_condition -> <empty>
Rule 40    end_cond -> <empty>
Rule 41    condition_signs -> GREATERTN add_operator
Rule 42    condition_signs -> LESSTN add_operator
Rule 43    condition_signs -> SAME add_operator
Rule 44    condition_signs -> NOTSAME add_operator
Rule 45    condition_signs -> <empty>
Rule 46    condition_expresion -> expresion_line condtion_appear
Rule 47    condition_expresion -> expresion_line condition_signs expresion_line condtion_appear
Rule 48    expresion_line -> term term_appear
Rule 49    expresion_line -> term term_appear aux_expresion
Rule 50    aux_expresion -> ADD add_operator expresion_line
Rule 51    aux_expresion -> LESS add_operator expresion_line
Rule 52    term -> fact factor_appear
Rule 53    term -> fact factor_appear aux_term
Rule 54    aux_term -> SPLIT_BY add_operator term
Rule 55    aux_term -> MULT_BY add_operator term
Rule 56    fact -> expo expo_appear
Rule 57    fact -> expo expo_appear aux_expo
Rule 58    expo -> parent_aux
Rule 59    expo -> call_lets
Rule 60    expo -> call_let
Rule 61    parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent
Rule 62    right_parent_condition -> <empty>
Rule 63    found_init_parent -> <empty>
Rule 64    found_end_parent -> <empty>
Rule 65    aux_expo -> TIMES_BY_SAME add_operator fact
Rule 66    assign -> call_let set_appear SET set_value
Rule 67    assign -> call_let set_appear SET expresion_line seen_final_asignacion DOTCOMMA
Rule 68    seen_final_asignacion -> <empty>
Rule 69    add_operand -> <empty>
Rule 70    add_operator -> <empty>
Rule 71    set_appear -> <empty>
Rule 72    term_appear -> <empty>
Rule 73    factor_appear -> <empty>
Rule 74    expo_appear -> <empty>
Rule 75    call_let -> ID check_let_exists
Rule 76    call_lets -> INI_INT check_global_const_exists
Rule 77    call_lets -> INI_FLOAT check_global_const_exists
Rule 78    check_global_const_exists -> add_operand
Rule 79    check_let_exists -> <empty>
Rule 80    set_value -> INI_INT aux_int_check append_operand DOTCOMMA
Rule 81    set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA
Rule 82    append_operand -> <empty>
Rule 83    aux_int_check -> <empty>
Rule 84    aux_float_check -> <empty>
Rule 85    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 50
BOOL                 : 11
COMMA                : 14 21
DO                   : 
DOTCOMMA             : 1 6 67 80 81
ELSE                 : 37
FLOAT                : 10
FUNC                 : 16
GOTO                 : 
GOTOF                : 
GOTOT                : 
GREATERTN            : 41
ID                   : 1 6 14 16 20 75
IF                   : 35
IGNOREGOTOFUNC       : 
INI_BOOL             : 
INI_FLOAT            : 77 81
INI_INT              : 76 80
INI_STRING           : 
INT                  : 9
LEFTBRACK            : 
LEFTKEY              : 26
LEFTPARENT           : 18 33 35 61
LESS                 : 51
LESSTN               : 42
LET                  : 6
MAIN                 : 
MULT_BY              : 55
NOTSAME              : 44
PRINTV               : 
PROG                 : 1
RIGHTBRACK           : 
RIGHTKEY             : 26
RIGHTPARENT          : 18 33 35 61
SAME                 : 43
SET                  : 66 67
SPLIT_BY             : 54
TIMES_BY_SAME        : 65
TWOPOINTS            : 16 16
VOID                 : 24
WHILE                : 33
error                : 

Nonterminals, with rules where they appear

action               : 27
add_operand          : 78
add_operator         : 41 42 43 44 50 51 54 55 65
append_operand       : 80 81
assign               : 29
aux_expo             : 57
aux_expresion        : 49
aux_float_check      : 81
aux_int_check        : 80
aux_let              : 6 14
aux_term             : 53
call_let             : 60 66 67
call_lets            : 59
check_global_const_exists : 76 77
check_let_exists     : 75
compile              : 0
condition            : 31
condition_end_check  : 35
condition_expresion  : 33 35
condition_signs      : 47
condtion_appear      : 46 47
empty                : 7 22
end_cond             : 33 35
end_condition        : 37
expo                 : 56 57
expo_appear          : 56 57
expresion_line       : 30 46 47 47 50 51 61 67
fact                 : 52 53 65
factor_appear        : 52 53
found_end_parent     : 61
found_init_parent    : 35 61
func                 : 3
func_code            : 16 33 35 37
func_code_aux        : 26 27
lets                 : 1 6 26
modules              : 1 3
param_declare        : 18 20 21
param_table_init     : 18
params               : 16
parent_aux           : 58
return_func_type     : 16
right_parent_condition : 33 35
seen_ID_let          : 6 14 20
seen_final_asignacion : 67
seen_func_name       : 16
seen_lets            : 6
seen_program         : 1
seen_type            : 9 10 11
set_appear           : 66 67
set_value            : 66
term                 : 48 49 54 55
term_appear          : 48 49
type                 : 6 20 23
void_detect          : 24
while                : 32
while_appear         : 33

Parsing method: LALR

state 0

    (0) S' -> . compile
    (1) compile -> . PROG ID seen_program DOTCOMMA lets modules
    (2) compile -> .

    PROG            shift and go to state 2
    $end            reduce using rule 2 (compile -> .)

    compile                        shift and go to state 1

state 1

    (0) S' -> compile .



state 2

    (1) compile -> PROG . ID seen_program DOTCOMMA lets modules

    ID              shift and go to state 3


state 3

    (1) compile -> PROG ID . seen_program DOTCOMMA lets modules
    (5) seen_program -> .

    DOTCOMMA        reduce using rule 5 (seen_program -> .)

    seen_program                   shift and go to state 4

state 4

    (1) compile -> PROG ID seen_program . DOTCOMMA lets modules

    DOTCOMMA        shift and go to state 5


state 5

    (1) compile -> PROG ID seen_program DOTCOMMA . lets modules
    (6) lets -> . LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets
    (7) lets -> . empty
    (85) empty -> .

    LET             shift and go to state 7
    FUNC            reduce using rule 85 (empty -> .)
    $end            reduce using rule 85 (empty -> .)

    lets                           shift and go to state 6
    empty                          shift and go to state 8

state 6

    (1) compile -> PROG ID seen_program DOTCOMMA lets . modules
    (3) modules -> . func modules
    (4) modules -> .
    (16) func -> . FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code

    $end            reduce using rule 4 (modules -> .)
    FUNC            shift and go to state 11

    modules                        shift and go to state 9
    func                           shift and go to state 10

state 7

    (6) lets -> LET . seen_lets type ID seen_ID_let aux_let DOTCOMMA lets
    (8) seen_lets -> .

    INT             reduce using rule 8 (seen_lets -> .)
    FLOAT           reduce using rule 8 (seen_lets -> .)
    BOOL            reduce using rule 8 (seen_lets -> .)

    seen_lets                      shift and go to state 12

state 8

    (7) lets -> empty .

    FUNC            reduce using rule 7 (lets -> empty .)
    $end            reduce using rule 7 (lets -> empty .)
    IF              reduce using rule 7 (lets -> empty .)
    WHILE           reduce using rule 7 (lets -> empty .)
    ID              reduce using rule 7 (lets -> empty .)
    LEFTPARENT      reduce using rule 7 (lets -> empty .)
    INI_INT         reduce using rule 7 (lets -> empty .)
    INI_FLOAT       reduce using rule 7 (lets -> empty .)
    RIGHTKEY        reduce using rule 7 (lets -> empty .)


state 9

    (1) compile -> PROG ID seen_program DOTCOMMA lets modules .

    $end            reduce using rule 1 (compile -> PROG ID seen_program DOTCOMMA lets modules .)


state 10

    (3) modules -> func . modules
    (3) modules -> . func modules
    (4) modules -> .
    (16) func -> . FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code

    $end            reduce using rule 4 (modules -> .)
    FUNC            shift and go to state 11

    func                           shift and go to state 10
    modules                        shift and go to state 13

state 11

    (16) func -> FUNC . ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code

    ID              shift and go to state 14


state 12

    (6) lets -> LET seen_lets . type ID seen_ID_let aux_let DOTCOMMA lets
    (9) type -> . INT seen_type
    (10) type -> . FLOAT seen_type
    (11) type -> . BOOL seen_type

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18

    type                           shift and go to state 15

state 13

    (3) modules -> func modules .

    $end            reduce using rule 3 (modules -> func modules .)


state 14

    (16) func -> FUNC ID . seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code
    (17) seen_func_name -> .

    LEFTPARENT      reduce using rule 17 (seen_func_name -> .)

    seen_func_name                 shift and go to state 19

state 15

    (6) lets -> LET seen_lets type . ID seen_ID_let aux_let DOTCOMMA lets

    ID              shift and go to state 20


state 16

    (9) type -> INT . seen_type
    (12) seen_type -> .

    ID              reduce using rule 12 (seen_type -> .)
    TWOPOINTS       reduce using rule 12 (seen_type -> .)

    seen_type                      shift and go to state 21

state 17

    (10) type -> FLOAT . seen_type
    (12) seen_type -> .

    ID              reduce using rule 12 (seen_type -> .)
    TWOPOINTS       reduce using rule 12 (seen_type -> .)

    seen_type                      shift and go to state 22

state 18

    (11) type -> BOOL . seen_type
    (12) seen_type -> .

    ID              reduce using rule 12 (seen_type -> .)
    TWOPOINTS       reduce using rule 12 (seen_type -> .)

    seen_type                      shift and go to state 23

state 19

    (16) func -> FUNC ID seen_func_name . params TWOPOINTS return_func_type TWOPOINTS func_code
    (18) params -> . LEFTPARENT param_table_init param_declare RIGHTPARENT

    LEFTPARENT      shift and go to state 25

    params                         shift and go to state 24

state 20

    (6) lets -> LET seen_lets type ID . seen_ID_let aux_let DOTCOMMA lets
    (13) seen_ID_let -> .

    COMMA           reduce using rule 13 (seen_ID_let -> .)
    DOTCOMMA        reduce using rule 13 (seen_ID_let -> .)

    seen_ID_let                    shift and go to state 26

state 21

    (9) type -> INT seen_type .

    ID              reduce using rule 9 (type -> INT seen_type .)
    TWOPOINTS       reduce using rule 9 (type -> INT seen_type .)


state 22

    (10) type -> FLOAT seen_type .

    ID              reduce using rule 10 (type -> FLOAT seen_type .)
    TWOPOINTS       reduce using rule 10 (type -> FLOAT seen_type .)


state 23

    (11) type -> BOOL seen_type .

    ID              reduce using rule 11 (type -> BOOL seen_type .)
    TWOPOINTS       reduce using rule 11 (type -> BOOL seen_type .)


state 24

    (16) func -> FUNC ID seen_func_name params . TWOPOINTS return_func_type TWOPOINTS func_code

    TWOPOINTS       shift and go to state 27


state 25

    (18) params -> LEFTPARENT . param_table_init param_declare RIGHTPARENT
    (19) param_table_init -> .

    COMMA           reduce using rule 19 (param_table_init -> .)
    INT             reduce using rule 19 (param_table_init -> .)
    FLOAT           reduce using rule 19 (param_table_init -> .)
    BOOL            reduce using rule 19 (param_table_init -> .)
    RIGHTPARENT     reduce using rule 19 (param_table_init -> .)

    param_table_init               shift and go to state 28

state 26

    (6) lets -> LET seen_lets type ID seen_ID_let . aux_let DOTCOMMA lets
    (14) aux_let -> . COMMA ID seen_ID_let aux_let
    (15) aux_let -> .

    COMMA           shift and go to state 30
    DOTCOMMA        reduce using rule 15 (aux_let -> .)

    aux_let                        shift and go to state 29

state 27

    (16) func -> FUNC ID seen_func_name params TWOPOINTS . return_func_type TWOPOINTS func_code
    (23) return_func_type -> . type
    (24) return_func_type -> . VOID void_detect
    (9) type -> . INT seen_type
    (10) type -> . FLOAT seen_type
    (11) type -> . BOOL seen_type

    VOID            shift and go to state 33
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18

    return_func_type               shift and go to state 31
    type                           shift and go to state 32

state 28

    (18) params -> LEFTPARENT param_table_init . param_declare RIGHTPARENT
    (20) param_declare -> . type ID seen_ID_let param_declare
    (21) param_declare -> . COMMA param_declare
    (22) param_declare -> . empty
    (9) type -> . INT seen_type
    (10) type -> . FLOAT seen_type
    (11) type -> . BOOL seen_type
    (85) empty -> .

    COMMA           shift and go to state 36
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    RIGHTPARENT     reduce using rule 85 (empty -> .)

    param_declare                  shift and go to state 34
    type                           shift and go to state 35
    empty                          shift and go to state 37

state 29

    (6) lets -> LET seen_lets type ID seen_ID_let aux_let . DOTCOMMA lets

    DOTCOMMA        shift and go to state 38


state 30

    (14) aux_let -> COMMA . ID seen_ID_let aux_let

    ID              shift and go to state 39


state 31

    (16) func -> FUNC ID seen_func_name params TWOPOINTS return_func_type . TWOPOINTS func_code

    TWOPOINTS       shift and go to state 40


state 32

    (23) return_func_type -> type .

    TWOPOINTS       reduce using rule 23 (return_func_type -> type .)


state 33

    (24) return_func_type -> VOID . void_detect
    (25) void_detect -> .

    TWOPOINTS       reduce using rule 25 (void_detect -> .)

    void_detect                    shift and go to state 41

state 34

    (18) params -> LEFTPARENT param_table_init param_declare . RIGHTPARENT

    RIGHTPARENT     shift and go to state 42


state 35

    (20) param_declare -> type . ID seen_ID_let param_declare

    ID              shift and go to state 43


state 36

    (21) param_declare -> COMMA . param_declare
    (20) param_declare -> . type ID seen_ID_let param_declare
    (21) param_declare -> . COMMA param_declare
    (22) param_declare -> . empty
    (9) type -> . INT seen_type
    (10) type -> . FLOAT seen_type
    (11) type -> . BOOL seen_type
    (85) empty -> .

    COMMA           shift and go to state 36
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    RIGHTPARENT     reduce using rule 85 (empty -> .)

    param_declare                  shift and go to state 44
    type                           shift and go to state 35
    empty                          shift and go to state 37

state 37

    (22) param_declare -> empty .

    RIGHTPARENT     reduce using rule 22 (param_declare -> empty .)


state 38

    (6) lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA . lets
    (6) lets -> . LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets
    (7) lets -> . empty
    (85) empty -> .

    LET             shift and go to state 7
    FUNC            reduce using rule 85 (empty -> .)
    $end            reduce using rule 85 (empty -> .)
    IF              reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    LEFTPARENT      reduce using rule 85 (empty -> .)
    INI_INT         reduce using rule 85 (empty -> .)
    INI_FLOAT       reduce using rule 85 (empty -> .)
    RIGHTKEY        reduce using rule 85 (empty -> .)

    lets                           shift and go to state 45
    empty                          shift and go to state 8

state 39

    (14) aux_let -> COMMA ID . seen_ID_let aux_let
    (13) seen_ID_let -> .

    COMMA           reduce using rule 13 (seen_ID_let -> .)
    DOTCOMMA        reduce using rule 13 (seen_ID_let -> .)

    seen_ID_let                    shift and go to state 46

state 40

    (16) func -> FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS . func_code
    (26) func_code -> . LEFTKEY lets func_code_aux RIGHTKEY

    LEFTKEY         shift and go to state 48

    func_code                      shift and go to state 47

state 41

    (24) return_func_type -> VOID void_detect .

    TWOPOINTS       reduce using rule 24 (return_func_type -> VOID void_detect .)


state 42

    (18) params -> LEFTPARENT param_table_init param_declare RIGHTPARENT .

    TWOPOINTS       reduce using rule 18 (params -> LEFTPARENT param_table_init param_declare RIGHTPARENT .)


state 43

    (20) param_declare -> type ID . seen_ID_let param_declare
    (13) seen_ID_let -> .

    COMMA           reduce using rule 13 (seen_ID_let -> .)
    INT             reduce using rule 13 (seen_ID_let -> .)
    FLOAT           reduce using rule 13 (seen_ID_let -> .)
    BOOL            reduce using rule 13 (seen_ID_let -> .)
    RIGHTPARENT     reduce using rule 13 (seen_ID_let -> .)

    seen_ID_let                    shift and go to state 49

state 44

    (21) param_declare -> COMMA param_declare .

    RIGHTPARENT     reduce using rule 21 (param_declare -> COMMA param_declare .)


state 45

    (6) lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .

    FUNC            reduce using rule 6 (lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .)
    $end            reduce using rule 6 (lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .)
    IF              reduce using rule 6 (lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .)
    WHILE           reduce using rule 6 (lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .)
    ID              reduce using rule 6 (lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .)
    LEFTPARENT      reduce using rule 6 (lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .)
    INI_INT         reduce using rule 6 (lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .)
    INI_FLOAT       reduce using rule 6 (lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .)
    RIGHTKEY        reduce using rule 6 (lets -> LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets .)


state 46

    (14) aux_let -> COMMA ID seen_ID_let . aux_let
    (14) aux_let -> . COMMA ID seen_ID_let aux_let
    (15) aux_let -> .

    COMMA           shift and go to state 30
    DOTCOMMA        reduce using rule 15 (aux_let -> .)

    aux_let                        shift and go to state 50

state 47

    (16) func -> FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code .

    FUNC            reduce using rule 16 (func -> FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code .)
    $end            reduce using rule 16 (func -> FUNC ID seen_func_name params TWOPOINTS return_func_type TWOPOINTS func_code .)


state 48

    (26) func_code -> LEFTKEY . lets func_code_aux RIGHTKEY
    (6) lets -> . LET seen_lets type ID seen_ID_let aux_let DOTCOMMA lets
    (7) lets -> . empty
    (85) empty -> .

    LET             shift and go to state 7
    IF              reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    LEFTPARENT      reduce using rule 85 (empty -> .)
    INI_INT         reduce using rule 85 (empty -> .)
    INI_FLOAT       reduce using rule 85 (empty -> .)
    RIGHTKEY        reduce using rule 85 (empty -> .)

    lets                           shift and go to state 51
    empty                          shift and go to state 8

state 49

    (20) param_declare -> type ID seen_ID_let . param_declare
    (20) param_declare -> . type ID seen_ID_let param_declare
    (21) param_declare -> . COMMA param_declare
    (22) param_declare -> . empty
    (9) type -> . INT seen_type
    (10) type -> . FLOAT seen_type
    (11) type -> . BOOL seen_type
    (85) empty -> .

    COMMA           shift and go to state 36
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    RIGHTPARENT     reduce using rule 85 (empty -> .)

    type                           shift and go to state 35
    param_declare                  shift and go to state 52
    empty                          shift and go to state 37

state 50

    (14) aux_let -> COMMA ID seen_ID_let aux_let .

    DOTCOMMA        reduce using rule 14 (aux_let -> COMMA ID seen_ID_let aux_let .)


state 51

    (26) func_code -> LEFTKEY lets . func_code_aux RIGHTKEY
    (27) func_code_aux -> . action func_code_aux
    (28) func_code_aux -> .
    (29) action -> . assign
    (30) action -> . expresion_line
    (31) action -> . condition
    (32) action -> . while
    (66) assign -> . call_let set_appear SET set_value
    (67) assign -> . call_let set_appear SET expresion_line seen_final_asignacion DOTCOMMA
    (48) expresion_line -> . term term_appear
    (49) expresion_line -> . term term_appear aux_expresion
    (35) condition -> . IF LEFTPARENT found_init_parent condition_expresion right_parent_condition RIGHTPARENT func_code end_cond condition_end_check
    (33) while -> . WHILE while_appear LEFTPARENT condition_expresion right_parent_condition RIGHTPARENT func_code end_cond
    (75) call_let -> . ID check_let_exists
    (52) term -> . fact factor_appear
    (53) term -> . fact factor_appear aux_term
    (56) fact -> . expo expo_appear
    (57) fact -> . expo expo_appear aux_expo
    (58) expo -> . parent_aux
    (59) expo -> . call_lets
    (60) expo -> . call_let
    (61) parent_aux -> . LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent
    (76) call_lets -> . INI_INT check_global_const_exists
    (77) call_lets -> . INI_FLOAT check_global_const_exists

    RIGHTKEY        reduce using rule 28 (func_code_aux -> .)
    IF              shift and go to state 61
    WHILE           shift and go to state 63
    ID              shift and go to state 64
    LEFTPARENT      shift and go to state 62
    INI_INT         shift and go to state 69
    INI_FLOAT       shift and go to state 70

    func_code_aux                  shift and go to state 53
    action                         shift and go to state 54
    assign                         shift and go to state 55
    expresion_line                 shift and go to state 56
    condition                      shift and go to state 57
    while                          shift and go to state 58
    call_let                       shift and go to state 59
    term                           shift and go to state 60
    fact                           shift and go to state 65
    expo                           shift and go to state 66
    parent_aux                     shift and go to state 67
    call_lets                      shift and go to state 68

state 52

    (20) param_declare -> type ID seen_ID_let param_declare .

    RIGHTPARENT     reduce using rule 20 (param_declare -> type ID seen_ID_let param_declare .)


state 53

    (26) func_code -> LEFTKEY lets func_code_aux . RIGHTKEY

    RIGHTKEY        shift and go to state 71


state 54

    (27) func_code_aux -> action . func_code_aux
    (27) func_code_aux -> . action func_code_aux
    (28) func_code_aux -> .
    (29) action -> . assign
    (30) action -> . expresion_line
    (31) action -> . condition
    (32) action -> . while
    (66) assign -> . call_let set_appear SET set_value
    (67) assign -> . call_let set_appear SET expresion_line seen_final_asignacion DOTCOMMA
    (48) expresion_line -> . term term_appear
    (49) expresion_line -> . term term_appear aux_expresion
    (35) condition -> . IF LEFTPARENT found_init_parent condition_expresion right_parent_condition RIGHTPARENT func_code end_cond condition_end_check
    (33) while -> . WHILE while_appear LEFTPARENT condition_expresion right_parent_condition RIGHTPARENT func_code end_cond
    (75) call_let -> . ID check_let_exists
    (52) term -> . fact factor_appear
    (53) term -> . fact factor_appear aux_term
    (56) fact -> . expo expo_appear
    (57) fact -> . expo expo_appear aux_expo
    (58) expo -> . parent_aux
    (59) expo -> . call_lets
    (60) expo -> . call_let
    (61) parent_aux -> . LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent
    (76) call_lets -> . INI_INT check_global_const_exists
    (77) call_lets -> . INI_FLOAT check_global_const_exists

    RIGHTKEY        reduce using rule 28 (func_code_aux -> .)
    IF              shift and go to state 61
    WHILE           shift and go to state 63
    ID              shift and go to state 64
    LEFTPARENT      shift and go to state 62
    INI_INT         shift and go to state 69
    INI_FLOAT       shift and go to state 70

    action                         shift and go to state 54
    func_code_aux                  shift and go to state 72
    assign                         shift and go to state 55
    expresion_line                 shift and go to state 56
    condition                      shift and go to state 57
    while                          shift and go to state 58
    call_let                       shift and go to state 59
    term                           shift and go to state 60
    fact                           shift and go to state 65
    expo                           shift and go to state 66
    parent_aux                     shift and go to state 67
    call_lets                      shift and go to state 68

state 55

    (29) action -> assign .

    IF              reduce using rule 29 (action -> assign .)
    WHILE           reduce using rule 29 (action -> assign .)
    ID              reduce using rule 29 (action -> assign .)
    LEFTPARENT      reduce using rule 29 (action -> assign .)
    INI_INT         reduce using rule 29 (action -> assign .)
    INI_FLOAT       reduce using rule 29 (action -> assign .)
    RIGHTKEY        reduce using rule 29 (action -> assign .)


state 56

    (30) action -> expresion_line .

    IF              reduce using rule 30 (action -> expresion_line .)
    WHILE           reduce using rule 30 (action -> expresion_line .)
    ID              reduce using rule 30 (action -> expresion_line .)
    LEFTPARENT      reduce using rule 30 (action -> expresion_line .)
    INI_INT         reduce using rule 30 (action -> expresion_line .)
    INI_FLOAT       reduce using rule 30 (action -> expresion_line .)
    RIGHTKEY        reduce using rule 30 (action -> expresion_line .)


state 57

    (31) action -> condition .

    IF              reduce using rule 31 (action -> condition .)
    WHILE           reduce using rule 31 (action -> condition .)
    ID              reduce using rule 31 (action -> condition .)
    LEFTPARENT      reduce using rule 31 (action -> condition .)
    INI_INT         reduce using rule 31 (action -> condition .)
    INI_FLOAT       reduce using rule 31 (action -> condition .)
    RIGHTKEY        reduce using rule 31 (action -> condition .)


state 58

    (32) action -> while .

    IF              reduce using rule 32 (action -> while .)
    WHILE           reduce using rule 32 (action -> while .)
    ID              reduce using rule 32 (action -> while .)
    LEFTPARENT      reduce using rule 32 (action -> while .)
    INI_INT         reduce using rule 32 (action -> while .)
    INI_FLOAT       reduce using rule 32 (action -> while .)
    RIGHTKEY        reduce using rule 32 (action -> while .)


state 59

    (66) assign -> call_let . set_appear SET set_value
    (67) assign -> call_let . set_appear SET expresion_line seen_final_asignacion DOTCOMMA
    (60) expo -> call_let .
    (71) set_appear -> .

    TIMES_BY_SAME   reduce using rule 60 (expo -> call_let .)
    SPLIT_BY        reduce using rule 60 (expo -> call_let .)
    MULT_BY         reduce using rule 60 (expo -> call_let .)
    ADD             reduce using rule 60 (expo -> call_let .)
    LESS            reduce using rule 60 (expo -> call_let .)
    IF              reduce using rule 60 (expo -> call_let .)
    WHILE           reduce using rule 60 (expo -> call_let .)
    ID              reduce using rule 60 (expo -> call_let .)
    LEFTPARENT      reduce using rule 60 (expo -> call_let .)
    INI_INT         reduce using rule 60 (expo -> call_let .)
    INI_FLOAT       reduce using rule 60 (expo -> call_let .)
    RIGHTKEY        reduce using rule 60 (expo -> call_let .)
    SET             reduce using rule 71 (set_appear -> .)

    set_appear                     shift and go to state 73

state 60

    (48) expresion_line -> term . term_appear
    (49) expresion_line -> term . term_appear aux_expresion
    (72) term_appear -> .

    ADD             reduce using rule 72 (term_appear -> .)
    LESS            reduce using rule 72 (term_appear -> .)
    IF              reduce using rule 72 (term_appear -> .)
    WHILE           reduce using rule 72 (term_appear -> .)
    ID              reduce using rule 72 (term_appear -> .)
    LEFTPARENT      reduce using rule 72 (term_appear -> .)
    INI_INT         reduce using rule 72 (term_appear -> .)
    INI_FLOAT       reduce using rule 72 (term_appear -> .)
    RIGHTKEY        reduce using rule 72 (term_appear -> .)
    RIGHTPARENT     reduce using rule 72 (term_appear -> .)
    DOTCOMMA        reduce using rule 72 (term_appear -> .)
    GREATERTN       reduce using rule 72 (term_appear -> .)
    LESSTN          reduce using rule 72 (term_appear -> .)
    SAME            reduce using rule 72 (term_appear -> .)
    NOTSAME         reduce using rule 72 (term_appear -> .)

    term_appear                    shift and go to state 74

state 61

    (35) condition -> IF . LEFTPARENT found_init_parent condition_expresion right_parent_condition RIGHTPARENT func_code end_cond condition_end_check

    LEFTPARENT      shift and go to state 75


state 62

    (61) parent_aux -> LEFTPARENT . found_init_parent expresion_line RIGHTPARENT found_end_parent
    (63) found_init_parent -> .

    LEFTPARENT      reduce using rule 63 (found_init_parent -> .)
    INI_INT         reduce using rule 63 (found_init_parent -> .)
    INI_FLOAT       reduce using rule 63 (found_init_parent -> .)
    ID              reduce using rule 63 (found_init_parent -> .)

    found_init_parent              shift and go to state 76

state 63

    (33) while -> WHILE . while_appear LEFTPARENT condition_expresion right_parent_condition RIGHTPARENT func_code end_cond
    (34) while_appear -> .

    LEFTPARENT      reduce using rule 34 (while_appear -> .)

    while_appear                   shift and go to state 77

state 64

    (75) call_let -> ID . check_let_exists
    (79) check_let_exists -> .

    SET             reduce using rule 79 (check_let_exists -> .)
    TIMES_BY_SAME   reduce using rule 79 (check_let_exists -> .)
    SPLIT_BY        reduce using rule 79 (check_let_exists -> .)
    MULT_BY         reduce using rule 79 (check_let_exists -> .)
    ADD             reduce using rule 79 (check_let_exists -> .)
    LESS            reduce using rule 79 (check_let_exists -> .)
    IF              reduce using rule 79 (check_let_exists -> .)
    WHILE           reduce using rule 79 (check_let_exists -> .)
    ID              reduce using rule 79 (check_let_exists -> .)
    LEFTPARENT      reduce using rule 79 (check_let_exists -> .)
    INI_INT         reduce using rule 79 (check_let_exists -> .)
    INI_FLOAT       reduce using rule 79 (check_let_exists -> .)
    RIGHTKEY        reduce using rule 79 (check_let_exists -> .)
    RIGHTPARENT     reduce using rule 79 (check_let_exists -> .)
    DOTCOMMA        reduce using rule 79 (check_let_exists -> .)
    GREATERTN       reduce using rule 79 (check_let_exists -> .)
    LESSTN          reduce using rule 79 (check_let_exists -> .)
    SAME            reduce using rule 79 (check_let_exists -> .)
    NOTSAME         reduce using rule 79 (check_let_exists -> .)

    check_let_exists               shift and go to state 78

state 65

    (52) term -> fact . factor_appear
    (53) term -> fact . factor_appear aux_term
    (73) factor_appear -> .

    SPLIT_BY        reduce using rule 73 (factor_appear -> .)
    MULT_BY         reduce using rule 73 (factor_appear -> .)
    ADD             reduce using rule 73 (factor_appear -> .)
    LESS            reduce using rule 73 (factor_appear -> .)
    IF              reduce using rule 73 (factor_appear -> .)
    WHILE           reduce using rule 73 (factor_appear -> .)
    ID              reduce using rule 73 (factor_appear -> .)
    LEFTPARENT      reduce using rule 73 (factor_appear -> .)
    INI_INT         reduce using rule 73 (factor_appear -> .)
    INI_FLOAT       reduce using rule 73 (factor_appear -> .)
    RIGHTKEY        reduce using rule 73 (factor_appear -> .)
    RIGHTPARENT     reduce using rule 73 (factor_appear -> .)
    DOTCOMMA        reduce using rule 73 (factor_appear -> .)
    GREATERTN       reduce using rule 73 (factor_appear -> .)
    LESSTN          reduce using rule 73 (factor_appear -> .)
    SAME            reduce using rule 73 (factor_appear -> .)
    NOTSAME         reduce using rule 73 (factor_appear -> .)

    factor_appear                  shift and go to state 79

state 66

    (56) fact -> expo . expo_appear
    (57) fact -> expo . expo_appear aux_expo
    (74) expo_appear -> .

    TIMES_BY_SAME   reduce using rule 74 (expo_appear -> .)
    SPLIT_BY        reduce using rule 74 (expo_appear -> .)
    MULT_BY         reduce using rule 74 (expo_appear -> .)
    ADD             reduce using rule 74 (expo_appear -> .)
    LESS            reduce using rule 74 (expo_appear -> .)
    IF              reduce using rule 74 (expo_appear -> .)
    WHILE           reduce using rule 74 (expo_appear -> .)
    ID              reduce using rule 74 (expo_appear -> .)
    LEFTPARENT      reduce using rule 74 (expo_appear -> .)
    INI_INT         reduce using rule 74 (expo_appear -> .)
    INI_FLOAT       reduce using rule 74 (expo_appear -> .)
    RIGHTKEY        reduce using rule 74 (expo_appear -> .)
    RIGHTPARENT     reduce using rule 74 (expo_appear -> .)
    DOTCOMMA        reduce using rule 74 (expo_appear -> .)
    GREATERTN       reduce using rule 74 (expo_appear -> .)
    LESSTN          reduce using rule 74 (expo_appear -> .)
    SAME            reduce using rule 74 (expo_appear -> .)
    NOTSAME         reduce using rule 74 (expo_appear -> .)

    expo_appear                    shift and go to state 80

state 67

    (58) expo -> parent_aux .

    TIMES_BY_SAME   reduce using rule 58 (expo -> parent_aux .)
    SPLIT_BY        reduce using rule 58 (expo -> parent_aux .)
    MULT_BY         reduce using rule 58 (expo -> parent_aux .)
    ADD             reduce using rule 58 (expo -> parent_aux .)
    LESS            reduce using rule 58 (expo -> parent_aux .)
    IF              reduce using rule 58 (expo -> parent_aux .)
    WHILE           reduce using rule 58 (expo -> parent_aux .)
    ID              reduce using rule 58 (expo -> parent_aux .)
    LEFTPARENT      reduce using rule 58 (expo -> parent_aux .)
    INI_INT         reduce using rule 58 (expo -> parent_aux .)
    INI_FLOAT       reduce using rule 58 (expo -> parent_aux .)
    RIGHTKEY        reduce using rule 58 (expo -> parent_aux .)
    RIGHTPARENT     reduce using rule 58 (expo -> parent_aux .)
    DOTCOMMA        reduce using rule 58 (expo -> parent_aux .)
    GREATERTN       reduce using rule 58 (expo -> parent_aux .)
    LESSTN          reduce using rule 58 (expo -> parent_aux .)
    SAME            reduce using rule 58 (expo -> parent_aux .)
    NOTSAME         reduce using rule 58 (expo -> parent_aux .)


state 68

    (59) expo -> call_lets .

    TIMES_BY_SAME   reduce using rule 59 (expo -> call_lets .)
    SPLIT_BY        reduce using rule 59 (expo -> call_lets .)
    MULT_BY         reduce using rule 59 (expo -> call_lets .)
    ADD             reduce using rule 59 (expo -> call_lets .)
    LESS            reduce using rule 59 (expo -> call_lets .)
    IF              reduce using rule 59 (expo -> call_lets .)
    WHILE           reduce using rule 59 (expo -> call_lets .)
    ID              reduce using rule 59 (expo -> call_lets .)
    LEFTPARENT      reduce using rule 59 (expo -> call_lets .)
    INI_INT         reduce using rule 59 (expo -> call_lets .)
    INI_FLOAT       reduce using rule 59 (expo -> call_lets .)
    RIGHTKEY        reduce using rule 59 (expo -> call_lets .)
    RIGHTPARENT     reduce using rule 59 (expo -> call_lets .)
    DOTCOMMA        reduce using rule 59 (expo -> call_lets .)
    GREATERTN       reduce using rule 59 (expo -> call_lets .)
    LESSTN          reduce using rule 59 (expo -> call_lets .)
    SAME            reduce using rule 59 (expo -> call_lets .)
    NOTSAME         reduce using rule 59 (expo -> call_lets .)


state 69

    (76) call_lets -> INI_INT . check_global_const_exists
    (78) check_global_const_exists -> . add_operand
    (69) add_operand -> .

    TIMES_BY_SAME   reduce using rule 69 (add_operand -> .)
    SPLIT_BY        reduce using rule 69 (add_operand -> .)
    MULT_BY         reduce using rule 69 (add_operand -> .)
    ADD             reduce using rule 69 (add_operand -> .)
    LESS            reduce using rule 69 (add_operand -> .)
    IF              reduce using rule 69 (add_operand -> .)
    WHILE           reduce using rule 69 (add_operand -> .)
    ID              reduce using rule 69 (add_operand -> .)
    LEFTPARENT      reduce using rule 69 (add_operand -> .)
    INI_INT         reduce using rule 69 (add_operand -> .)
    INI_FLOAT       reduce using rule 69 (add_operand -> .)
    RIGHTKEY        reduce using rule 69 (add_operand -> .)
    RIGHTPARENT     reduce using rule 69 (add_operand -> .)
    GREATERTN       reduce using rule 69 (add_operand -> .)
    LESSTN          reduce using rule 69 (add_operand -> .)
    SAME            reduce using rule 69 (add_operand -> .)
    NOTSAME         reduce using rule 69 (add_operand -> .)
    DOTCOMMA        reduce using rule 69 (add_operand -> .)

    check_global_const_exists      shift and go to state 81
    add_operand                    shift and go to state 82

state 70

    (77) call_lets -> INI_FLOAT . check_global_const_exists
    (78) check_global_const_exists -> . add_operand
    (69) add_operand -> .

    TIMES_BY_SAME   reduce using rule 69 (add_operand -> .)
    SPLIT_BY        reduce using rule 69 (add_operand -> .)
    MULT_BY         reduce using rule 69 (add_operand -> .)
    ADD             reduce using rule 69 (add_operand -> .)
    LESS            reduce using rule 69 (add_operand -> .)
    IF              reduce using rule 69 (add_operand -> .)
    WHILE           reduce using rule 69 (add_operand -> .)
    ID              reduce using rule 69 (add_operand -> .)
    LEFTPARENT      reduce using rule 69 (add_operand -> .)
    INI_INT         reduce using rule 69 (add_operand -> .)
    INI_FLOAT       reduce using rule 69 (add_operand -> .)
    RIGHTKEY        reduce using rule 69 (add_operand -> .)
    RIGHTPARENT     reduce using rule 69 (add_operand -> .)
    GREATERTN       reduce using rule 69 (add_operand -> .)
    LESSTN          reduce using rule 69 (add_operand -> .)
    SAME            reduce using rule 69 (add_operand -> .)
    NOTSAME         reduce using rule 69 (add_operand -> .)
    DOTCOMMA        reduce using rule 69 (add_operand -> .)

    check_global_const_exists      shift and go to state 83
    add_operand                    shift and go to state 82

state 71

    (26) func_code -> LEFTKEY lets func_code_aux RIGHTKEY .

    FUNC            reduce using rule 26 (func_code -> LEFTKEY lets func_code_aux RIGHTKEY .)
    $end            reduce using rule 26 (func_code -> LEFTKEY lets func_code_aux RIGHTKEY .)
    ELSE            reduce using rule 26 (func_code -> LEFTKEY lets func_code_aux RIGHTKEY .)
    IF              reduce using rule 26 (func_code -> LEFTKEY lets func_code_aux RIGHTKEY .)
    WHILE           reduce using rule 26 (func_code -> LEFTKEY lets func_code_aux RIGHTKEY .)
    ID              reduce using rule 26 (func_code -> LEFTKEY lets func_code_aux RIGHTKEY .)
    LEFTPARENT      reduce using rule 26 (func_code -> LEFTKEY lets func_code_aux RIGHTKEY .)
    INI_INT         reduce using rule 26 (func_code -> LEFTKEY lets func_code_aux RIGHTKEY .)
    INI_FLOAT       reduce using rule 26 (func_code -> LEFTKEY lets func_code_aux RIGHTKEY .)
    RIGHTKEY        reduce using rule 26 (func_code -> LEFTKEY lets func_code_aux RIGHTKEY .)


state 72

    (27) func_code_aux -> action func_code_aux .

    RIGHTKEY        reduce using rule 27 (func_code_aux -> action func_code_aux .)


state 73

    (66) assign -> call_let set_appear . SET set_value
    (67) assign -> call_let set_appear . SET expresion_line seen_final_asignacion DOTCOMMA

    SET             shift and go to state 84


state 74

    (48) expresion_line -> term term_appear .
    (49) expresion_line -> term term_appear . aux_expresion
    (50) aux_expresion -> . ADD add_operator expresion_line
    (51) aux_expresion -> . LESS add_operator expresion_line

    IF              reduce using rule 48 (expresion_line -> term term_appear .)
    WHILE           reduce using rule 48 (expresion_line -> term term_appear .)
    ID              reduce using rule 48 (expresion_line -> term term_appear .)
    LEFTPARENT      reduce using rule 48 (expresion_line -> term term_appear .)
    INI_INT         reduce using rule 48 (expresion_line -> term term_appear .)
    INI_FLOAT       reduce using rule 48 (expresion_line -> term term_appear .)
    RIGHTKEY        reduce using rule 48 (expresion_line -> term term_appear .)
    RIGHTPARENT     reduce using rule 48 (expresion_line -> term term_appear .)
    DOTCOMMA        reduce using rule 48 (expresion_line -> term term_appear .)
    GREATERTN       reduce using rule 48 (expresion_line -> term term_appear .)
    LESSTN          reduce using rule 48 (expresion_line -> term term_appear .)
    SAME            reduce using rule 48 (expresion_line -> term term_appear .)
    NOTSAME         reduce using rule 48 (expresion_line -> term term_appear .)
    ADD             shift and go to state 86
    LESS            shift and go to state 87

    aux_expresion                  shift and go to state 85

state 75

    (35) condition -> IF LEFTPARENT . found_init_parent condition_expresion right_parent_condition RIGHTPARENT func_code end_cond condition_end_check
    (63) found_init_parent -> .

    LEFTPARENT      reduce using rule 63 (found_init_parent -> .)
    INI_INT         reduce using rule 63 (found_init_parent -> .)
    INI_FLOAT       reduce using rule 63 (found_init_parent -> .)
    ID              reduce using rule 63 (found_init_parent -> .)

    found_init_parent              shift and go to state 88

state 76

    (61) parent_aux -> LEFTPARENT found_init_parent . expresion_line RIGHTPARENT found_end_parent
    (48) expresion_line -> . term term_appear
    (49) expresion_line -> . term term_appear aux_expresion
    (52) term -> . fact factor_appear
    (53) term -> . fact factor_appear aux_term
    (56) fact -> . expo expo_appear
    (57) fact -> . expo expo_appear aux_expo
    (58) expo -> . parent_aux
    (59) expo -> . call_lets
    (60) expo -> . call_let
    (61) parent_aux -> . LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent
    (76) call_lets -> . INI_INT check_global_const_exists
    (77) call_lets -> . INI_FLOAT check_global_const_exists
    (75) call_let -> . ID check_let_exists

    LEFTPARENT      shift and go to state 62
    INI_INT         shift and go to state 69
    INI_FLOAT       shift and go to state 70
    ID              shift and go to state 64

    expresion_line                 shift and go to state 89
    term                           shift and go to state 60
    fact                           shift and go to state 65
    expo                           shift and go to state 66
    parent_aux                     shift and go to state 67
    call_lets                      shift and go to state 68
    call_let                       shift and go to state 90

state 77

    (33) while -> WHILE while_appear . LEFTPARENT condition_expresion right_parent_condition RIGHTPARENT func_code end_cond

    LEFTPARENT      shift and go to state 91


state 78

    (75) call_let -> ID check_let_exists .

    SET             reduce using rule 75 (call_let -> ID check_let_exists .)
    TIMES_BY_SAME   reduce using rule 75 (call_let -> ID check_let_exists .)
    SPLIT_BY        reduce using rule 75 (call_let -> ID check_let_exists .)
    MULT_BY         reduce using rule 75 (call_let -> ID check_let_exists .)
    ADD             reduce using rule 75 (call_let -> ID check_let_exists .)
    LESS            reduce using rule 75 (call_let -> ID check_let_exists .)
    IF              reduce using rule 75 (call_let -> ID check_let_exists .)
    WHILE           reduce using rule 75 (call_let -> ID check_let_exists .)
    ID              reduce using rule 75 (call_let -> ID check_let_exists .)
    LEFTPARENT      reduce using rule 75 (call_let -> ID check_let_exists .)
    INI_INT         reduce using rule 75 (call_let -> ID check_let_exists .)
    INI_FLOAT       reduce using rule 75 (call_let -> ID check_let_exists .)
    RIGHTKEY        reduce using rule 75 (call_let -> ID check_let_exists .)
    RIGHTPARENT     reduce using rule 75 (call_let -> ID check_let_exists .)
    DOTCOMMA        reduce using rule 75 (call_let -> ID check_let_exists .)
    GREATERTN       reduce using rule 75 (call_let -> ID check_let_exists .)
    LESSTN          reduce using rule 75 (call_let -> ID check_let_exists .)
    SAME            reduce using rule 75 (call_let -> ID check_let_exists .)
    NOTSAME         reduce using rule 75 (call_let -> ID check_let_exists .)


state 79

    (52) term -> fact factor_appear .
    (53) term -> fact factor_appear . aux_term
    (54) aux_term -> . SPLIT_BY add_operator term
    (55) aux_term -> . MULT_BY add_operator term

    ADD             reduce using rule 52 (term -> fact factor_appear .)
    LESS            reduce using rule 52 (term -> fact factor_appear .)
    IF              reduce using rule 52 (term -> fact factor_appear .)
    WHILE           reduce using rule 52 (term -> fact factor_appear .)
    ID              reduce using rule 52 (term -> fact factor_appear .)
    LEFTPARENT      reduce using rule 52 (term -> fact factor_appear .)
    INI_INT         reduce using rule 52 (term -> fact factor_appear .)
    INI_FLOAT       reduce using rule 52 (term -> fact factor_appear .)
    RIGHTKEY        reduce using rule 52 (term -> fact factor_appear .)
    RIGHTPARENT     reduce using rule 52 (term -> fact factor_appear .)
    DOTCOMMA        reduce using rule 52 (term -> fact factor_appear .)
    GREATERTN       reduce using rule 52 (term -> fact factor_appear .)
    LESSTN          reduce using rule 52 (term -> fact factor_appear .)
    SAME            reduce using rule 52 (term -> fact factor_appear .)
    NOTSAME         reduce using rule 52 (term -> fact factor_appear .)
    SPLIT_BY        shift and go to state 93
    MULT_BY         shift and go to state 94

    aux_term                       shift and go to state 92

state 80

    (56) fact -> expo expo_appear .
    (57) fact -> expo expo_appear . aux_expo
    (65) aux_expo -> . TIMES_BY_SAME add_operator fact

    SPLIT_BY        reduce using rule 56 (fact -> expo expo_appear .)
    MULT_BY         reduce using rule 56 (fact -> expo expo_appear .)
    ADD             reduce using rule 56 (fact -> expo expo_appear .)
    LESS            reduce using rule 56 (fact -> expo expo_appear .)
    IF              reduce using rule 56 (fact -> expo expo_appear .)
    WHILE           reduce using rule 56 (fact -> expo expo_appear .)
    ID              reduce using rule 56 (fact -> expo expo_appear .)
    LEFTPARENT      reduce using rule 56 (fact -> expo expo_appear .)
    INI_INT         reduce using rule 56 (fact -> expo expo_appear .)
    INI_FLOAT       reduce using rule 56 (fact -> expo expo_appear .)
    RIGHTKEY        reduce using rule 56 (fact -> expo expo_appear .)
    RIGHTPARENT     reduce using rule 56 (fact -> expo expo_appear .)
    DOTCOMMA        reduce using rule 56 (fact -> expo expo_appear .)
    GREATERTN       reduce using rule 56 (fact -> expo expo_appear .)
    LESSTN          reduce using rule 56 (fact -> expo expo_appear .)
    SAME            reduce using rule 56 (fact -> expo expo_appear .)
    NOTSAME         reduce using rule 56 (fact -> expo expo_appear .)
    TIMES_BY_SAME   shift and go to state 96

    aux_expo                       shift and go to state 95

state 81

    (76) call_lets -> INI_INT check_global_const_exists .

    TIMES_BY_SAME   reduce using rule 76 (call_lets -> INI_INT check_global_const_exists .)
    SPLIT_BY        reduce using rule 76 (call_lets -> INI_INT check_global_const_exists .)
    MULT_BY         reduce using rule 76 (call_lets -> INI_INT check_global_const_exists .)
    ADD             reduce using rule 76 (call_lets -> INI_INT check_global_const_exists .)
    LESS            reduce using rule 76 (call_lets -> INI_INT check_global_const_exists .)
    IF              reduce using rule 76 (call_lets -> INI_INT check_global_const_exists .)
    WHILE           reduce using rule 76 (call_lets -> INI_INT check_global_const_exists .)
    ID              reduce using rule 76 (call_lets -> INI_INT check_global_const_exists .)
    LEFTPARENT      reduce using rule 76 (call_lets -> INI_INT check_global_const_exists .)
    INI_INT         reduce using rule 76 (call_lets -> INI_INT check_global_const_exists .)
    INI_FLOAT       reduce using rule 76 (call_lets -> INI_INT check_global_const_exists .)
    RIGHTKEY        reduce using rule 76 (call_lets -> INI_INT check_global_const_exists .)
    RIGHTPARENT     reduce using rule 76 (call_lets -> INI_INT check_global_const_exists .)
    DOTCOMMA        reduce using rule 76 (call_lets -> INI_INT check_global_const_exists .)
    GREATERTN       reduce using rule 76 (call_lets -> INI_INT check_global_const_exists .)
    LESSTN          reduce using rule 76 (call_lets -> INI_INT check_global_const_exists .)
    SAME            reduce using rule 76 (call_lets -> INI_INT check_global_const_exists .)
    NOTSAME         reduce using rule 76 (call_lets -> INI_INT check_global_const_exists .)


state 82

    (78) check_global_const_exists -> add_operand .

    TIMES_BY_SAME   reduce using rule 78 (check_global_const_exists -> add_operand .)
    SPLIT_BY        reduce using rule 78 (check_global_const_exists -> add_operand .)
    MULT_BY         reduce using rule 78 (check_global_const_exists -> add_operand .)
    ADD             reduce using rule 78 (check_global_const_exists -> add_operand .)
    LESS            reduce using rule 78 (check_global_const_exists -> add_operand .)
    IF              reduce using rule 78 (check_global_const_exists -> add_operand .)
    WHILE           reduce using rule 78 (check_global_const_exists -> add_operand .)
    ID              reduce using rule 78 (check_global_const_exists -> add_operand .)
    LEFTPARENT      reduce using rule 78 (check_global_const_exists -> add_operand .)
    INI_INT         reduce using rule 78 (check_global_const_exists -> add_operand .)
    INI_FLOAT       reduce using rule 78 (check_global_const_exists -> add_operand .)
    RIGHTKEY        reduce using rule 78 (check_global_const_exists -> add_operand .)
    RIGHTPARENT     reduce using rule 78 (check_global_const_exists -> add_operand .)
    GREATERTN       reduce using rule 78 (check_global_const_exists -> add_operand .)
    LESSTN          reduce using rule 78 (check_global_const_exists -> add_operand .)
    SAME            reduce using rule 78 (check_global_const_exists -> add_operand .)
    NOTSAME         reduce using rule 78 (check_global_const_exists -> add_operand .)
    DOTCOMMA        reduce using rule 78 (check_global_const_exists -> add_operand .)


state 83

    (77) call_lets -> INI_FLOAT check_global_const_exists .

    TIMES_BY_SAME   reduce using rule 77 (call_lets -> INI_FLOAT check_global_const_exists .)
    SPLIT_BY        reduce using rule 77 (call_lets -> INI_FLOAT check_global_const_exists .)
    MULT_BY         reduce using rule 77 (call_lets -> INI_FLOAT check_global_const_exists .)
    ADD             reduce using rule 77 (call_lets -> INI_FLOAT check_global_const_exists .)
    LESS            reduce using rule 77 (call_lets -> INI_FLOAT check_global_const_exists .)
    IF              reduce using rule 77 (call_lets -> INI_FLOAT check_global_const_exists .)
    WHILE           reduce using rule 77 (call_lets -> INI_FLOAT check_global_const_exists .)
    ID              reduce using rule 77 (call_lets -> INI_FLOAT check_global_const_exists .)
    LEFTPARENT      reduce using rule 77 (call_lets -> INI_FLOAT check_global_const_exists .)
    INI_INT         reduce using rule 77 (call_lets -> INI_FLOAT check_global_const_exists .)
    INI_FLOAT       reduce using rule 77 (call_lets -> INI_FLOAT check_global_const_exists .)
    RIGHTKEY        reduce using rule 77 (call_lets -> INI_FLOAT check_global_const_exists .)
    RIGHTPARENT     reduce using rule 77 (call_lets -> INI_FLOAT check_global_const_exists .)
    DOTCOMMA        reduce using rule 77 (call_lets -> INI_FLOAT check_global_const_exists .)
    GREATERTN       reduce using rule 77 (call_lets -> INI_FLOAT check_global_const_exists .)
    LESSTN          reduce using rule 77 (call_lets -> INI_FLOAT check_global_const_exists .)
    SAME            reduce using rule 77 (call_lets -> INI_FLOAT check_global_const_exists .)
    NOTSAME         reduce using rule 77 (call_lets -> INI_FLOAT check_global_const_exists .)


state 84

    (66) assign -> call_let set_appear SET . set_value
    (67) assign -> call_let set_appear SET . expresion_line seen_final_asignacion DOTCOMMA
    (80) set_value -> . INI_INT aux_int_check append_operand DOTCOMMA
    (81) set_value -> . INI_FLOAT aux_float_check append_operand DOTCOMMA
    (48) expresion_line -> . term term_appear
    (49) expresion_line -> . term term_appear aux_expresion
    (52) term -> . fact factor_appear
    (53) term -> . fact factor_appear aux_term
    (56) fact -> . expo expo_appear
    (57) fact -> . expo expo_appear aux_expo
    (58) expo -> . parent_aux
    (59) expo -> . call_lets
    (60) expo -> . call_let
    (61) parent_aux -> . LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent
    (76) call_lets -> . INI_INT check_global_const_exists
    (77) call_lets -> . INI_FLOAT check_global_const_exists
    (75) call_let -> . ID check_let_exists

    INI_INT         shift and go to state 99
    INI_FLOAT       shift and go to state 100
    LEFTPARENT      shift and go to state 62
    ID              shift and go to state 64

    call_let                       shift and go to state 90
    set_value                      shift and go to state 97
    expresion_line                 shift and go to state 98
    term                           shift and go to state 60
    fact                           shift and go to state 65
    expo                           shift and go to state 66
    parent_aux                     shift and go to state 67
    call_lets                      shift and go to state 68

state 85

    (49) expresion_line -> term term_appear aux_expresion .

    IF              reduce using rule 49 (expresion_line -> term term_appear aux_expresion .)
    WHILE           reduce using rule 49 (expresion_line -> term term_appear aux_expresion .)
    ID              reduce using rule 49 (expresion_line -> term term_appear aux_expresion .)
    LEFTPARENT      reduce using rule 49 (expresion_line -> term term_appear aux_expresion .)
    INI_INT         reduce using rule 49 (expresion_line -> term term_appear aux_expresion .)
    INI_FLOAT       reduce using rule 49 (expresion_line -> term term_appear aux_expresion .)
    RIGHTKEY        reduce using rule 49 (expresion_line -> term term_appear aux_expresion .)
    RIGHTPARENT     reduce using rule 49 (expresion_line -> term term_appear aux_expresion .)
    DOTCOMMA        reduce using rule 49 (expresion_line -> term term_appear aux_expresion .)
    GREATERTN       reduce using rule 49 (expresion_line -> term term_appear aux_expresion .)
    LESSTN          reduce using rule 49 (expresion_line -> term term_appear aux_expresion .)
    SAME            reduce using rule 49 (expresion_line -> term term_appear aux_expresion .)
    NOTSAME         reduce using rule 49 (expresion_line -> term term_appear aux_expresion .)


state 86

    (50) aux_expresion -> ADD . add_operator expresion_line
    (70) add_operator -> .

    LEFTPARENT      reduce using rule 70 (add_operator -> .)
    INI_INT         reduce using rule 70 (add_operator -> .)
    INI_FLOAT       reduce using rule 70 (add_operator -> .)
    ID              reduce using rule 70 (add_operator -> .)

    add_operator                   shift and go to state 101

state 87

    (51) aux_expresion -> LESS . add_operator expresion_line
    (70) add_operator -> .

    LEFTPARENT      reduce using rule 70 (add_operator -> .)
    INI_INT         reduce using rule 70 (add_operator -> .)
    INI_FLOAT       reduce using rule 70 (add_operator -> .)
    ID              reduce using rule 70 (add_operator -> .)

    add_operator                   shift and go to state 102

state 88

    (35) condition -> IF LEFTPARENT found_init_parent . condition_expresion right_parent_condition RIGHTPARENT func_code end_cond condition_end_check
    (46) condition_expresion -> . expresion_line condtion_appear
    (47) condition_expresion -> . expresion_line condition_signs expresion_line condtion_appear
    (48) expresion_line -> . term term_appear
    (49) expresion_line -> . term term_appear aux_expresion
    (52) term -> . fact factor_appear
    (53) term -> . fact factor_appear aux_term
    (56) fact -> . expo expo_appear
    (57) fact -> . expo expo_appear aux_expo
    (58) expo -> . parent_aux
    (59) expo -> . call_lets
    (60) expo -> . call_let
    (61) parent_aux -> . LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent
    (76) call_lets -> . INI_INT check_global_const_exists
    (77) call_lets -> . INI_FLOAT check_global_const_exists
    (75) call_let -> . ID check_let_exists

    LEFTPARENT      shift and go to state 62
    INI_INT         shift and go to state 69
    INI_FLOAT       shift and go to state 70
    ID              shift and go to state 64

    condition_expresion            shift and go to state 103
    expresion_line                 shift and go to state 104
    term                           shift and go to state 60
    fact                           shift and go to state 65
    expo                           shift and go to state 66
    parent_aux                     shift and go to state 67
    call_lets                      shift and go to state 68
    call_let                       shift and go to state 90

state 89

    (61) parent_aux -> LEFTPARENT found_init_parent expresion_line . RIGHTPARENT found_end_parent

    RIGHTPARENT     shift and go to state 105


state 90

    (60) expo -> call_let .

    TIMES_BY_SAME   reduce using rule 60 (expo -> call_let .)
    SPLIT_BY        reduce using rule 60 (expo -> call_let .)
    MULT_BY         reduce using rule 60 (expo -> call_let .)
    ADD             reduce using rule 60 (expo -> call_let .)
    LESS            reduce using rule 60 (expo -> call_let .)
    RIGHTPARENT     reduce using rule 60 (expo -> call_let .)
    DOTCOMMA        reduce using rule 60 (expo -> call_let .)
    GREATERTN       reduce using rule 60 (expo -> call_let .)
    LESSTN          reduce using rule 60 (expo -> call_let .)
    SAME            reduce using rule 60 (expo -> call_let .)
    NOTSAME         reduce using rule 60 (expo -> call_let .)
    LEFTPARENT      reduce using rule 60 (expo -> call_let .)
    INI_INT         reduce using rule 60 (expo -> call_let .)
    INI_FLOAT       reduce using rule 60 (expo -> call_let .)
    ID              reduce using rule 60 (expo -> call_let .)
    IF              reduce using rule 60 (expo -> call_let .)
    WHILE           reduce using rule 60 (expo -> call_let .)
    RIGHTKEY        reduce using rule 60 (expo -> call_let .)


state 91

    (33) while -> WHILE while_appear LEFTPARENT . condition_expresion right_parent_condition RIGHTPARENT func_code end_cond
    (46) condition_expresion -> . expresion_line condtion_appear
    (47) condition_expresion -> . expresion_line condition_signs expresion_line condtion_appear
    (48) expresion_line -> . term term_appear
    (49) expresion_line -> . term term_appear aux_expresion
    (52) term -> . fact factor_appear
    (53) term -> . fact factor_appear aux_term
    (56) fact -> . expo expo_appear
    (57) fact -> . expo expo_appear aux_expo
    (58) expo -> . parent_aux
    (59) expo -> . call_lets
    (60) expo -> . call_let
    (61) parent_aux -> . LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent
    (76) call_lets -> . INI_INT check_global_const_exists
    (77) call_lets -> . INI_FLOAT check_global_const_exists
    (75) call_let -> . ID check_let_exists

    LEFTPARENT      shift and go to state 62
    INI_INT         shift and go to state 69
    INI_FLOAT       shift and go to state 70
    ID              shift and go to state 64

    condition_expresion            shift and go to state 106
    expresion_line                 shift and go to state 104
    term                           shift and go to state 60
    fact                           shift and go to state 65
    expo                           shift and go to state 66
    parent_aux                     shift and go to state 67
    call_lets                      shift and go to state 68
    call_let                       shift and go to state 90

state 92

    (53) term -> fact factor_appear aux_term .

    ADD             reduce using rule 53 (term -> fact factor_appear aux_term .)
    LESS            reduce using rule 53 (term -> fact factor_appear aux_term .)
    IF              reduce using rule 53 (term -> fact factor_appear aux_term .)
    WHILE           reduce using rule 53 (term -> fact factor_appear aux_term .)
    ID              reduce using rule 53 (term -> fact factor_appear aux_term .)
    LEFTPARENT      reduce using rule 53 (term -> fact factor_appear aux_term .)
    INI_INT         reduce using rule 53 (term -> fact factor_appear aux_term .)
    INI_FLOAT       reduce using rule 53 (term -> fact factor_appear aux_term .)
    RIGHTKEY        reduce using rule 53 (term -> fact factor_appear aux_term .)
    RIGHTPARENT     reduce using rule 53 (term -> fact factor_appear aux_term .)
    DOTCOMMA        reduce using rule 53 (term -> fact factor_appear aux_term .)
    GREATERTN       reduce using rule 53 (term -> fact factor_appear aux_term .)
    LESSTN          reduce using rule 53 (term -> fact factor_appear aux_term .)
    SAME            reduce using rule 53 (term -> fact factor_appear aux_term .)
    NOTSAME         reduce using rule 53 (term -> fact factor_appear aux_term .)


state 93

    (54) aux_term -> SPLIT_BY . add_operator term
    (70) add_operator -> .

    LEFTPARENT      reduce using rule 70 (add_operator -> .)
    INI_INT         reduce using rule 70 (add_operator -> .)
    INI_FLOAT       reduce using rule 70 (add_operator -> .)
    ID              reduce using rule 70 (add_operator -> .)

    add_operator                   shift and go to state 107

state 94

    (55) aux_term -> MULT_BY . add_operator term
    (70) add_operator -> .

    LEFTPARENT      reduce using rule 70 (add_operator -> .)
    INI_INT         reduce using rule 70 (add_operator -> .)
    INI_FLOAT       reduce using rule 70 (add_operator -> .)
    ID              reduce using rule 70 (add_operator -> .)

    add_operator                   shift and go to state 108

state 95

    (57) fact -> expo expo_appear aux_expo .

    SPLIT_BY        reduce using rule 57 (fact -> expo expo_appear aux_expo .)
    MULT_BY         reduce using rule 57 (fact -> expo expo_appear aux_expo .)
    ADD             reduce using rule 57 (fact -> expo expo_appear aux_expo .)
    LESS            reduce using rule 57 (fact -> expo expo_appear aux_expo .)
    IF              reduce using rule 57 (fact -> expo expo_appear aux_expo .)
    WHILE           reduce using rule 57 (fact -> expo expo_appear aux_expo .)
    ID              reduce using rule 57 (fact -> expo expo_appear aux_expo .)
    LEFTPARENT      reduce using rule 57 (fact -> expo expo_appear aux_expo .)
    INI_INT         reduce using rule 57 (fact -> expo expo_appear aux_expo .)
    INI_FLOAT       reduce using rule 57 (fact -> expo expo_appear aux_expo .)
    RIGHTKEY        reduce using rule 57 (fact -> expo expo_appear aux_expo .)
    RIGHTPARENT     reduce using rule 57 (fact -> expo expo_appear aux_expo .)
    DOTCOMMA        reduce using rule 57 (fact -> expo expo_appear aux_expo .)
    GREATERTN       reduce using rule 57 (fact -> expo expo_appear aux_expo .)
    LESSTN          reduce using rule 57 (fact -> expo expo_appear aux_expo .)
    SAME            reduce using rule 57 (fact -> expo expo_appear aux_expo .)
    NOTSAME         reduce using rule 57 (fact -> expo expo_appear aux_expo .)


state 96

    (65) aux_expo -> TIMES_BY_SAME . add_operator fact
    (70) add_operator -> .

    LEFTPARENT      reduce using rule 70 (add_operator -> .)
    INI_INT         reduce using rule 70 (add_operator -> .)
    INI_FLOAT       reduce using rule 70 (add_operator -> .)
    ID              reduce using rule 70 (add_operator -> .)

    add_operator                   shift and go to state 109

state 97

    (66) assign -> call_let set_appear SET set_value .

    IF              reduce using rule 66 (assign -> call_let set_appear SET set_value .)
    WHILE           reduce using rule 66 (assign -> call_let set_appear SET set_value .)
    ID              reduce using rule 66 (assign -> call_let set_appear SET set_value .)
    LEFTPARENT      reduce using rule 66 (assign -> call_let set_appear SET set_value .)
    INI_INT         reduce using rule 66 (assign -> call_let set_appear SET set_value .)
    INI_FLOAT       reduce using rule 66 (assign -> call_let set_appear SET set_value .)
    RIGHTKEY        reduce using rule 66 (assign -> call_let set_appear SET set_value .)


state 98

    (67) assign -> call_let set_appear SET expresion_line . seen_final_asignacion DOTCOMMA
    (68) seen_final_asignacion -> .

    DOTCOMMA        reduce using rule 68 (seen_final_asignacion -> .)

    seen_final_asignacion          shift and go to state 110

state 99

    (80) set_value -> INI_INT . aux_int_check append_operand DOTCOMMA
    (76) call_lets -> INI_INT . check_global_const_exists
    (83) aux_int_check -> .
    (78) check_global_const_exists -> . add_operand
    (69) add_operand -> .

  ! reduce/reduce conflict for DOTCOMMA resolved using rule 69 (add_operand -> .)
    TIMES_BY_SAME   reduce using rule 69 (add_operand -> .)
    SPLIT_BY        reduce using rule 69 (add_operand -> .)
    MULT_BY         reduce using rule 69 (add_operand -> .)
    ADD             reduce using rule 69 (add_operand -> .)
    LESS            reduce using rule 69 (add_operand -> .)
    DOTCOMMA        reduce using rule 69 (add_operand -> .)

  ! DOTCOMMA        [ reduce using rule 83 (aux_int_check -> .) ]

    aux_int_check                  shift and go to state 111
    check_global_const_exists      shift and go to state 81
    add_operand                    shift and go to state 82

state 100

    (81) set_value -> INI_FLOAT . aux_float_check append_operand DOTCOMMA
    (77) call_lets -> INI_FLOAT . check_global_const_exists
    (84) aux_float_check -> .
    (78) check_global_const_exists -> . add_operand
    (69) add_operand -> .

  ! reduce/reduce conflict for DOTCOMMA resolved using rule 69 (add_operand -> .)
    TIMES_BY_SAME   reduce using rule 69 (add_operand -> .)
    SPLIT_BY        reduce using rule 69 (add_operand -> .)
    MULT_BY         reduce using rule 69 (add_operand -> .)
    ADD             reduce using rule 69 (add_operand -> .)
    LESS            reduce using rule 69 (add_operand -> .)
    DOTCOMMA        reduce using rule 69 (add_operand -> .)

  ! DOTCOMMA        [ reduce using rule 84 (aux_float_check -> .) ]

    aux_float_check                shift and go to state 112
    check_global_const_exists      shift and go to state 83
    add_operand                    shift and go to state 82

state 101

    (50) aux_expresion -> ADD add_operator . expresion_line
    (48) expresion_line -> . term term_appear
    (49) expresion_line -> . term term_appear aux_expresion
    (52) term -> . fact factor_appear
    (53) term -> . fact factor_appear aux_term
    (56) fact -> . expo expo_appear
    (57) fact -> . expo expo_appear aux_expo
    (58) expo -> . parent_aux
    (59) expo -> . call_lets
    (60) expo -> . call_let
    (61) parent_aux -> . LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent
    (76) call_lets -> . INI_INT check_global_const_exists
    (77) call_lets -> . INI_FLOAT check_global_const_exists
    (75) call_let -> . ID check_let_exists

    LEFTPARENT      shift and go to state 62
    INI_INT         shift and go to state 69
    INI_FLOAT       shift and go to state 70
    ID              shift and go to state 64

    expresion_line                 shift and go to state 113
    term                           shift and go to state 60
    fact                           shift and go to state 65
    expo                           shift and go to state 66
    parent_aux                     shift and go to state 67
    call_lets                      shift and go to state 68
    call_let                       shift and go to state 90

state 102

    (51) aux_expresion -> LESS add_operator . expresion_line
    (48) expresion_line -> . term term_appear
    (49) expresion_line -> . term term_appear aux_expresion
    (52) term -> . fact factor_appear
    (53) term -> . fact factor_appear aux_term
    (56) fact -> . expo expo_appear
    (57) fact -> . expo expo_appear aux_expo
    (58) expo -> . parent_aux
    (59) expo -> . call_lets
    (60) expo -> . call_let
    (61) parent_aux -> . LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent
    (76) call_lets -> . INI_INT check_global_const_exists
    (77) call_lets -> . INI_FLOAT check_global_const_exists
    (75) call_let -> . ID check_let_exists

    LEFTPARENT      shift and go to state 62
    INI_INT         shift and go to state 69
    INI_FLOAT       shift and go to state 70
    ID              shift and go to state 64

    expresion_line                 shift and go to state 114
    term                           shift and go to state 60
    fact                           shift and go to state 65
    expo                           shift and go to state 66
    parent_aux                     shift and go to state 67
    call_lets                      shift and go to state 68
    call_let                       shift and go to state 90

state 103

    (35) condition -> IF LEFTPARENT found_init_parent condition_expresion . right_parent_condition RIGHTPARENT func_code end_cond condition_end_check
    (62) right_parent_condition -> .

    RIGHTPARENT     reduce using rule 62 (right_parent_condition -> .)

    right_parent_condition         shift and go to state 115

state 104

    (46) condition_expresion -> expresion_line . condtion_appear
    (47) condition_expresion -> expresion_line . condition_signs expresion_line condtion_appear
    (36) condtion_appear -> .
    (41) condition_signs -> . GREATERTN add_operator
    (42) condition_signs -> . LESSTN add_operator
    (43) condition_signs -> . SAME add_operator
    (44) condition_signs -> . NOTSAME add_operator
    (45) condition_signs -> .

    RIGHTPARENT     reduce using rule 36 (condtion_appear -> .)
    GREATERTN       shift and go to state 118
    LESSTN          shift and go to state 119
    SAME            shift and go to state 120
    NOTSAME         shift and go to state 121
    LEFTPARENT      reduce using rule 45 (condition_signs -> .)
    INI_INT         reduce using rule 45 (condition_signs -> .)
    INI_FLOAT       reduce using rule 45 (condition_signs -> .)
    ID              reduce using rule 45 (condition_signs -> .)

    condtion_appear                shift and go to state 116
    condition_signs                shift and go to state 117

state 105

    (61) parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT . found_end_parent
    (64) found_end_parent -> .

    TIMES_BY_SAME   reduce using rule 64 (found_end_parent -> .)
    SPLIT_BY        reduce using rule 64 (found_end_parent -> .)
    MULT_BY         reduce using rule 64 (found_end_parent -> .)
    ADD             reduce using rule 64 (found_end_parent -> .)
    LESS            reduce using rule 64 (found_end_parent -> .)
    IF              reduce using rule 64 (found_end_parent -> .)
    WHILE           reduce using rule 64 (found_end_parent -> .)
    ID              reduce using rule 64 (found_end_parent -> .)
    LEFTPARENT      reduce using rule 64 (found_end_parent -> .)
    INI_INT         reduce using rule 64 (found_end_parent -> .)
    INI_FLOAT       reduce using rule 64 (found_end_parent -> .)
    RIGHTKEY        reduce using rule 64 (found_end_parent -> .)
    RIGHTPARENT     reduce using rule 64 (found_end_parent -> .)
    DOTCOMMA        reduce using rule 64 (found_end_parent -> .)
    GREATERTN       reduce using rule 64 (found_end_parent -> .)
    LESSTN          reduce using rule 64 (found_end_parent -> .)
    SAME            reduce using rule 64 (found_end_parent -> .)
    NOTSAME         reduce using rule 64 (found_end_parent -> .)

    found_end_parent               shift and go to state 122

state 106

    (33) while -> WHILE while_appear LEFTPARENT condition_expresion . right_parent_condition RIGHTPARENT func_code end_cond
    (62) right_parent_condition -> .

    RIGHTPARENT     reduce using rule 62 (right_parent_condition -> .)

    right_parent_condition         shift and go to state 123

state 107

    (54) aux_term -> SPLIT_BY add_operator . term
    (52) term -> . fact factor_appear
    (53) term -> . fact factor_appear aux_term
    (56) fact -> . expo expo_appear
    (57) fact -> . expo expo_appear aux_expo
    (58) expo -> . parent_aux
    (59) expo -> . call_lets
    (60) expo -> . call_let
    (61) parent_aux -> . LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent
    (76) call_lets -> . INI_INT check_global_const_exists
    (77) call_lets -> . INI_FLOAT check_global_const_exists
    (75) call_let -> . ID check_let_exists

    LEFTPARENT      shift and go to state 62
    INI_INT         shift and go to state 69
    INI_FLOAT       shift and go to state 70
    ID              shift and go to state 64

    term                           shift and go to state 124
    fact                           shift and go to state 65
    expo                           shift and go to state 66
    parent_aux                     shift and go to state 67
    call_lets                      shift and go to state 68
    call_let                       shift and go to state 90

state 108

    (55) aux_term -> MULT_BY add_operator . term
    (52) term -> . fact factor_appear
    (53) term -> . fact factor_appear aux_term
    (56) fact -> . expo expo_appear
    (57) fact -> . expo expo_appear aux_expo
    (58) expo -> . parent_aux
    (59) expo -> . call_lets
    (60) expo -> . call_let
    (61) parent_aux -> . LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent
    (76) call_lets -> . INI_INT check_global_const_exists
    (77) call_lets -> . INI_FLOAT check_global_const_exists
    (75) call_let -> . ID check_let_exists

    LEFTPARENT      shift and go to state 62
    INI_INT         shift and go to state 69
    INI_FLOAT       shift and go to state 70
    ID              shift and go to state 64

    term                           shift and go to state 125
    fact                           shift and go to state 65
    expo                           shift and go to state 66
    parent_aux                     shift and go to state 67
    call_lets                      shift and go to state 68
    call_let                       shift and go to state 90

state 109

    (65) aux_expo -> TIMES_BY_SAME add_operator . fact
    (56) fact -> . expo expo_appear
    (57) fact -> . expo expo_appear aux_expo
    (58) expo -> . parent_aux
    (59) expo -> . call_lets
    (60) expo -> . call_let
    (61) parent_aux -> . LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent
    (76) call_lets -> . INI_INT check_global_const_exists
    (77) call_lets -> . INI_FLOAT check_global_const_exists
    (75) call_let -> . ID check_let_exists

    LEFTPARENT      shift and go to state 62
    INI_INT         shift and go to state 69
    INI_FLOAT       shift and go to state 70
    ID              shift and go to state 64

    fact                           shift and go to state 126
    expo                           shift and go to state 66
    parent_aux                     shift and go to state 67
    call_lets                      shift and go to state 68
    call_let                       shift and go to state 90

state 110

    (67) assign -> call_let set_appear SET expresion_line seen_final_asignacion . DOTCOMMA

    DOTCOMMA        shift and go to state 127


state 111

    (80) set_value -> INI_INT aux_int_check . append_operand DOTCOMMA
    (82) append_operand -> .

    DOTCOMMA        reduce using rule 82 (append_operand -> .)

    append_operand                 shift and go to state 128

state 112

    (81) set_value -> INI_FLOAT aux_float_check . append_operand DOTCOMMA
    (82) append_operand -> .

    DOTCOMMA        reduce using rule 82 (append_operand -> .)

    append_operand                 shift and go to state 129

state 113

    (50) aux_expresion -> ADD add_operator expresion_line .

    IF              reduce using rule 50 (aux_expresion -> ADD add_operator expresion_line .)
    WHILE           reduce using rule 50 (aux_expresion -> ADD add_operator expresion_line .)
    ID              reduce using rule 50 (aux_expresion -> ADD add_operator expresion_line .)
    LEFTPARENT      reduce using rule 50 (aux_expresion -> ADD add_operator expresion_line .)
    INI_INT         reduce using rule 50 (aux_expresion -> ADD add_operator expresion_line .)
    INI_FLOAT       reduce using rule 50 (aux_expresion -> ADD add_operator expresion_line .)
    RIGHTKEY        reduce using rule 50 (aux_expresion -> ADD add_operator expresion_line .)
    RIGHTPARENT     reduce using rule 50 (aux_expresion -> ADD add_operator expresion_line .)
    DOTCOMMA        reduce using rule 50 (aux_expresion -> ADD add_operator expresion_line .)
    GREATERTN       reduce using rule 50 (aux_expresion -> ADD add_operator expresion_line .)
    LESSTN          reduce using rule 50 (aux_expresion -> ADD add_operator expresion_line .)
    SAME            reduce using rule 50 (aux_expresion -> ADD add_operator expresion_line .)
    NOTSAME         reduce using rule 50 (aux_expresion -> ADD add_operator expresion_line .)


state 114

    (51) aux_expresion -> LESS add_operator expresion_line .

    IF              reduce using rule 51 (aux_expresion -> LESS add_operator expresion_line .)
    WHILE           reduce using rule 51 (aux_expresion -> LESS add_operator expresion_line .)
    ID              reduce using rule 51 (aux_expresion -> LESS add_operator expresion_line .)
    LEFTPARENT      reduce using rule 51 (aux_expresion -> LESS add_operator expresion_line .)
    INI_INT         reduce using rule 51 (aux_expresion -> LESS add_operator expresion_line .)
    INI_FLOAT       reduce using rule 51 (aux_expresion -> LESS add_operator expresion_line .)
    RIGHTKEY        reduce using rule 51 (aux_expresion -> LESS add_operator expresion_line .)
    RIGHTPARENT     reduce using rule 51 (aux_expresion -> LESS add_operator expresion_line .)
    DOTCOMMA        reduce using rule 51 (aux_expresion -> LESS add_operator expresion_line .)
    GREATERTN       reduce using rule 51 (aux_expresion -> LESS add_operator expresion_line .)
    LESSTN          reduce using rule 51 (aux_expresion -> LESS add_operator expresion_line .)
    SAME            reduce using rule 51 (aux_expresion -> LESS add_operator expresion_line .)
    NOTSAME         reduce using rule 51 (aux_expresion -> LESS add_operator expresion_line .)


state 115

    (35) condition -> IF LEFTPARENT found_init_parent condition_expresion right_parent_condition . RIGHTPARENT func_code end_cond condition_end_check

    RIGHTPARENT     shift and go to state 130


state 116

    (46) condition_expresion -> expresion_line condtion_appear .

    RIGHTPARENT     reduce using rule 46 (condition_expresion -> expresion_line condtion_appear .)


state 117

    (47) condition_expresion -> expresion_line condition_signs . expresion_line condtion_appear
    (48) expresion_line -> . term term_appear
    (49) expresion_line -> . term term_appear aux_expresion
    (52) term -> . fact factor_appear
    (53) term -> . fact factor_appear aux_term
    (56) fact -> . expo expo_appear
    (57) fact -> . expo expo_appear aux_expo
    (58) expo -> . parent_aux
    (59) expo -> . call_lets
    (60) expo -> . call_let
    (61) parent_aux -> . LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent
    (76) call_lets -> . INI_INT check_global_const_exists
    (77) call_lets -> . INI_FLOAT check_global_const_exists
    (75) call_let -> . ID check_let_exists

    LEFTPARENT      shift and go to state 62
    INI_INT         shift and go to state 69
    INI_FLOAT       shift and go to state 70
    ID              shift and go to state 64

    expresion_line                 shift and go to state 131
    term                           shift and go to state 60
    fact                           shift and go to state 65
    expo                           shift and go to state 66
    parent_aux                     shift and go to state 67
    call_lets                      shift and go to state 68
    call_let                       shift and go to state 90

state 118

    (41) condition_signs -> GREATERTN . add_operator
    (70) add_operator -> .

    LEFTPARENT      reduce using rule 70 (add_operator -> .)
    INI_INT         reduce using rule 70 (add_operator -> .)
    INI_FLOAT       reduce using rule 70 (add_operator -> .)
    ID              reduce using rule 70 (add_operator -> .)

    add_operator                   shift and go to state 132

state 119

    (42) condition_signs -> LESSTN . add_operator
    (70) add_operator -> .

    LEFTPARENT      reduce using rule 70 (add_operator -> .)
    INI_INT         reduce using rule 70 (add_operator -> .)
    INI_FLOAT       reduce using rule 70 (add_operator -> .)
    ID              reduce using rule 70 (add_operator -> .)

    add_operator                   shift and go to state 133

state 120

    (43) condition_signs -> SAME . add_operator
    (70) add_operator -> .

    LEFTPARENT      reduce using rule 70 (add_operator -> .)
    INI_INT         reduce using rule 70 (add_operator -> .)
    INI_FLOAT       reduce using rule 70 (add_operator -> .)
    ID              reduce using rule 70 (add_operator -> .)

    add_operator                   shift and go to state 134

state 121

    (44) condition_signs -> NOTSAME . add_operator
    (70) add_operator -> .

    LEFTPARENT      reduce using rule 70 (add_operator -> .)
    INI_INT         reduce using rule 70 (add_operator -> .)
    INI_FLOAT       reduce using rule 70 (add_operator -> .)
    ID              reduce using rule 70 (add_operator -> .)

    add_operator                   shift and go to state 135

state 122

    (61) parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent .

    TIMES_BY_SAME   reduce using rule 61 (parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent .)
    SPLIT_BY        reduce using rule 61 (parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent .)
    MULT_BY         reduce using rule 61 (parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent .)
    ADD             reduce using rule 61 (parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent .)
    LESS            reduce using rule 61 (parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent .)
    IF              reduce using rule 61 (parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent .)
    WHILE           reduce using rule 61 (parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent .)
    ID              reduce using rule 61 (parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent .)
    LEFTPARENT      reduce using rule 61 (parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent .)
    INI_INT         reduce using rule 61 (parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent .)
    INI_FLOAT       reduce using rule 61 (parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent .)
    RIGHTKEY        reduce using rule 61 (parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent .)
    RIGHTPARENT     reduce using rule 61 (parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent .)
    DOTCOMMA        reduce using rule 61 (parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent .)
    GREATERTN       reduce using rule 61 (parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent .)
    LESSTN          reduce using rule 61 (parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent .)
    SAME            reduce using rule 61 (parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent .)
    NOTSAME         reduce using rule 61 (parent_aux -> LEFTPARENT found_init_parent expresion_line RIGHTPARENT found_end_parent .)


state 123

    (33) while -> WHILE while_appear LEFTPARENT condition_expresion right_parent_condition . RIGHTPARENT func_code end_cond

    RIGHTPARENT     shift and go to state 136


state 124

    (54) aux_term -> SPLIT_BY add_operator term .

    ADD             reduce using rule 54 (aux_term -> SPLIT_BY add_operator term .)
    LESS            reduce using rule 54 (aux_term -> SPLIT_BY add_operator term .)
    IF              reduce using rule 54 (aux_term -> SPLIT_BY add_operator term .)
    WHILE           reduce using rule 54 (aux_term -> SPLIT_BY add_operator term .)
    ID              reduce using rule 54 (aux_term -> SPLIT_BY add_operator term .)
    LEFTPARENT      reduce using rule 54 (aux_term -> SPLIT_BY add_operator term .)
    INI_INT         reduce using rule 54 (aux_term -> SPLIT_BY add_operator term .)
    INI_FLOAT       reduce using rule 54 (aux_term -> SPLIT_BY add_operator term .)
    RIGHTKEY        reduce using rule 54 (aux_term -> SPLIT_BY add_operator term .)
    RIGHTPARENT     reduce using rule 54 (aux_term -> SPLIT_BY add_operator term .)
    DOTCOMMA        reduce using rule 54 (aux_term -> SPLIT_BY add_operator term .)
    GREATERTN       reduce using rule 54 (aux_term -> SPLIT_BY add_operator term .)
    LESSTN          reduce using rule 54 (aux_term -> SPLIT_BY add_operator term .)
    SAME            reduce using rule 54 (aux_term -> SPLIT_BY add_operator term .)
    NOTSAME         reduce using rule 54 (aux_term -> SPLIT_BY add_operator term .)


state 125

    (55) aux_term -> MULT_BY add_operator term .

    ADD             reduce using rule 55 (aux_term -> MULT_BY add_operator term .)
    LESS            reduce using rule 55 (aux_term -> MULT_BY add_operator term .)
    IF              reduce using rule 55 (aux_term -> MULT_BY add_operator term .)
    WHILE           reduce using rule 55 (aux_term -> MULT_BY add_operator term .)
    ID              reduce using rule 55 (aux_term -> MULT_BY add_operator term .)
    LEFTPARENT      reduce using rule 55 (aux_term -> MULT_BY add_operator term .)
    INI_INT         reduce using rule 55 (aux_term -> MULT_BY add_operator term .)
    INI_FLOAT       reduce using rule 55 (aux_term -> MULT_BY add_operator term .)
    RIGHTKEY        reduce using rule 55 (aux_term -> MULT_BY add_operator term .)
    RIGHTPARENT     reduce using rule 55 (aux_term -> MULT_BY add_operator term .)
    DOTCOMMA        reduce using rule 55 (aux_term -> MULT_BY add_operator term .)
    GREATERTN       reduce using rule 55 (aux_term -> MULT_BY add_operator term .)
    LESSTN          reduce using rule 55 (aux_term -> MULT_BY add_operator term .)
    SAME            reduce using rule 55 (aux_term -> MULT_BY add_operator term .)
    NOTSAME         reduce using rule 55 (aux_term -> MULT_BY add_operator term .)


state 126

    (65) aux_expo -> TIMES_BY_SAME add_operator fact .

    SPLIT_BY        reduce using rule 65 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    MULT_BY         reduce using rule 65 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    ADD             reduce using rule 65 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    LESS            reduce using rule 65 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    IF              reduce using rule 65 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    WHILE           reduce using rule 65 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    ID              reduce using rule 65 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    LEFTPARENT      reduce using rule 65 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    INI_INT         reduce using rule 65 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    INI_FLOAT       reduce using rule 65 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    RIGHTKEY        reduce using rule 65 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    RIGHTPARENT     reduce using rule 65 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    DOTCOMMA        reduce using rule 65 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    GREATERTN       reduce using rule 65 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    LESSTN          reduce using rule 65 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    SAME            reduce using rule 65 (aux_expo -> TIMES_BY_SAME add_operator fact .)
    NOTSAME         reduce using rule 65 (aux_expo -> TIMES_BY_SAME add_operator fact .)


state 127

    (67) assign -> call_let set_appear SET expresion_line seen_final_asignacion DOTCOMMA .

    IF              reduce using rule 67 (assign -> call_let set_appear SET expresion_line seen_final_asignacion DOTCOMMA .)
    WHILE           reduce using rule 67 (assign -> call_let set_appear SET expresion_line seen_final_asignacion DOTCOMMA .)
    ID              reduce using rule 67 (assign -> call_let set_appear SET expresion_line seen_final_asignacion DOTCOMMA .)
    LEFTPARENT      reduce using rule 67 (assign -> call_let set_appear SET expresion_line seen_final_asignacion DOTCOMMA .)
    INI_INT         reduce using rule 67 (assign -> call_let set_appear SET expresion_line seen_final_asignacion DOTCOMMA .)
    INI_FLOAT       reduce using rule 67 (assign -> call_let set_appear SET expresion_line seen_final_asignacion DOTCOMMA .)
    RIGHTKEY        reduce using rule 67 (assign -> call_let set_appear SET expresion_line seen_final_asignacion DOTCOMMA .)


state 128

    (80) set_value -> INI_INT aux_int_check append_operand . DOTCOMMA

    DOTCOMMA        shift and go to state 137


state 129

    (81) set_value -> INI_FLOAT aux_float_check append_operand . DOTCOMMA

    DOTCOMMA        shift and go to state 138


state 130

    (35) condition -> IF LEFTPARENT found_init_parent condition_expresion right_parent_condition RIGHTPARENT . func_code end_cond condition_end_check
    (26) func_code -> . LEFTKEY lets func_code_aux RIGHTKEY

    LEFTKEY         shift and go to state 48

    func_code                      shift and go to state 139

state 131

    (47) condition_expresion -> expresion_line condition_signs expresion_line . condtion_appear
    (36) condtion_appear -> .

    RIGHTPARENT     reduce using rule 36 (condtion_appear -> .)

    condtion_appear                shift and go to state 140

state 132

    (41) condition_signs -> GREATERTN add_operator .

    LEFTPARENT      reduce using rule 41 (condition_signs -> GREATERTN add_operator .)
    INI_INT         reduce using rule 41 (condition_signs -> GREATERTN add_operator .)
    INI_FLOAT       reduce using rule 41 (condition_signs -> GREATERTN add_operator .)
    ID              reduce using rule 41 (condition_signs -> GREATERTN add_operator .)


state 133

    (42) condition_signs -> LESSTN add_operator .

    LEFTPARENT      reduce using rule 42 (condition_signs -> LESSTN add_operator .)
    INI_INT         reduce using rule 42 (condition_signs -> LESSTN add_operator .)
    INI_FLOAT       reduce using rule 42 (condition_signs -> LESSTN add_operator .)
    ID              reduce using rule 42 (condition_signs -> LESSTN add_operator .)


state 134

    (43) condition_signs -> SAME add_operator .

    LEFTPARENT      reduce using rule 43 (condition_signs -> SAME add_operator .)
    INI_INT         reduce using rule 43 (condition_signs -> SAME add_operator .)
    INI_FLOAT       reduce using rule 43 (condition_signs -> SAME add_operator .)
    ID              reduce using rule 43 (condition_signs -> SAME add_operator .)


state 135

    (44) condition_signs -> NOTSAME add_operator .

    LEFTPARENT      reduce using rule 44 (condition_signs -> NOTSAME add_operator .)
    INI_INT         reduce using rule 44 (condition_signs -> NOTSAME add_operator .)
    INI_FLOAT       reduce using rule 44 (condition_signs -> NOTSAME add_operator .)
    ID              reduce using rule 44 (condition_signs -> NOTSAME add_operator .)


state 136

    (33) while -> WHILE while_appear LEFTPARENT condition_expresion right_parent_condition RIGHTPARENT . func_code end_cond
    (26) func_code -> . LEFTKEY lets func_code_aux RIGHTKEY

    LEFTKEY         shift and go to state 48

    func_code                      shift and go to state 141

state 137

    (80) set_value -> INI_INT aux_int_check append_operand DOTCOMMA .

    IF              reduce using rule 80 (set_value -> INI_INT aux_int_check append_operand DOTCOMMA .)
    WHILE           reduce using rule 80 (set_value -> INI_INT aux_int_check append_operand DOTCOMMA .)
    ID              reduce using rule 80 (set_value -> INI_INT aux_int_check append_operand DOTCOMMA .)
    LEFTPARENT      reduce using rule 80 (set_value -> INI_INT aux_int_check append_operand DOTCOMMA .)
    INI_INT         reduce using rule 80 (set_value -> INI_INT aux_int_check append_operand DOTCOMMA .)
    INI_FLOAT       reduce using rule 80 (set_value -> INI_INT aux_int_check append_operand DOTCOMMA .)
    RIGHTKEY        reduce using rule 80 (set_value -> INI_INT aux_int_check append_operand DOTCOMMA .)


state 138

    (81) set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA .

    IF              reduce using rule 81 (set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA .)
    WHILE           reduce using rule 81 (set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA .)
    ID              reduce using rule 81 (set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA .)
    LEFTPARENT      reduce using rule 81 (set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA .)
    INI_INT         reduce using rule 81 (set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA .)
    INI_FLOAT       reduce using rule 81 (set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA .)
    RIGHTKEY        reduce using rule 81 (set_value -> INI_FLOAT aux_float_check append_operand DOTCOMMA .)


state 139

    (35) condition -> IF LEFTPARENT found_init_parent condition_expresion right_parent_condition RIGHTPARENT func_code . end_cond condition_end_check
    (40) end_cond -> .

    ELSE            reduce using rule 40 (end_cond -> .)
    IF              reduce using rule 40 (end_cond -> .)
    WHILE           reduce using rule 40 (end_cond -> .)
    ID              reduce using rule 40 (end_cond -> .)
    LEFTPARENT      reduce using rule 40 (end_cond -> .)
    INI_INT         reduce using rule 40 (end_cond -> .)
    INI_FLOAT       reduce using rule 40 (end_cond -> .)
    RIGHTKEY        reduce using rule 40 (end_cond -> .)

    end_cond                       shift and go to state 142

state 140

    (47) condition_expresion -> expresion_line condition_signs expresion_line condtion_appear .

    RIGHTPARENT     reduce using rule 47 (condition_expresion -> expresion_line condition_signs expresion_line condtion_appear .)


state 141

    (33) while -> WHILE while_appear LEFTPARENT condition_expresion right_parent_condition RIGHTPARENT func_code . end_cond
    (40) end_cond -> .

    IF              reduce using rule 40 (end_cond -> .)
    WHILE           reduce using rule 40 (end_cond -> .)
    ID              reduce using rule 40 (end_cond -> .)
    LEFTPARENT      reduce using rule 40 (end_cond -> .)
    INI_INT         reduce using rule 40 (end_cond -> .)
    INI_FLOAT       reduce using rule 40 (end_cond -> .)
    RIGHTKEY        reduce using rule 40 (end_cond -> .)

    end_cond                       shift and go to state 143

state 142

    (35) condition -> IF LEFTPARENT found_init_parent condition_expresion right_parent_condition RIGHTPARENT func_code end_cond . condition_end_check
    (37) condition_end_check -> . ELSE func_code end_condition
    (38) condition_end_check -> .

    ELSE            shift and go to state 145
    IF              reduce using rule 38 (condition_end_check -> .)
    WHILE           reduce using rule 38 (condition_end_check -> .)
    ID              reduce using rule 38 (condition_end_check -> .)
    LEFTPARENT      reduce using rule 38 (condition_end_check -> .)
    INI_INT         reduce using rule 38 (condition_end_check -> .)
    INI_FLOAT       reduce using rule 38 (condition_end_check -> .)
    RIGHTKEY        reduce using rule 38 (condition_end_check -> .)

    condition_end_check            shift and go to state 144

state 143

    (33) while -> WHILE while_appear LEFTPARENT condition_expresion right_parent_condition RIGHTPARENT func_code end_cond .

    IF              reduce using rule 33 (while -> WHILE while_appear LEFTPARENT condition_expresion right_parent_condition RIGHTPARENT func_code end_cond .)
    WHILE           reduce using rule 33 (while -> WHILE while_appear LEFTPARENT condition_expresion right_parent_condition RIGHTPARENT func_code end_cond .)
    ID              reduce using rule 33 (while -> WHILE while_appear LEFTPARENT condition_expresion right_parent_condition RIGHTPARENT func_code end_cond .)
    LEFTPARENT      reduce using rule 33 (while -> WHILE while_appear LEFTPARENT condition_expresion right_parent_condition RIGHTPARENT func_code end_cond .)
    INI_INT         reduce using rule 33 (while -> WHILE while_appear LEFTPARENT condition_expresion right_parent_condition RIGHTPARENT func_code end_cond .)
    INI_FLOAT       reduce using rule 33 (while -> WHILE while_appear LEFTPARENT condition_expresion right_parent_condition RIGHTPARENT func_code end_cond .)
    RIGHTKEY        reduce using rule 33 (while -> WHILE while_appear LEFTPARENT condition_expresion right_parent_condition RIGHTPARENT func_code end_cond .)


state 144

    (35) condition -> IF LEFTPARENT found_init_parent condition_expresion right_parent_condition RIGHTPARENT func_code end_cond condition_end_check .

    IF              reduce using rule 35 (condition -> IF LEFTPARENT found_init_parent condition_expresion right_parent_condition RIGHTPARENT func_code end_cond condition_end_check .)
    WHILE           reduce using rule 35 (condition -> IF LEFTPARENT found_init_parent condition_expresion right_parent_condition RIGHTPARENT func_code end_cond condition_end_check .)
    ID              reduce using rule 35 (condition -> IF LEFTPARENT found_init_parent condition_expresion right_parent_condition RIGHTPARENT func_code end_cond condition_end_check .)
    LEFTPARENT      reduce using rule 35 (condition -> IF LEFTPARENT found_init_parent condition_expresion right_parent_condition RIGHTPARENT func_code end_cond condition_end_check .)
    INI_INT         reduce using rule 35 (condition -> IF LEFTPARENT found_init_parent condition_expresion right_parent_condition RIGHTPARENT func_code end_cond condition_end_check .)
    INI_FLOAT       reduce using rule 35 (condition -> IF LEFTPARENT found_init_parent condition_expresion right_parent_condition RIGHTPARENT func_code end_cond condition_end_check .)
    RIGHTKEY        reduce using rule 35 (condition -> IF LEFTPARENT found_init_parent condition_expresion right_parent_condition RIGHTPARENT func_code end_cond condition_end_check .)


state 145

    (37) condition_end_check -> ELSE . func_code end_condition
    (26) func_code -> . LEFTKEY lets func_code_aux RIGHTKEY

    LEFTKEY         shift and go to state 48

    func_code                      shift and go to state 146

state 146

    (37) condition_end_check -> ELSE func_code . end_condition
    (39) end_condition -> .

    IF              reduce using rule 39 (end_condition -> .)
    WHILE           reduce using rule 39 (end_condition -> .)
    ID              reduce using rule 39 (end_condition -> .)
    LEFTPARENT      reduce using rule 39 (end_condition -> .)
    INI_INT         reduce using rule 39 (end_condition -> .)
    INI_FLOAT       reduce using rule 39 (end_condition -> .)
    RIGHTKEY        reduce using rule 39 (end_condition -> .)

    end_condition                  shift and go to state 147

state 147

    (37) condition_end_check -> ELSE func_code end_condition .

    IF              reduce using rule 37 (condition_end_check -> ELSE func_code end_condition .)
    WHILE           reduce using rule 37 (condition_end_check -> ELSE func_code end_condition .)
    ID              reduce using rule 37 (condition_end_check -> ELSE func_code end_condition .)
    LEFTPARENT      reduce using rule 37 (condition_end_check -> ELSE func_code end_condition .)
    INI_INT         reduce using rule 37 (condition_end_check -> ELSE func_code end_condition .)
    INI_FLOAT       reduce using rule 37 (condition_end_check -> ELSE func_code end_condition .)
    RIGHTKEY        reduce using rule 37 (condition_end_check -> ELSE func_code end_condition .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 99 resolved using rule (add_operand -> <empty>)
WARNING: rejected rule (aux_int_check -> <empty>) in state 99
WARNING: reduce/reduce conflict in state 100 resolved using rule (add_operand -> <empty>)
WARNING: rejected rule (aux_float_check -> <empty>) in state 100
WARNING: Rule (aux_int_check -> <empty>) is never reduced
WARNING: Rule (aux_float_check -> <empty>) is never reduced
